<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190718 17:48:57.883" generator="Robot 3.1.2 (Python 2.7.15 on win32)">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase" id="s1" name="Testcase">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans" id="s1-s1" name="createTrans">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\crtTrans" id="s1-s1-s1" name="crtTrans">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\crtTrans\crtTrans_Nomal.robot" id="s1-s1-s1-s1" name="crtTrans Nomal">
<test id="s1-s1-s1-s1-t1" name="Scenario: createTrans - Create Transaction">
<kw name="getGeneAdd" library="utilDefined">
<arguments>
<arg>${host}</arg>
</arguments>
<assign>
<var>${geneAdd}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190718 17:48:58.175" level="INFO">${list} = [u'']</msg>
<status status="PASS" endtime="20190718 17:48:58.175" starttime="20190718 17:48:58.174"></status>
</kw>
<kw name="setPostRequest" library="utilDefined">
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20190718 17:48:58.176" level="INFO">${headers} = {u'Content-Type': u'application/json', u'Connection': u'close'}</msg>
<status status="PASS" endtime="20190718 17:48:58.176" starttime="20190718 17:48:58.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190718 17:48:58.176" level="INFO">${data} = {u'jsonrpc': u'2.0', u'method': u'personal_listAccounts', u'params': [u''], u'id': 1}</msg>
<status status="PASS" endtime="20190718 17:48:58.177" starttime="20190718 17:48:58.176"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190718 17:48:58.177" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190718 17:48:58.178" starttime="20190718 17:48:58.177"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190718 17:48:59.195" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"jsonrpc": "2.0", "method": "personal_listAccounts", "params": [""], "id": 1}, headers={u'Content-Type': u'application/json', u'Connection': u'close'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190718 17:48:59.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:48:59.196" starttime="20190718 17:48:58.178"></status>
</kw>
<msg timestamp="20190718 17:48:59.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:48:59.196" starttime="20190718 17:48:58.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190718 17:48:59.196" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3","P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ","P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD","P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g","P13JeRaiNsvDrRmZXZG3psoNqxBmQZJt1MG","P1AXxCx9a2drWBcYJGNbeYcxteSvmGb2zax"]}
</msg>
<status status="PASS" endtime="20190718 17:48:59.196" starttime="20190718 17:48:59.196"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:48:59.209" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3","P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ","P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD","P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g","P13JeRaiNsvDr...</msg>
<status status="PASS" endtime="20190718 17:48:59.209" starttime="20190718 17:48:59.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:48:59.211" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3","P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ","P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD","P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g","P13JeRaiNsvDrRmZXZG3psoNqxBmQZJt1MG","P1AXxCx9a2drWBcYJGNbeYcxteSvmGb2zax"]} </msg>
<msg timestamp="20190718 17:48:59.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190718 17:48:59.211" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3', u'P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ', u'P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD', u'P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g...</msg>
<status status="PASS" endtime="20190718 17:48:59.212" starttime="20190718 17:48:59.210"></status>
</kw>
<msg timestamp="20190718 17:48:59.213" level="INFO">${geneAdd} = P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3</msg>
<status status="PASS" endtime="20190718 17:48:59.213" starttime="20190718 17:48:58.174"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190718 17:48:59.215" level="INFO">${geneAdd} = P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3</msg>
<status status="PASS" endtime="20190718 17:48:59.215" starttime="20190718 17:48:59.214"></status>
</kw>
<kw name="normalCrtTrans" library="behaveKwd">
<arguments>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Request create transaction" library="normalKwd">
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<assign>
<var>${transList}</var>
</assign>
<msg timestamp="20190718 17:48:59.220" level="INFO">${transList} = [u'P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1']</msg>
<status status="PASS" endtime="20190718 17:48:59.220" starttime="20190718 17:48:59.218"></status>
</kw>
<kw name="setPostRequest" library="utilDefined">
<arguments>
<arg>${host}</arg>
<arg>ptn_cmdCreateTransaction</arg>
<arg>${transList}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20190718 17:48:59.222" level="INFO">${headers} = {u'Content-Type': u'application/json', u'Connection': u'close'}</msg>
<status status="PASS" endtime="20190718 17:48:59.223" starttime="20190718 17:48:59.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190718 17:48:59.224" level="INFO">${data} = {u'jsonrpc': u'2.0', u'method': u'ptn_cmdCreateTransaction', u'params': [u'P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1'], u'id': 1}</msg>
<status status="PASS" endtime="20190718 17:48:59.224" starttime="20190718 17:48:59.223"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190718 17:48:59.225" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190718 17:48:59.227" starttime="20190718 17:48:59.225"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190718 17:49:00.246" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"jsonrpc": "2.0", "method": "ptn_cmdCreateTransaction", "params": ["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1"], "id": 1}, headers={u'Content-Type': u'application/json', u'Connection': u'close'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190718 17:49:00.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:00.247" starttime="20190718 17:48:59.228"></status>
</kw>
<msg timestamp="20190718 17:49:00.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:00.248" starttime="20190718 17:48:59.220"></status>
</kw>
<kw name="resultToJson" library="utilDefined">
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190718 17:49:00.252" level="INFO">{"jsonrpc":"2.0","id":1,"error":{"code":-32601,"message":"The method ptn_cmdCreateTransaction does not exist/is not available"}}
</msg>
<status status="PASS" endtime="20190718 17:49:00.252" starttime="20190718 17:49:00.251"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:00.254" level="INFO">${jsonRes} = {"error":{"code":-32601,"message":"The method ptn_cmdCreateTransaction does not exist/is not available"},"id":1,"jsonrpc":"2.0"}</msg>
<status status="PASS" endtime="20190718 17:49:00.255" starttime="20190718 17:49:00.252"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:00.256" level="INFO">To JSON using : content={"error":{"code":-32601,"message":"The method ptn_cmdCreateTransaction does not exist/is not available"},"id":1,"jsonrpc":"2.0"} </msg>
<msg timestamp="20190718 17:49:00.256" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190718 17:49:00.256" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'The method ptn_cmdCreateTransaction does not exist/is not available', u'code': -32601}}</msg>
<status status="PASS" endtime="20190718 17:49:00.256" starttime="20190718 17:49:00.255"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:00.257" starttime="20190718 17:49:00.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:00.258" starttime="20190718 17:49:00.257"></status>
</kw>
<msg timestamp="20190718 17:49:00.259" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'The method ptn_cmdCreateTransaction does not exist/is not available', u'code': -32601}}</msg>
<status status="PASS" endtime="20190718 17:49:00.259" starttime="20190718 17:49:00.249"></status>
</kw>
<msg timestamp="20190718 17:49:00.259" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'The method ptn_cmdCreateTransaction does not exist/is not available', u'code': -32601}}</msg>
<status status="PASS" endtime="20190718 17:49:00.259" starttime="20190718 17:48:59.217"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${jsonRes['result']}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190718 17:49:00.260" level="FAIL">Resolving variable '${jsonRes['result']}' failed: KeyError: 'result'</msg>
<status status="FAIL" endtime="20190718 17:49:00.260" starttime="20190718 17:49:00.259"></status>
</kw>
<status status="FAIL" endtime="20190718 17:49:00.261" starttime="20190718 17:48:59.216"></status>
</kw>
<tags>
<tag>normal</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:00.262" critical="yes" starttime="20190718 17:48:58.173">Resolving variable '${jsonRes['result']}' failed: KeyError: 'result'</status>
</test>
<status status="FAIL" endtime="20190718 17:49:00.268" starttime="20190718 17:48:57.924"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:00.277" starttime="20190718 17:48:57.921"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\query" id="s1-s1-s2" name="Query">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\query\getBalance_Normal.robot" id="s1-s1-s2-s1" name="getBalance Normal">
<test id="s1-s1-s2-s1-t1" name="Scenario: 20Contract - GetBalance">
<kw name="normalGetBalance" library="behaveKwd">
<arguments>
<arg>${address}</arg>
</arguments>
<kw name="Request getBalance" library="normalKwd">
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<assign>
<var>${PTN}</var>
<var>${RESULT}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<assign>
<var>${address}</var>
</assign>
<msg timestamp="20190718 17:49:00.323" level="INFO">${address} = [u'P1HhWxfQLMgb5TfE56GASURCuitX2XL397G']</msg>
<status status="PASS" endtime="20190718 17:49:00.323" starttime="20190718 17:49:00.323"></status>
</kw>
<kw name="setPostRequest" library="utilDefined">
<arguments>
<arg>${host}</arg>
<arg>wallet_getBalance</arg>
<arg>${address}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20190718 17:49:00.324" level="INFO">${headers} = {u'Content-Type': u'application/json', u'Connection': u'close'}</msg>
<status status="PASS" endtime="20190718 17:49:00.325" starttime="20190718 17:49:00.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190718 17:49:00.325" level="INFO">${data} = {u'jsonrpc': u'2.0', u'method': u'wallet_getBalance', u'params': [u'P1HhWxfQLMgb5TfE56GASURCuitX2XL397G'], u'id': 1}</msg>
<status status="PASS" endtime="20190718 17:49:00.326" starttime="20190718 17:49:00.325"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190718 17:49:00.326" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190718 17:49:00.326" starttime="20190718 17:49:00.326"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190718 17:49:01.338" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"jsonrpc": "2.0", "method": "wallet_getBalance", "params": ["P1HhWxfQLMgb5TfE56GASURCuitX2XL397G"], "id": 1}, headers={u'Content-Type': u'application/json', u'Connection': u'close'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190718 17:49:01.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:01.339" starttime="20190718 17:49:00.327"></status>
</kw>
<msg timestamp="20190718 17:49:01.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:01.340" starttime="20190718 17:49:00.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190718 17:49:01.341" level="INFO">{"jsonrpc":"2.0","id":1,"result":{}}
</msg>
<status status="PASS" endtime="20190718 17:49:01.342" starttime="20190718 17:49:01.340"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:01.346" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{}}</msg>
<status status="PASS" endtime="20190718 17:49:01.346" starttime="20190718 17:49:01.342"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:01.349" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{}} </msg>
<msg timestamp="20190718 17:49:01.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190718 17:49:01.350" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190718 17:49:01.350" starttime="20190718 17:49:01.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:01.352" starttime="20190718 17:49:01.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:01.358" starttime="20190718 17:49:01.352"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<assign>
<var>${strResult}</var>
</assign>
<msg timestamp="20190718 17:49:01.361" level="INFO">${strResult} = {}</msg>
<status status="PASS" endtime="20190718 17:49:01.361" starttime="20190718 17:49:01.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<assign>
<var>${PTN}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:01.363" starttime="20190718 17:49:01.362"></status>
</kw>
<msg timestamp="20190718 17:49:01.363" level="INFO">${PTN} = 0</msg>
<status status="PASS" endtime="20190718 17:49:01.363" starttime="20190718 17:49:01.361"></status>
</kw>
<msg timestamp="20190718 17:49:01.364" level="INFO">${PTN} = 0</msg>
<msg timestamp="20190718 17:49:01.364" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190718 17:49:01.364" starttime="20190718 17:49:00.323"></status>
</kw>
<status status="PASS" endtime="20190718 17:49:01.364" starttime="20190718 17:49:00.322"></status>
</kw>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190718 17:49:01.365" critical="yes" starttime="20190718 17:49:00.322"></status>
</test>
<status status="PASS" endtime="20190718 17:49:01.368" starttime="20190718 17:49:00.291"></status>
</suite>
<status status="PASS" endtime="20190718 17:49:01.370" starttime="20190718 17:49:00.285"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\sendTrans" id="s1-s1-s3" name="sendTrans">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\sendTrans\sendTrans_Nomal.robot" id="s1-s1-s3-s1" name="sendTrans Nomal">
<test id="s1-s1-s3-s1-t1" name="Scenario: createTrans - Send Transaction">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190718 17:49:05.390" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190718 17:49:05.390" starttime="20190718 17:49:01.390"></status>
</kw>
<kw name="Given Request getbalance before create transaction">
<assign>
<var>${PTN1}</var>
</assign>
<kw name="getGeneAdd" library="utilDefined">
<arguments>
<arg>${host}</arg>
</arguments>
<assign>
<var>${geneAdd}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190718 17:49:05.394" level="INFO">${list} = [u'']</msg>
<status status="PASS" endtime="20190718 17:49:05.394" starttime="20190718 17:49:05.393"></status>
</kw>
<kw name="setPostRequest" library="utilDefined">
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20190718 17:49:05.396" level="INFO">${headers} = {u'Content-Type': u'application/json', u'Connection': u'close'}</msg>
<status status="PASS" endtime="20190718 17:49:05.396" starttime="20190718 17:49:05.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190718 17:49:05.398" level="INFO">${data} = {u'jsonrpc': u'2.0', u'method': u'personal_listAccounts', u'params': [u''], u'id': 1}</msg>
<status status="PASS" endtime="20190718 17:49:05.398" starttime="20190718 17:49:05.396"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190718 17:49:05.399" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190718 17:49:05.400" starttime="20190718 17:49:05.398"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190718 17:49:06.419" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"jsonrpc": "2.0", "method": "personal_listAccounts", "params": [""], "id": 1}, headers={u'Content-Type': u'application/json', u'Connection': u'close'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190718 17:49:06.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:06.420" starttime="20190718 17:49:05.400"></status>
</kw>
<msg timestamp="20190718 17:49:06.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:06.422" starttime="20190718 17:49:05.394"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190718 17:49:06.424" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3","P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ","P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD","P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g","P13JeRaiNsvDrRmZXZG3psoNqxBmQZJt1MG","P1AXxCx9a2drWBcYJGNbeYcxteSvmGb2zax"]}
</msg>
<status status="PASS" endtime="20190718 17:49:06.424" starttime="20190718 17:49:06.422"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:06.430" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3","P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ","P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD","P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g","P13JeRaiNsvDr...</msg>
<status status="PASS" endtime="20190718 17:49:06.430" starttime="20190718 17:49:06.425"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:06.431" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3","P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ","P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD","P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g","P13JeRaiNsvDrRmZXZG3psoNqxBmQZJt1MG","P1AXxCx9a2drWBcYJGNbeYcxteSvmGb2zax"]} </msg>
<msg timestamp="20190718 17:49:06.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190718 17:49:06.432" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3', u'P1B7hF4F8rET47evRYcusEiJ7zi2UMmu8oZ', u'P1DmdSCxq98s7dunKhVCUV2G6VRsZ38SpXD', u'P1LuUDBQq2FZd4GHG2pz4ydRxd6sYFMhN7g...</msg>
<status status="PASS" endtime="20190718 17:49:06.432" starttime="20190718 17:49:06.431"></status>
</kw>
<msg timestamp="20190718 17:49:06.432" level="INFO">${geneAdd} = P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3</msg>
<status status="PASS" endtime="20190718 17:49:06.432" starttime="20190718 17:49:05.392"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190718 17:49:06.434" level="INFO">${geneAdd} = P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3</msg>
<status status="PASS" endtime="20190718 17:49:06.434" starttime="20190718 17:49:06.433"></status>
</kw>
<kw name="normalGetBalance" library="behaveKwd">
<arguments>
<arg>${recieverAdd}</arg>
</arguments>
<assign>
<var>${PTN1}</var>
<var>${result1}</var>
</assign>
<kw name="Request getBalance" library="normalKwd">
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<assign>
<var>${PTN}</var>
<var>${RESULT}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<assign>
<var>${address}</var>
</assign>
<msg timestamp="20190718 17:49:06.437" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190718 17:49:06.437" starttime="20190718 17:49:06.436"></status>
</kw>
<kw name="setPostRequest" library="utilDefined">
<arguments>
<arg>${host}</arg>
<arg>wallet_getBalance</arg>
<arg>${address}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20190718 17:49:06.439" level="INFO">${headers} = {u'Content-Type': u'application/json', u'Connection': u'close'}</msg>
<status status="PASS" endtime="20190718 17:49:06.439" starttime="20190718 17:49:06.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190718 17:49:06.441" level="INFO">${data} = {u'jsonrpc': u'2.0', u'method': u'wallet_getBalance', u'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], u'id': 1}</msg>
<status status="PASS" endtime="20190718 17:49:06.441" starttime="20190718 17:49:06.440"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190718 17:49:06.442" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190718 17:49:06.443" starttime="20190718 17:49:06.441"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190718 17:49:07.457" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"jsonrpc": "2.0", "method": "wallet_getBalance", "params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "id": 1}, headers={u'Content-Type': u'application/json', u'Connection': u'close'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190718 17:49:07.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:07.458" starttime="20190718 17:49:06.443"></status>
</kw>
<msg timestamp="20190718 17:49:07.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190718 17:49:07.459" starttime="20190718 17:49:06.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190718 17:49:07.460" level="INFO">{"jsonrpc":"2.0","id":1,"result":{}}
</msg>
<status status="PASS" endtime="20190718 17:49:07.460" starttime="20190718 17:49:07.459"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:07.462" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{}}</msg>
<status status="PASS" endtime="20190718 17:49:07.462" starttime="20190718 17:49:07.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<msg timestamp="20190718 17:49:07.463" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{}} </msg>
<msg timestamp="20190718 17:49:07.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190718 17:49:07.463" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190718 17:49:07.463" starttime="20190718 17:49:07.462"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:07.464" starttime="20190718 17:49:07.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:07.465" starttime="20190718 17:49:07.464"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<assign>
<var>${strResult}</var>
</assign>
<msg timestamp="20190718 17:49:07.467" level="INFO">${strResult} = {}</msg>
<status status="PASS" endtime="20190718 17:49:07.467" starttime="20190718 17:49:07.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<assign>
<var>${PTN}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190718 17:49:07.470" starttime="20190718 17:49:07.469"></status>
</kw>
<msg timestamp="20190718 17:49:07.470" level="INFO">${PTN} = 0</msg>
<status status="PASS" endtime="20190718 17:49:07.470" starttime="20190718 17:49:07.468"></status>
</kw>
<msg timestamp="20190718 17:49:07.471" level="INFO">${PTN} = 0</msg>
<msg timestamp="20190718 17:49:07.471" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190718 17:49:07.471" starttime="20190718 17:49:06.435"></status>
</kw>
<msg timestamp="20190718 17:49:07.472" level="INFO">${PTN1} = 0</msg>
<msg timestamp="20190718 17:49:07.472" level="INFO">${result1} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190718 17:49:07.472" starttime="20190718 17:49:06.434"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')+decimal.Decimal('${PTNAmount}')</arg>
<arg>decimal</arg>
</arguments>
<assign>
<var>${PTNGAIN}</var>
</assign>
<msg timestamp="20190718 17:49:07.473" level="INFO">${PTNGAIN} = 4000</msg>
<status status="PASS" endtime="20190718 17:49:07.473" starttime="20190718 17:49:07.472"></status>
</kw>
<msg timestamp="20190718 17:49:07.474" level="INFO">${PTN1} = 4000</msg>
<status status="PASS" endtime="20190718 17:49:07.474" starttime="20190718 17:49:05.391"></status>
</kw>
<kw name="And normalCrtTrans" library="behaveKwd">
<arguments>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Request create transaction" library="normalKwd">
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<assign>
<var>${jsonRes}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<assign>
<var>${transList}</var>
</assign>
<msg timestamp="20190718 17:49:07.479" level="INFO">${transList} = [u'P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1']</msg>
<status status="PASS" endtime="20190718 17:49:07.479" starttime="20190718 17:49:07.478"></status>
</kw>
<kw name="setPostRequest" library="utilDefined">
<arguments>
<arg>${host}</arg>
<arg>ptn_cmdCreateTransaction</arg>
<arg>${transList}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20190718 17:49:07.482" level="INFO">${headers} = {u'Content-Type': u'application/json', u'Connection': u'close'}</msg>
<status status="PASS" endtime="20190718 17:49:07.482" starttime="20190718 17:49:07.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190718 17:49:07.483" level="INFO">${data} = {u'jsonrpc': u'2.0', u'method': u'ptn_cmdCreateTransaction', u'params': [u'P1KXuo6QJ8H1uouuMpuAEdM4kMsccszARL3', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1'], u'id': 1}</msg>
<status status="PASS" endtime="20190718 17:49:07.484" starttime="20190718 17:49:07.483"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190718 17:49:07.484" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190718 17:49:07.485" starttime="20190718 17:49:07.484"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="FAIL" endtime="20190718 17:49:08.494" starttime="20190718 17:49:07.485"></status>
</kw>
<status status="FAIL" endtime="20190718 17:49:08.495" starttime="20190718 17:49:07.480"></status>
</kw>
<status status="FAIL" endtime="20190718 17:49:08.495" starttime="20190718 17:49:07.476"></status>
</kw>
<status status="FAIL" endtime="20190718 17:49:08.496" starttime="20190718 17:49:07.475"></status>
</kw>
<doc>Verify PTN after sending</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.498" critical="yes" starttime="20190718 17:49:01.387">Execution terminated by signal</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.505" starttime="20190718 17:49:01.377"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.510" starttime="20190718 17:49:01.374"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\signTrans" id="s1-s1-s4" name="signTrans">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\createTrans\signTrans\signTrans_Nomal.robot" id="s1-s1-s4-s1" name="signTrans Nomal">
<test id="s1-s1-s4-s1-t1" name="Scenario: createTrans - Sign Transaction">
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.516" critical="yes" starttime="20190718 17:49:08.516">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.518" starttime="20190718 17:49:08.513"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.520" starttime="20190718 17:49:08.511"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.523" starttime="20190718 17:48:57.918"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract" id="s1-s2" name="crt20Contract">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\ccinvokePass" id="s1-s2-s1" name="ccinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\ccinvokePass\ccinvoketxPass_RecieverPTN.robot" id="s1-s2-s1-s1" name="ccinvoketxPass RecieverPTN">
<test id="s1-s2-s1-s1-t1" name="Scenario: 20Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.529" critical="yes" starttime="20190718 17:49:08.529">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.533" starttime="20190718 17:49:08.527"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\ccinvokePass\ccinvoketxPass_SenderPTN.robot" id="s1-s2-s1-s2" name="ccinvoketxPass SenderPTN">
<test id="s1-s2-s1-s2-t1" name="Scenario: 20Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.537" critical="yes" starttime="20190718 17:49:08.537">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.539" starttime="20190718 17:49:08.535"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\ccinvokePass\ccinvoketxPass_SenderTokenId.robot" id="s1-s2-s1-s3" name="ccinvoketxPass SenderTokenId">
<test id="s1-s2-s1-s3-t1" name="Scenario: 20Contract - Create Token">
<doc>Verify Sender's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.545" critical="yes" starttime="20190718 17:49:08.545">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.548" starttime="20190718 17:49:08.544"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.551" starttime="20190718 17:49:08.526"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\ccquery" id="s1-s2-s2" name="Ccquery">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\ccquery\ccquery_Normal.robot" id="s1-s2-s2-s1" name="ccquery Normal">
<test id="s1-s2-s2-s1-t1" name="Scenario: 20Contract - Ccquery">
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.555" critical="yes" starttime="20190718 17:49:08.555">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.557" starttime="20190718 17:49:08.554"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.559" starttime="20190718 17:49:08.553"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\transferToken" id="s1-s2-s3" name="transferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\transferToken\transferToken_recieverToken.robot" id="s1-s2-s3-s1" name="transferToken recieverToken">
<test id="s1-s2-s3-s1-t1" name="Scenario: 20Contract - Transfer Token">
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.567" critical="yes" starttime="20190718 17:49:08.566">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.568" starttime="20190718 17:49:08.565"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\transferToken\transferToken_senderTokenPTN.robot" id="s1-s2-s3-s2" name="transferToken senderTokenPTN">
<test id="s1-s2-s3-s2-t1" name="Scenario: 20Contract - Transfer Token">
<doc>verify sender's PTN and token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.573" critical="yes" starttime="20190718 17:49:08.572">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.574" starttime="20190718 17:49:08.571"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.577" starttime="20190718 17:49:08.563"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zChangeSupply" id="s1-s2-s4" name="zChangeSupply">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s2-s4-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s2-s4-s1-t1" name="Scenario: 20Contract - Change Supply Token">
<doc>Verify SupplyAdd And Transfer Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.583" critical="yes" starttime="20190718 17:49:08.582">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.585" starttime="20190718 17:49:08.581"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.588" starttime="20190718 17:49:08.580"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zFrozToken" id="s1-s2-s5" name="zFrozToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zFrozToken\transferToken_frozen_senderToken.robot" id="s1-s2-s5-s1" name="transferToken frozen senderToken">
<test id="s1-s2-s5-s1-t1" name="Scenario: 20Contract - Frozen Token">
<doc>1.create ok 2.transfer ok 3.frozen ok 4.transfer fail</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.592" critical="yes" starttime="20190718 17:49:08.592">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.593" starttime="20190718 17:49:08.591"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.594" starttime="20190718 17:49:08.589"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zSupplyToken" id="s1-s2-s6" name="zSupplyToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zSupplyToken\supplyTokenAllow_SenderPTNToken.robot" id="s1-s2-s6-s1" name="supplyTokenAllow SenderPTNToken">
<test id="s1-s2-s6-s1-t1" name="Scenario: 20Contract- Supply token">
<doc>Verify Sender's PTN and Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.605" critical="yes" starttime="20190718 17:49:08.604">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.608" starttime="20190718 17:49:08.602"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt20Contract\zSupplyToken\supplyTokenForbid_SenderPTNToken.robot" id="s1-s2-s6-s2" name="supplyTokenForbid SenderPTNToken">
<test id="s1-s2-s6-s2-t1" name="Scenario: 20Contract- Supply token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.611" critical="yes" starttime="20190718 17:49:08.610">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.612" starttime="20190718 17:49:08.609"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.616" starttime="20190718 17:49:08.600"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.619" starttime="20190718 17:49:08.525"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence" id="s1-s3" name="crt721Seqence">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\ccinvokePass" id="s1-s3-s1" name="ccinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\ccinvokePass\721Contract_RecieverPTN.robot" id="s1-s3-s1-s1" name="721Contract RecieverPTN">
<test id="s1-s3-s1-s1-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.625" critical="yes" starttime="20190718 17:49:08.625">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.626" starttime="20190718 17:49:08.623"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\ccinvokePass\721Contract_SenderPTN.robot" id="s1-s3-s1-s2" name="721Contract SenderPTN">
<test id="s1-s3-s1-s2-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.631" critical="yes" starttime="20190718 17:49:08.630">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.635" starttime="20190718 17:49:08.629"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\ccinvokePass\721Contract_SenderTokenId.robot" id="s1-s3-s1-s3" name="721Contract SenderTokenId">
<test id="s1-s3-s1-s3-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Sender's TokenId</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.639" critical="yes" starttime="20190718 17:49:08.638">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.642" starttime="20190718 17:49:08.637"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.644" starttime="20190718 17:49:08.621"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\transferToken" id="s1-s3-s2" name="transferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\transferToken\transferToken_recieverToken.robot" id="s1-s3-s2-s1" name="transferToken recieverToken">
<test id="s1-s3-s2-s1-t1" name="Scenario: 721 Contract - Transfer token">
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.649" critical="yes" starttime="20190718 17:49:08.649">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.652" starttime="20190718 17:49:08.647"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.654" starttime="20190718 17:49:08.646"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\zChangeSupply" id="s1-s3-s3" name="zChangeSupply">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721Seqence\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s3-s3-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s3-s3-s1-t1" name="Scenario: 721 Contract - Change token then supply token">
<doc>Verify Sender's PTN and token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.660" critical="yes" starttime="20190718 17:49:08.658">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.661" starttime="20190718 17:49:08.657"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.663" starttime="20190718 17:49:08.656"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.665" starttime="20190718 17:49:08.621"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID" id="s1-s4" name="crt721UDID">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\ccinvokePass" id="s1-s4-s1" name="ccinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\ccinvokePass\721Contract_RecieverPTN.robot" id="s1-s4-s1-s1" name="721Contract RecieverPTN">
<test id="s1-s4-s1-s1-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.673" critical="yes" starttime="20190718 17:49:08.672">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.675" starttime="20190718 17:49:08.671"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\ccinvokePass\721Contract_SenderPTN.robot" id="s1-s4-s1-s2" name="721Contract SenderPTN">
<test id="s1-s4-s1-s2-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.678" critical="yes" starttime="20190718 17:49:08.677">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.680" starttime="20190718 17:49:08.676"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\ccinvokePass\721Contract_SenderTokenId.robot" id="s1-s4-s1-s3" name="721Contract SenderTokenId">
<test id="s1-s4-s1-s3-t1" name="Scenario: 721 UDID - Create token">
<doc>Verify Sender's TokenId</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.685" critical="yes" starttime="20190718 17:49:08.684">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.686" starttime="20190718 17:49:08.682"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.689" starttime="20190718 17:49:08.670"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\transferToken" id="s1-s4-s2" name="transferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\transferToken\transferToken_recieverToken.robot" id="s1-s4-s2-s1" name="transferToken recieverToken">
<test id="s1-s4-s2-s1-t1" name="Scenario: 721 Contract - Transfer token">
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.695" critical="yes" starttime="20190718 17:49:08.695">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.699" starttime="20190718 17:49:08.694"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.704" starttime="20190718 17:49:08.693"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\zChangeSupply" id="s1-s4-s3" name="zChangeSupply">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\crt721UDID\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s4-s3-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s4-s3-s1-t1" name="Scenario: 721 Contract - Change token then supply token">
<doc>Verify Sender's PTN and token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.710" critical="yes" starttime="20190718 17:49:08.710">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.712" starttime="20190718 17:49:08.708"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.715" starttime="20190718 17:49:08.707"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.717" starttime="20190718 17:49:08.667"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract" id="s1-s5" name="voteContract">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\ccinvokePass" id="s1-s5-s1" name="ccinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\ccinvokePass\voteContract_RecieverPTN.robot" id="s1-s5-s1-s1" name="voteContract RecieverPTN">
<test id="s1-s5-s1-s1-t1" name="Scenario: Vote Contract - Create Token">
<doc>Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.722" critical="yes" starttime="20190718 17:49:08.722">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.725" starttime="20190718 17:49:08.721"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\ccinvokePass\voteContract_SenderPTN.robot" id="s1-s5-s1-s2" name="voteContract SenderPTN">
<test id="s1-s5-s1-s2-t1" name="Scenario: Vote Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.729" critical="yes" starttime="20190718 17:49:08.728">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.731" starttime="20190718 17:49:08.727"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\ccinvokePass\voteContract_SenderTokenId.robot" id="s1-s5-s1-s3" name="voteContract SenderTokenId">
<test id="s1-s5-s1-s3-t1" name="Scenario: Vote Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.737" critical="yes" starttime="20190718 17:49:08.737">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.738" starttime="20190718 17:49:08.735"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.740" starttime="20190718 17:49:08.720"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\transferToken" id="s1-s5-s2" name="transferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\transferToken\voteTransfer_recieverToken.robot" id="s1-s5-s2-s1" name="voteTransfer recieverToken">
<test id="s1-s5-s2-s1-t1" name="Scenario: Vote Contract - Transfer Token">
<doc>Verify Reciever's Transfer PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.745" critical="yes" starttime="20190718 17:49:08.745">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.748" starttime="20190718 17:49:08.743"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\transferToken\voteTransfer_senderTokenPTN.robot" id="s1-s5-s2-s2" name="voteTransfer senderTokenPTN">
<test id="s1-s5-s2-s2-t1" name="Scenario: Vote Contract - Transfer Token">
<doc>Verify Sender's PTN and VOTE value</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.753" critical="yes" starttime="20190718 17:49:08.752">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.755" starttime="20190718 17:49:08.750"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.757" starttime="20190718 17:49:08.743"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\zToken" id="s1-s5-s3" name="zToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\zToken\ccinvokeToken_RecieverPTN.robot" id="s1-s5-s3-s1" name="ccinvokeToken RecieverPTN">
<test id="s1-s5-s3-s1-t1" name="Ccinvoke Token">
<doc>Scenario: Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.762" critical="yes" starttime="20190718 17:49:08.761">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.765" starttime="20190718 17:49:08.759"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\voteContract\zToken\ccinvokeToken_TokenPTNsender.robot" id="s1-s5-s3-s2" name="ccinvokeToken TokenPTNsender">
<test id="s1-s5-s3-s2-t1" name="Scenario: Vote - Ccinvoke Token">
<doc>Verify Sender's PTN and VOTE value</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.769" critical="yes" starttime="20190718 17:49:08.768">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.771" starttime="20190718 17:49:08.767"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.773" starttime="20190718 17:49:08.758"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.776" starttime="20190718 17:49:08.719"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node" id="s1-s6" name="zMulti-node">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\createTrans" id="s1-s6-s1" name="createTrans">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\createTrans\CrtTrans_NomalMain.robot" id="s1-s6-s1-s1" name="CrtTrans NomalMain">
<test id="s1-s6-s1-s1-t1" name="Scenario: Multi-node Create Transaction">
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.782" critical="yes" starttime="20190718 17:49:08.782">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.785" starttime="20190718 17:49:08.780"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\createTrans\CrtTrans_NomalMinor.robot" id="s1-s6-s1-s2" name="CrtTrans NomalMinor">
<test id="s1-s6-s1-s2-t1" name="Scenario: Multi-node Minor Create Transaction">
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.789" critical="yes" starttime="20190718 17:49:08.788">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.791" starttime="20190718 17:49:08.787"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.792" starttime="20190718 17:49:08.778"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract" id="s1-s6-s2" name="crt20Contract">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\CcinvokePass" id="s1-s6-s2-s1" name="CcinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\CcinvokePass\ccinvoketxPass_RecieverPTN.robot" id="s1-s6-s2-s1-s1" name="ccinvoketxPass RecieverPTN">
<test id="s1-s6-s2-s1-s1-t1" name="Scenario: 20Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.800" critical="yes" starttime="20190718 17:49:08.800">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.802" starttime="20190718 17:49:08.798"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\CcinvokePass\ccinvoketxPass_SenderPTN.robot" id="s1-s6-s2-s1-s2" name="ccinvoketxPass SenderPTN">
<test id="s1-s6-s2-s1-s2-t1" name="Scenario: 20Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.805" critical="yes" starttime="20190718 17:49:08.805">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.808" starttime="20190718 17:49:08.804"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\CcinvokePass\ccinvoketxPass_SenderTokenId.robot" id="s1-s6-s2-s1-s3" name="ccinvoketxPass SenderTokenId">
<test id="s1-s6-s2-s1-s3-t1" name="Scenario: 20Contract - Create Token">
<doc>Verify Sender's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.811" critical="yes" starttime="20190718 17:49:08.811">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.813" starttime="20190718 17:49:08.810"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.819" starttime="20190718 17:49:08.796"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\TransferToken" id="s1-s6-s2-s2" name="TransferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\TransferToken\transferToken_recieverToken.robot" id="s1-s6-s2-s2-s1" name="transferToken recieverToken">
<test id="s1-s6-s2-s2-s1-t1" name="Scenario: 20Contract - Transfer Token">
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.823" critical="yes" starttime="20190718 17:49:08.822">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.825" starttime="20190718 17:49:08.821"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\TransferToken\transferToken_senderTokenPTN.robot" id="s1-s6-s2-s2-s2" name="transferToken senderTokenPTN">
<test id="s1-s6-s2-s2-s2-t1" name="transferToken_senderTokenPTN">
<doc>QA105 must be a new one</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.830" critical="yes" starttime="20190718 17:49:08.829">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.831" starttime="20190718 17:49:08.828"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.833" starttime="20190718 17:49:08.821"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\zChangeSupply" id="s1-s6-s2-s3" name="zChangeSupply">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s6-s2-s3-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s6-s2-s3-s1-t1" name="Scenario: Change Supply Token">
<doc>Verify SupplyAdd And Transfer Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.840" critical="yes" starttime="20190718 17:49:08.839">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.841" starttime="20190718 17:49:08.838"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.843" starttime="20190718 17:49:08.837"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\zSupplyToken" id="s1-s6-s2-s4" name="zSupplyToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\zSupplyToken\supplyTokenAllow_SenderPTNToken.robot" id="s1-s6-s2-s4-s1" name="supplyTokenAllow SenderPTNToken">
<test id="s1-s6-s2-s4-s1-t1" name="Feature: Vote Contract- Create token">
<doc>Scenario: Verify Sender's PTN and Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.848" critical="yes" starttime="20190718 17:49:08.848">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.850" starttime="20190718 17:49:08.846"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt20Contract\zSupplyToken\supplyTokenForbid_SenderPTNToken.robot" id="s1-s6-s2-s4-s2" name="supplyTokenForbid SenderPTNToken">
<test id="s1-s6-s2-s4-s2-t1" name="Feature: Vote Contract- Create token">
<doc>Scenario: Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.855" critical="yes" starttime="20190718 17:49:08.854">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.856" starttime="20190718 17:49:08.853"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.858" starttime="20190718 17:49:08.845"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.861" starttime="20190718 17:49:08.795"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence" id="s1-s6-s3" name="crt721Seqence">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\ccinvokePass" id="s1-s6-s3-s1" name="ccinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\ccinvokePass\721Contract_RecieverPTN.robot" id="s1-s6-s3-s1-s1" name="721Contract RecieverPTN">
<test id="s1-s6-s3-s1-s1-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.867" critical="yes" starttime="20190718 17:49:08.867">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.870" starttime="20190718 17:49:08.865"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\ccinvokePass\721Contract_SenderPTN.robot" id="s1-s6-s3-s1-s2" name="721Contract SenderPTN">
<test id="s1-s6-s3-s1-s2-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.875" critical="yes" starttime="20190718 17:49:08.875">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.877" starttime="20190718 17:49:08.873"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\ccinvokePass\721Contract_SenderTokenId.robot" id="s1-s6-s3-s1-s3" name="721Contract SenderTokenId">
<test id="s1-s6-s3-s1-s3-t1" name="Feature: 721 Contract - Create token">
<doc>Scenario: Verify Sender's TokenId</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.881" critical="yes" starttime="20190718 17:49:08.879">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.882" starttime="20190718 17:49:08.878"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.884" starttime="20190718 17:49:08.864"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\transferToken" id="s1-s6-s3-s2" name="transferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\transferToken\transferToken_recieverToken.robot" id="s1-s6-s3-s2-s1" name="transferToken recieverToken">
<test id="s1-s6-s3-s2-s1-t1" name="Scenario: 721 Contract - Transfer token">
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.890" critical="yes" starttime="20190718 17:49:08.889">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.891" starttime="20190718 17:49:08.887"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.893" starttime="20190718 17:49:08.887"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\zChangeSupply" id="s1-s6-s3-s3" name="zChangeSupply">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\crt721Seqence\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s6-s3-s3-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s6-s3-s3-s1-t1" name="Scenario: 721 Contract - Change token then supply token">
<doc>Verify Sender's PTN and token</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.899" critical="yes" starttime="20190718 17:49:08.897">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.901" starttime="20190718 17:49:08.896"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.903" starttime="20190718 17:49:08.895"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.904" starttime="20190718 17:49:08.863"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract" id="s1-s6-s4" name="voteContract">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\ccinvokePass" id="s1-s6-s4-s1" name="ccinvokePass">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\ccinvokePass\voteContract_RecieverPTN.robot" id="s1-s6-s4-s1-s1" name="voteContract RecieverPTN">
<test id="s1-s6-s4-s1-s1-t1" name="Scenario: Vote Contract - Create Token">
<doc>Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.910" critical="yes" starttime="20190718 17:49:08.910">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.912" starttime="20190718 17:49:08.908"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\ccinvokePass\voteContract_SenderPTN.robot" id="s1-s6-s4-s1-s2" name="voteContract SenderPTN">
<test id="s1-s6-s4-s1-s2-t1" name="Scenario: Vote Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.916" critical="yes" starttime="20190718 17:49:08.915">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.919" starttime="20190718 17:49:08.914"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\ccinvokePass\voteContract_SenderTokenId.robot" id="s1-s6-s4-s1-s3" name="voteContract SenderTokenId">
<test id="s1-s6-s4-s1-s3-t1" name="Scenario: Vote Contract - Create Token">
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.923" critical="yes" starttime="20190718 17:49:08.923">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.925" starttime="20190718 17:49:08.921"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.926" starttime="20190718 17:49:08.907"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\transferToken" id="s1-s6-s4-s2" name="transferToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\transferToken\voteTransfer_recieverToken.robot" id="s1-s6-s4-s2-s1" name="voteTransfer recieverToken">
<test id="s1-s6-s4-s2-s1-t1" name="Scenario: Vote Contract - Transfer Token">
<doc>Verify Reciever's Transfer PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.932" critical="yes" starttime="20190718 17:49:08.931">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.934" starttime="20190718 17:49:08.930"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\transferToken\voteTransfer_senderTokenPTN.robot" id="s1-s6-s4-s2-s2" name="voteTransfer senderTokenPTN">
<test id="s1-s6-s4-s2-s2-t1" name="Scenario: Vote Contract - Transfer Token">
<doc>Verify Sender's PTN and VOTE value</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.940" critical="yes" starttime="20190718 17:49:08.940">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.942" starttime="20190718 17:49:08.938"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.944" starttime="20190718 17:49:08.929"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\zToken" id="s1-s6-s4-s3" name="zToken">
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\zToken\ccinvokeToken_RecieverPTN.robot" id="s1-s6-s4-s3-s1" name="ccinvokeToken RecieverPTN">
<test id="s1-s6-s4-s3-s1-t1" name="Ccinvoke Token">
<doc>Scenario: Verify Reciever's PTN</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.952" critical="yes" starttime="20190718 17:49:08.950">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.953" starttime="20190718 17:49:08.948"></status>
</suite>
<suite source="D:\GoProject\src\github.com\palletone\go-palletone\bdd\testcase\zMulti-node\voteContract\zToken\ccinvokeToken_TokenPTNsender.robot" id="s1-s6-s4-s3-s2" name="ccinvokeToken TokenPTNsender">
<test id="s1-s6-s4-s3-s2-t1" name="Scenario: Vote - Ccinvoke Token">
<doc>Verify Sender's PTN and VOTE value</doc>
<tags>
<tag>normal</tag>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" endtime="20190718 17:49:08.958" critical="yes" starttime="20190718 17:49:08.957">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" endtime="20190718 17:49:08.959" starttime="20190718 17:49:08.956"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.962" starttime="20190718 17:49:08.948"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.963" starttime="20190718 17:49:08.906"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.966" starttime="20190718 17:49:08.777"></status>
</suite>
<status status="FAIL" endtime="20190718 17:49:08.972" starttime="20190718 17:48:57.888"></status>
</suite>
<statistics>
<total>
<stat fail="52" pass="1">Critical Tests</stat>
<stat fail="52" pass="1">All Tests</stat>
</total>
<tag>
<stat info="combined" fail="2" combined="NOT robot:exit" pass="1">NOT robot:exit</stat>
<stat fail="52" pass="1">normal</stat>
<stat fail="50" pass="0">robot:exit</stat>
</tag>
<suite>
<stat fail="52" id="s1" name="Testcase" pass="1">Testcase</stat>
<stat fail="3" id="s1-s1" name="createTrans" pass="1">Testcase.createTrans</stat>
<stat fail="1" id="s1-s1-s1" name="crtTrans" pass="0">Testcase.createTrans.crtTrans</stat>
<stat fail="1" id="s1-s1-s1-s1" name="crtTrans Nomal" pass="0">Testcase.createTrans.crtTrans.crtTrans Nomal</stat>
<stat fail="0" id="s1-s1-s2" name="Query" pass="1">Testcase.createTrans.Query</stat>
<stat fail="0" id="s1-s1-s2-s1" name="getBalance Normal" pass="1">Testcase.createTrans.Query.getBalance Normal</stat>
<stat fail="1" id="s1-s1-s3" name="sendTrans" pass="0">Testcase.createTrans.sendTrans</stat>
<stat fail="1" id="s1-s1-s3-s1" name="sendTrans Nomal" pass="0">Testcase.createTrans.sendTrans.sendTrans Nomal</stat>
<stat fail="1" id="s1-s1-s4" name="signTrans" pass="0">Testcase.createTrans.signTrans</stat>
<stat fail="1" id="s1-s1-s4-s1" name="signTrans Nomal" pass="0">Testcase.createTrans.signTrans.signTrans Nomal</stat>
<stat fail="10" id="s1-s2" name="crt20Contract" pass="0">Testcase.crt20Contract</stat>
<stat fail="3" id="s1-s2-s1" name="ccinvokePass" pass="0">Testcase.crt20Contract.ccinvokePass</stat>
<stat fail="1" id="s1-s2-s1-s1" name="ccinvoketxPass RecieverPTN" pass="0">Testcase.crt20Contract.ccinvokePass.ccinvoketxPass RecieverPTN</stat>
<stat fail="1" id="s1-s2-s1-s2" name="ccinvoketxPass SenderPTN" pass="0">Testcase.crt20Contract.ccinvokePass.ccinvoketxPass SenderPTN</stat>
<stat fail="1" id="s1-s2-s1-s3" name="ccinvoketxPass SenderTokenId" pass="0">Testcase.crt20Contract.ccinvokePass.ccinvoketxPass SenderTokenId</stat>
<stat fail="1" id="s1-s2-s2" name="Ccquery" pass="0">Testcase.crt20Contract.Ccquery</stat>
<stat fail="1" id="s1-s2-s2-s1" name="ccquery Normal" pass="0">Testcase.crt20Contract.Ccquery.ccquery Normal</stat>
<stat fail="2" id="s1-s2-s3" name="transferToken" pass="0">Testcase.crt20Contract.transferToken</stat>
<stat fail="1" id="s1-s2-s3-s1" name="transferToken recieverToken" pass="0">Testcase.crt20Contract.transferToken.transferToken recieverToken</stat>
<stat fail="1" id="s1-s2-s3-s2" name="transferToken senderTokenPTN" pass="0">Testcase.crt20Contract.transferToken.transferToken senderTokenPTN</stat>
<stat fail="1" id="s1-s2-s4" name="zChangeSupply" pass="0">Testcase.crt20Contract.zChangeSupply</stat>
<stat fail="1" id="s1-s2-s4-s1" name="ccinvoketxPass SenderPTN" pass="0">Testcase.crt20Contract.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="1" id="s1-s2-s5" name="zFrozToken" pass="0">Testcase.crt20Contract.zFrozToken</stat>
<stat fail="1" id="s1-s2-s5-s1" name="transferToken frozen senderToken" pass="0">Testcase.crt20Contract.zFrozToken.transferToken frozen senderToken</stat>
<stat fail="2" id="s1-s2-s6" name="zSupplyToken" pass="0">Testcase.crt20Contract.zSupplyToken</stat>
<stat fail="1" id="s1-s2-s6-s1" name="supplyTokenAllow SenderPTNToken" pass="0">Testcase.crt20Contract.zSupplyToken.supplyTokenAllow SenderPTNToken</stat>
<stat fail="1" id="s1-s2-s6-s2" name="supplyTokenForbid SenderPTNToken" pass="0">Testcase.crt20Contract.zSupplyToken.supplyTokenForbid SenderPTNToken</stat>
<stat fail="5" id="s1-s3" name="crt721Seqence" pass="0">Testcase.crt721Seqence</stat>
<stat fail="3" id="s1-s3-s1" name="ccinvokePass" pass="0">Testcase.crt721Seqence.ccinvokePass</stat>
<stat fail="1" id="s1-s3-s1-s1" name="721Contract RecieverPTN" pass="0">Testcase.crt721Seqence.ccinvokePass.721Contract RecieverPTN</stat>
<stat fail="1" id="s1-s3-s1-s2" name="721Contract SenderPTN" pass="0">Testcase.crt721Seqence.ccinvokePass.721Contract SenderPTN</stat>
<stat fail="1" id="s1-s3-s1-s3" name="721Contract SenderTokenId" pass="0">Testcase.crt721Seqence.ccinvokePass.721Contract SenderTokenId</stat>
<stat fail="1" id="s1-s3-s2" name="transferToken" pass="0">Testcase.crt721Seqence.transferToken</stat>
<stat fail="1" id="s1-s3-s2-s1" name="transferToken recieverToken" pass="0">Testcase.crt721Seqence.transferToken.transferToken recieverToken</stat>
<stat fail="1" id="s1-s3-s3" name="zChangeSupply" pass="0">Testcase.crt721Seqence.zChangeSupply</stat>
<stat fail="1" id="s1-s3-s3-s1" name="ccinvoketxPass SenderPTN" pass="0">Testcase.crt721Seqence.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="5" id="s1-s4" name="crt721UDID" pass="0">Testcase.crt721UDID</stat>
<stat fail="3" id="s1-s4-s1" name="ccinvokePass" pass="0">Testcase.crt721UDID.ccinvokePass</stat>
<stat fail="1" id="s1-s4-s1-s1" name="721Contract RecieverPTN" pass="0">Testcase.crt721UDID.ccinvokePass.721Contract RecieverPTN</stat>
<stat fail="1" id="s1-s4-s1-s2" name="721Contract SenderPTN" pass="0">Testcase.crt721UDID.ccinvokePass.721Contract SenderPTN</stat>
<stat fail="1" id="s1-s4-s1-s3" name="721Contract SenderTokenId" pass="0">Testcase.crt721UDID.ccinvokePass.721Contract SenderTokenId</stat>
<stat fail="1" id="s1-s4-s2" name="transferToken" pass="0">Testcase.crt721UDID.transferToken</stat>
<stat fail="1" id="s1-s4-s2-s1" name="transferToken recieverToken" pass="0">Testcase.crt721UDID.transferToken.transferToken recieverToken</stat>
<stat fail="1" id="s1-s4-s3" name="zChangeSupply" pass="0">Testcase.crt721UDID.zChangeSupply</stat>
<stat fail="1" id="s1-s4-s3-s1" name="ccinvoketxPass SenderPTN" pass="0">Testcase.crt721UDID.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="7" id="s1-s5" name="voteContract" pass="0">Testcase.voteContract</stat>
<stat fail="3" id="s1-s5-s1" name="ccinvokePass" pass="0">Testcase.voteContract.ccinvokePass</stat>
<stat fail="1" id="s1-s5-s1-s1" name="voteContract RecieverPTN" pass="0">Testcase.voteContract.ccinvokePass.voteContract RecieverPTN</stat>
<stat fail="1" id="s1-s5-s1-s2" name="voteContract SenderPTN" pass="0">Testcase.voteContract.ccinvokePass.voteContract SenderPTN</stat>
<stat fail="1" id="s1-s5-s1-s3" name="voteContract SenderTokenId" pass="0">Testcase.voteContract.ccinvokePass.voteContract SenderTokenId</stat>
<stat fail="2" id="s1-s5-s2" name="transferToken" pass="0">Testcase.voteContract.transferToken</stat>
<stat fail="1" id="s1-s5-s2-s1" name="voteTransfer recieverToken" pass="0">Testcase.voteContract.transferToken.voteTransfer recieverToken</stat>
<stat fail="1" id="s1-s5-s2-s2" name="voteTransfer senderTokenPTN" pass="0">Testcase.voteContract.transferToken.voteTransfer senderTokenPTN</stat>
<stat fail="2" id="s1-s5-s3" name="zToken" pass="0">Testcase.voteContract.zToken</stat>
<stat fail="1" id="s1-s5-s3-s1" name="ccinvokeToken RecieverPTN" pass="0">Testcase.voteContract.zToken.ccinvokeToken RecieverPTN</stat>
<stat fail="1" id="s1-s5-s3-s2" name="ccinvokeToken TokenPTNsender" pass="0">Testcase.voteContract.zToken.ccinvokeToken TokenPTNsender</stat>
<stat fail="22" id="s1-s6" name="zMulti-node" pass="0">Testcase.zMulti-node</stat>
<stat fail="2" id="s1-s6-s1" name="createTrans" pass="0">Testcase.zMulti-node.createTrans</stat>
<stat fail="1" id="s1-s6-s1-s1" name="CrtTrans NomalMain" pass="0">Testcase.zMulti-node.createTrans.CrtTrans NomalMain</stat>
<stat fail="1" id="s1-s6-s1-s2" name="CrtTrans NomalMinor" pass="0">Testcase.zMulti-node.createTrans.CrtTrans NomalMinor</stat>
<stat fail="8" id="s1-s6-s2" name="crt20Contract" pass="0">Testcase.zMulti-node.crt20Contract</stat>
<stat fail="3" id="s1-s6-s2-s1" name="CcinvokePass" pass="0">Testcase.zMulti-node.crt20Contract.CcinvokePass</stat>
<stat fail="1" id="s1-s6-s2-s1-s1" name="ccinvoketxPass RecieverPTN" pass="0">Testcase.zMulti-node.crt20Contract.CcinvokePass.ccinvoketxPass RecieverPTN</stat>
<stat fail="1" id="s1-s6-s2-s1-s2" name="ccinvoketxPass SenderPTN" pass="0">Testcase.zMulti-node.crt20Contract.CcinvokePass.ccinvoketxPass SenderPTN</stat>
<stat fail="1" id="s1-s6-s2-s1-s3" name="ccinvoketxPass SenderTokenId" pass="0">Testcase.zMulti-node.crt20Contract.CcinvokePass.ccinvoketxPass SenderTokenId</stat>
<stat fail="2" id="s1-s6-s2-s2" name="TransferToken" pass="0">Testcase.zMulti-node.crt20Contract.TransferToken</stat>
<stat fail="1" id="s1-s6-s2-s2-s1" name="transferToken recieverToken" pass="0">Testcase.zMulti-node.crt20Contract.TransferToken.transferToken recieverToken</stat>
<stat fail="1" id="s1-s6-s2-s2-s2" name="transferToken senderTokenPTN" pass="0">Testcase.zMulti-node.crt20Contract.TransferToken.transferToken senderTokenPTN</stat>
<stat fail="1" id="s1-s6-s2-s3" name="zChangeSupply" pass="0">Testcase.zMulti-node.crt20Contract.zChangeSupply</stat>
<stat fail="1" id="s1-s6-s2-s3-s1" name="ccinvoketxPass SenderPTN" pass="0">Testcase.zMulti-node.crt20Contract.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="2" id="s1-s6-s2-s4" name="zSupplyToken" pass="0">Testcase.zMulti-node.crt20Contract.zSupplyToken</stat>
<stat fail="1" id="s1-s6-s2-s4-s1" name="supplyTokenAllow SenderPTNToken" pass="0">Testcase.zMulti-node.crt20Contract.zSupplyToken.supplyTokenAllow SenderPTNToken</stat>
<stat fail="1" id="s1-s6-s2-s4-s2" name="supplyTokenForbid SenderPTNToken" pass="0">Testcase.zMulti-node.crt20Contract.zSupplyToken.supplyTokenForbid SenderPTNToken</stat>
<stat fail="5" id="s1-s6-s3" name="crt721Seqence" pass="0">Testcase.zMulti-node.crt721Seqence</stat>
<stat fail="3" id="s1-s6-s3-s1" name="ccinvokePass" pass="0">Testcase.zMulti-node.crt721Seqence.ccinvokePass</stat>
<stat fail="1" id="s1-s6-s3-s1-s1" name="721Contract RecieverPTN" pass="0">Testcase.zMulti-node.crt721Seqence.ccinvokePass.721Contract RecieverPTN</stat>
<stat fail="1" id="s1-s6-s3-s1-s2" name="721Contract SenderPTN" pass="0">Testcase.zMulti-node.crt721Seqence.ccinvokePass.721Contract SenderPTN</stat>
<stat fail="1" id="s1-s6-s3-s1-s3" name="721Contract SenderTokenId" pass="0">Testcase.zMulti-node.crt721Seqence.ccinvokePass.721Contract SenderTokenId</stat>
<stat fail="1" id="s1-s6-s3-s2" name="transferToken" pass="0">Testcase.zMulti-node.crt721Seqence.transferToken</stat>
<stat fail="1" id="s1-s6-s3-s2-s1" name="transferToken recieverToken" pass="0">Testcase.zMulti-node.crt721Seqence.transferToken.transferToken recieverToken</stat>
<stat fail="1" id="s1-s6-s3-s3" name="zChangeSupply" pass="0">Testcase.zMulti-node.crt721Seqence.zChangeSupply</stat>
<stat fail="1" id="s1-s6-s3-s3-s1" name="ccinvoketxPass SenderPTN" pass="0">Testcase.zMulti-node.crt721Seqence.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="7" id="s1-s6-s4" name="voteContract" pass="0">Testcase.zMulti-node.voteContract</stat>
<stat fail="3" id="s1-s6-s4-s1" name="ccinvokePass" pass="0">Testcase.zMulti-node.voteContract.ccinvokePass</stat>
<stat fail="1" id="s1-s6-s4-s1-s1" name="voteContract RecieverPTN" pass="0">Testcase.zMulti-node.voteContract.ccinvokePass.voteContract RecieverPTN</stat>
<stat fail="1" id="s1-s6-s4-s1-s2" name="voteContract SenderPTN" pass="0">Testcase.zMulti-node.voteContract.ccinvokePass.voteContract SenderPTN</stat>
<stat fail="1" id="s1-s6-s4-s1-s3" name="voteContract SenderTokenId" pass="0">Testcase.zMulti-node.voteContract.ccinvokePass.voteContract SenderTokenId</stat>
<stat fail="2" id="s1-s6-s4-s2" name="transferToken" pass="0">Testcase.zMulti-node.voteContract.transferToken</stat>
<stat fail="1" id="s1-s6-s4-s2-s1" name="voteTransfer recieverToken" pass="0">Testcase.zMulti-node.voteContract.transferToken.voteTransfer recieverToken</stat>
<stat fail="1" id="s1-s6-s4-s2-s2" name="voteTransfer senderTokenPTN" pass="0">Testcase.zMulti-node.voteContract.transferToken.voteTransfer senderTokenPTN</stat>
<stat fail="2" id="s1-s6-s4-s3" name="zToken" pass="0">Testcase.zMulti-node.voteContract.zToken</stat>
<stat fail="1" id="s1-s6-s4-s3-s1" name="ccinvokeToken RecieverPTN" pass="0">Testcase.zMulti-node.voteContract.zToken.ccinvokeToken RecieverPTN</stat>
<stat fail="1" id="s1-s6-s4-s3-s2" name="ccinvokeToken TokenPTNsender" pass="0">Testcase.zMulti-node.voteContract.zToken.ccinvokeToken TokenPTNsender</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
