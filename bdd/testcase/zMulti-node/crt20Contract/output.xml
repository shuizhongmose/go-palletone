<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190625 16:13:55.382" generator="Robot 2.8.5 (Python 2.7.15 on win32)">
<suite source="D:\software\robotscript\zMulti-node\crt20Contract" id="s1" name="crt20Contract">
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\CcinvokePass" id="s1-s1" name="CcinvokePass">
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\CcinvokePass\ccinvoketxPass_RecieverPTN.robot" id="s1-s1-s1" name="ccinvoketxPass RecieverPTN">
<kw type="setup" name="utilDefined.getlistAccounts">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.680" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:13:55.680" starttime="20190625 16:13:55.680"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:13:55.681" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:13:55.681" starttime="20190625 16:13:55.681"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.681" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:13:55.681" starttime="20190625 16:13:55.681"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.682" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:13:55.682" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:13:55.682" starttime="20190625 16:13:55.681"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.693" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:13:55.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:13:55.693" starttime="20190625 16:13:55.682"></status>
</kw>
<msg timestamp="20190625 16:13:55.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:13:55.693" starttime="20190625 16:13:55.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.694" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}
</msg>
<status status="PASS" endtime="20190625 16:13:55.694" starttime="20190625 16:13:55.693"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:13:55.705" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}</msg>
<status status="PASS" endtime="20190625 16:13:55.705" starttime="20190625 16:13:55.694"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.705" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]} </msg>
<msg timestamp="20190625 16:13:55.705" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:13:55.705" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']}</msg>
<status status="PASS" endtime="20190625 16:13:55.705" starttime="20190625 16:13:55.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${listAccounts}</arg>
<arg>${jsonRes['result']}</arg>
</arguments>
<msg timestamp="20190625 16:13:55.706" level="INFO">${listAccounts} = [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']</msg>
<status status="PASS" endtime="20190625 16:13:55.706" starttime="20190625 16:13:55.705"></status>
</kw>
<status status="PASS" endtime="20190625 16:13:55.706" starttime="20190625 16:13:55.678"></status>
</kw>
<test id="s1-s1-s1-t1" name="Scenario: 20Contract - Create Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:13:59.708" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:13:59.708" starttime="20190625 16:13:55.708"></status>
</kw>
<kw type="kw" name="${PTN1}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${recieverAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.710" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190625 16:13:59.710" starttime="20190625 16:13:59.710"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:13:59.711" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:13:59.711" starttime="20190625 16:13:59.711"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.711" level="INFO">${data} = {'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:13:59.711" starttime="20190625 16:13:59.711"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.712" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:13:59.712" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:13:59.712" starttime="20190625 16:13:59.712"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.717" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:13:59.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:13:59.717" starttime="20190625 16:13:59.712"></status>
</kw>
<msg timestamp="20190625 16:13:59.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:13:59.718" starttime="20190625 16:13:59.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.718" level="INFO">{"jsonrpc":"2.0","id":1,"result":{}}
</msg>
<status status="PASS" endtime="20190625 16:13:59.718" starttime="20190625 16:13:59.718"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:13:59.719" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{}}</msg>
<status status="PASS" endtime="20190625 16:13:59.719" starttime="20190625 16:13:59.718"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.720" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{}} </msg>
<msg timestamp="20190625 16:13:59.720" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:13:59.720" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190625 16:13:59.720" starttime="20190625 16:13:59.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:13:59.720" starttime="20190625 16:13:59.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:13:59.721" starttime="20190625 16:13:59.720"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:13:59.721" level="INFO">${strResult} = {}</msg>
<status status="PASS" endtime="20190625 16:13:59.721" starttime="20190625 16:13:59.721"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:13:59.722" starttime="20190625 16:13:59.722"></status>
</kw>
<msg timestamp="20190625 16:13:59.722" level="INFO">${PTN} = 0</msg>
<status status="PASS" endtime="20190625 16:13:59.722" starttime="20190625 16:13:59.722"></status>
</kw>
<msg timestamp="20190625 16:13:59.723" level="INFO">${PTN} = 0</msg>
<msg timestamp="20190625 16:13:59.723" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190625 16:13:59.722" starttime="20190625 16:13:59.709"></status>
</kw>
<msg timestamp="20190625 16:13:59.723" level="INFO">${PTN1} = 0</msg>
<msg timestamp="20190625 16:13:59.723" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {}}</msg>
<status status="PASS" endtime="20190625 16:13:59.723" starttime="20190625 16:13:59.708"></status>
</kw>
<msg timestamp="20190625 16:13:59.723" level="INFO">${PTN1} = 0</msg>
<status status="PASS" endtime="20190625 16:13:59.723" starttime="20190625 16:13:55.707"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${listAccounts[0]}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.725" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA101', u'1', u'60000', u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54']</msg>
<status status="PASS" endtime="20190625 16:13:59.725" starttime="20190625 16:13:59.724"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${listAccounts[0]}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.728" level="INFO">${ccinvokeList} = [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA101', u'1', u'60000', u'P1D4GX...</msg>
<status status="PASS" endtime="20190625 16:13:59.728" starttime="20190625 16:13:59.727"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:13:59.729" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:13:59.729" starttime="20190625 16:13:59.729"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.730" level="INFO">${data} = {'params': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA101', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:13:59.730" starttime="20190625 16:13:59.729"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:13:59.730" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:13:59.730" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:13:59.730" starttime="20190625 16:13:59.730"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:00.585" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA101", "1", "60000", "P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:00.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:00.585" starttime="20190625 16:13:59.730"></status>
</kw>
<msg timestamp="20190625 16:14:00.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:00.586" starttime="20190625 16:13:59.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:00.586" starttime="20190625 16:14:00.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:00.587" starttime="20190625 16:14:00.586"></status>
</kw>
<msg timestamp="20190625 16:14:00.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:00.587" starttime="20190625 16:13:59.726"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:00.588" level="INFO">${ret} = 2ffa09589f6d8470aeceba2f4058e0effa994bc6b8634b6ea3326335b9e7dcb1</msg>
<status status="PASS" endtime="20190625 16:14:00.588" starttime="20190625 16:14:00.587"></status>
</kw>
<msg timestamp="20190625 16:14:00.588" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:00.588" starttime="20190625 16:13:59.725"></status>
</kw>
<msg timestamp="20190625 16:14:00.589" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:00.588" starttime="20190625 16:13:59.724"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = And Calculate gain">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
</arguments>
<kw type="kw" name="${gain1} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${PTNAmount}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190625 16:14:00.593" level="INFO">${quantity} = 4e-05</msg>
<status status="PASS" endtime="20190625 16:14:00.592" starttime="20190625 16:14:00.592"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:00.593" level="INFO">${quantity} = 0.00004</msg>
<status status="PASS" endtime="20190625 16:14:00.593" starttime="20190625 16:14:00.593"></status>
</kw>
<msg timestamp="20190625 16:14:00.593" level="INFO">${gain1} = 0.00004</msg>
<status status="PASS" endtime="20190625 16:14:00.593" starttime="20190625 16:14:00.591"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')+decimal.Decimal('${gain1}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:00.594" level="INFO">${PTNGAIN} = 0.00004</msg>
<status status="PASS" endtime="20190625 16:14:00.594" starttime="20190625 16:14:00.593"></status>
</kw>
<msg timestamp="20190625 16:14:00.594" level="INFO">${PTNGAIN} = 0.00004</msg>
<status status="PASS" endtime="20190625 16:14:00.594" starttime="20190625 16:14:00.591"></status>
</kw>
<kw type="kw" name="${PTN2} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190625 16:14:05.596" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190625 16:14:05.596" starttime="20190625 16:14:00.595"></status>
</kw>
<kw type="kw" name="${PTN2}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${recieverAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.598" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190625 16:14:05.598" starttime="20190625 16:14:05.598"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:05.599" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:05.599" starttime="20190625 16:14:05.599"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.600" level="INFO">${data} = {'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:05.599" starttime="20190625 16:14:05.599"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.600" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:05.600" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.600" starttime="20190625 16:14:05.600"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.606" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:05.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.606" starttime="20190625 16:14:05.601"></status>
</kw>
<msg timestamp="20190625 16:14:05.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.606" starttime="20190625 16:14:05.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.607" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"0.00004"}}
</msg>
<status status="PASS" endtime="20190625 16:14:05.607" starttime="20190625 16:14:05.607"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:05.609" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00004"}}</msg>
<status status="PASS" endtime="20190625 16:14:05.609" starttime="20190625 16:14:05.608"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.610" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00004"}} </msg>
<msg timestamp="20190625 16:14:05.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:05.610" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00004'}}</msg>
<status status="PASS" endtime="20190625 16:14:05.610" starttime="20190625 16:14:05.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:05.611" starttime="20190625 16:14:05.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:05.612" starttime="20190625 16:14:05.611"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:05.612" level="INFO">${strResult} = {u'PTN': u'0.00004'}</msg>
<status status="PASS" endtime="20190625 16:14:05.612" starttime="20190625 16:14:05.612"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:05.613" starttime="20190625 16:14:05.613"></status>
</kw>
<msg timestamp="20190625 16:14:05.614" level="INFO">${PTN} = 0.00004</msg>
<status status="PASS" endtime="20190625 16:14:05.613" starttime="20190625 16:14:05.613"></status>
</kw>
<msg timestamp="20190625 16:14:05.614" level="INFO">${PTN} = 0.00004</msg>
<msg timestamp="20190625 16:14:05.614" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00004'}}</msg>
<status status="PASS" endtime="20190625 16:14:05.614" starttime="20190625 16:14:05.597"></status>
</kw>
<msg timestamp="20190625 16:14:05.614" level="INFO">${PTN2} = 0.00004</msg>
<msg timestamp="20190625 16:14:05.614" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00004'}}</msg>
<status status="PASS" endtime="20190625 16:14:05.614" starttime="20190625 16:14:05.596"></status>
</kw>
<msg timestamp="20190625 16:14:05.614" level="INFO">${PTN2} = 0.00004</msg>
<status status="PASS" endtime="20190625 16:14:05.614" starttime="20190625 16:14:00.595"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.616" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.616" starttime="20190625 16:14:05.616"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:05.616" starttime="20190625 16:14:05.615"></status>
</kw>
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:14:05.617" critical="yes" starttime="20190625 16:13:55.706"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:05.619" starttime="20190625 16:13:55.412"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\CcinvokePass\ccinvoketxPass_SenderPTN.robot" id="s1-s1-s2" name="ccinvoketxPass SenderPTN">
<test id="s1-s1-s2-t1" name="Scenario: 20Contract - Create Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.639" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:14:05.639" starttime="20190625 16:14:05.639"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:05.641" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:05.641" starttime="20190625 16:14:05.640"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.641" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:05.641" starttime="20190625 16:14:05.641"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.642" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:05.642" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.642" starttime="20190625 16:14:05.642"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.647" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:05.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.647" starttime="20190625 16:14:05.642"></status>
</kw>
<msg timestamp="20190625 16:14:05.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.647" starttime="20190625 16:14:05.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.648" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}
</msg>
<status status="PASS" endtime="20190625 16:14:05.648" starttime="20190625 16:14:05.648"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:05.649" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}</msg>
<status status="PASS" endtime="20190625 16:14:05.649" starttime="20190625 16:14:05.648"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.649" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]} </msg>
<msg timestamp="20190625 16:14:05.649" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:05.649" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']}</msg>
<status status="PASS" endtime="20190625 16:14:05.649" starttime="20190625 16:14:05.649"></status>
</kw>
<msg timestamp="20190625 16:14:05.650" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:05.650" starttime="20190625 16:14:05.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.650" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:05.650" starttime="20190625 16:14:05.650"></status>
</kw>
<kw type="kw" name="createToken.Personal Unlock Account">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.657" level="INFO">[u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']</msg>
<status status="PASS" endtime="20190625 16:14:05.657" starttime="20190625 16:14:05.650"></status>
</kw>
<kw type="kw" name="${PTN1}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.660" level="INFO">${address} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:05.660" starttime="20190625 16:14:05.659"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:05.661" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:05.661" starttime="20190625 16:14:05.661"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.662" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:05.662" starttime="20190625 16:14:05.662"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.662" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:05.663" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.663" starttime="20190625 16:14:05.662"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.667" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:05.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.667" starttime="20190625 16:14:05.663"></status>
</kw>
<msg timestamp="20190625 16:14:05.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.668" starttime="20190625 16:14:05.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.668" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"1000000000"}}
</msg>
<status status="PASS" endtime="20190625 16:14:05.668" starttime="20190625 16:14:05.668"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:05.669" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"1000000000"}}</msg>
<status status="PASS" endtime="20190625 16:14:05.669" starttime="20190625 16:14:05.668"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.669" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"1000000000"}} </msg>
<msg timestamp="20190625 16:14:05.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:05.669" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'1000000000'}}</msg>
<status status="PASS" endtime="20190625 16:14:05.669" starttime="20190625 16:14:05.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:05.670" starttime="20190625 16:14:05.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:05.670" starttime="20190625 16:14:05.670"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:05.671" level="INFO">${strResult} = {u'PTN': u'1000000000'}</msg>
<status status="PASS" endtime="20190625 16:14:05.671" starttime="20190625 16:14:05.670"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:05.672" starttime="20190625 16:14:05.671"></status>
</kw>
<msg timestamp="20190625 16:14:05.672" level="INFO">${PTN} = 1000000000</msg>
<status status="PASS" endtime="20190625 16:14:05.672" starttime="20190625 16:14:05.671"></status>
</kw>
<msg timestamp="20190625 16:14:05.672" level="INFO">${PTN} = 1000000000</msg>
<msg timestamp="20190625 16:14:05.672" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'1000000000'}}</msg>
<status status="PASS" endtime="20190625 16:14:05.672" starttime="20190625 16:14:05.659"></status>
</kw>
<msg timestamp="20190625 16:14:05.673" level="INFO">${PTN1} = 1000000000</msg>
<msg timestamp="20190625 16:14:05.673" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'1000000000'}}</msg>
<status status="PASS" endtime="20190625 16:14:05.673" starttime="20190625 16:14:05.657"></status>
</kw>
<msg timestamp="20190625 16:14:05.673" level="INFO">${PTN1} = 1000000000</msg>
<status status="PASS" endtime="20190625 16:14:05.673" starttime="20190625 16:14:05.638"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.675" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA102', u'1', u'60000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:05.675" starttime="20190625 16:14:05.674"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.677" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA102', u'1', u'60000', u'P16Q7Z...</msg>
<status status="PASS" endtime="20190625 16:14:05.677" starttime="20190625 16:14:05.677"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:05.679" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:05.679" starttime="20190625 16:14:05.678"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.679" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA102', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:14:05.679" starttime="20190625 16:14:05.679"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:05.679" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:05.680" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:05.680" starttime="20190625 16:14:05.679"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:06.671" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA102", "1", "60000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:06.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:06.671" starttime="20190625 16:14:05.680"></status>
</kw>
<msg timestamp="20190625 16:14:06.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:06.672" starttime="20190625 16:14:05.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:06.672" starttime="20190625 16:14:06.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:06.673" starttime="20190625 16:14:06.672"></status>
</kw>
<msg timestamp="20190625 16:14:06.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:06.673" starttime="20190625 16:14:05.676"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:06.673" level="INFO">${ret} = 254d6fcbc114830475f36526395fa668701f70597afef353a500b0d943d2007b</msg>
<status status="PASS" endtime="20190625 16:14:06.673" starttime="20190625 16:14:06.673"></status>
</kw>
<msg timestamp="20190625 16:14:06.673" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:06.673" starttime="20190625 16:14:05.675"></status>
</kw>
<msg timestamp="20190625 16:14:06.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:06.674" starttime="20190625 16:14:05.674"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = And Calculate gain">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${PTNAmount}+${PTNPoundage}</arg>
</arguments>
<msg timestamp="20190625 16:14:06.675" level="INFO">${PTNGAIN} = 4001</msg>
<status status="PASS" endtime="20190625 16:14:06.675" starttime="20190625 16:14:06.675"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190625 16:14:06.677" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190625 16:14:06.677" starttime="20190625 16:14:06.676"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:06.677" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:06.677" starttime="20190625 16:14:06.677"></status>
</kw>
<msg timestamp="20190625 16:14:06.677" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:06.677" starttime="20190625 16:14:06.676"></status>
</kw>
<msg timestamp="20190625 16:14:06.678" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:06.677" starttime="20190625 16:14:06.674"></status>
</kw>
<kw type="kw" name="${PTN2} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:10.679" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:10.679" starttime="20190625 16:14:06.679"></status>
</kw>
<kw type="kw" name="${PTN2}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.686" level="INFO">${address} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:10.685" starttime="20190625 16:14:10.684"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:10.689" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:10.689" starttime="20190625 16:14:10.689"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.691" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:10.691" starttime="20190625 16:14:10.690"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.692" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:10.693" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.693" starttime="20190625 16:14:10.691"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.706" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:10.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.706" starttime="20190625 16:14:10.693"></status>
</kw>
<msg timestamp="20190625 16:14:10.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.707" starttime="20190625 16:14:10.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.709" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99995999","QA102+105NZHLD7QCG6JC886D":"6000"}}
</msg>
<status status="PASS" endtime="20190625 16:14:10.709" starttime="20190625 16:14:10.708"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:10.713" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99995999","QA102+105NZHLD7QCG6JC886D":"6000"}}</msg>
<status status="PASS" endtime="20190625 16:14:10.713" starttime="20190625 16:14:10.710"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.715" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99995999","QA102+105NZHLD7QCG6JC886D":"6000"}} </msg>
<msg timestamp="20190625 16:14:10.715" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:10.715" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:10.715" starttime="20190625 16:14:10.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:10.716" starttime="20190625 16:14:10.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:10.718" starttime="20190625 16:14:10.717"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:10.719" level="INFO">${strResult} = {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<status status="PASS" endtime="20190625 16:14:10.719" starttime="20190625 16:14:10.718"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:10.722" starttime="20190625 16:14:10.721"></status>
</kw>
<msg timestamp="20190625 16:14:10.723" level="INFO">${PTN} = 999999999.99995999</msg>
<status status="PASS" endtime="20190625 16:14:10.723" starttime="20190625 16:14:10.720"></status>
</kw>
<msg timestamp="20190625 16:14:10.723" level="INFO">${PTN} = 999999999.99995999</msg>
<msg timestamp="20190625 16:14:10.723" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:10.723" starttime="20190625 16:14:10.682"></status>
</kw>
<msg timestamp="20190625 16:14:10.724" level="INFO">${PTN2} = 999999999.99995999</msg>
<msg timestamp="20190625 16:14:10.724" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:10.724" starttime="20190625 16:14:10.680"></status>
</kw>
<msg timestamp="20190625 16:14:10.725" level="INFO">${PTN2} = 999999999.99995999</msg>
<status status="PASS" endtime="20190625 16:14:10.724" starttime="20190625 16:14:06.678"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="${GAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${PTNGAIN}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:10.728" level="INFO">${GAIN} = 999999999.99995999</msg>
<status status="PASS" endtime="20190625 16:14:10.728" starttime="20190625 16:14:10.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${GAIN}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.728" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.728" starttime="20190625 16:14:10.728"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:10.728" starttime="20190625 16:14:10.726"></status>
</kw>
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:14:10.729" critical="yes" starttime="20190625 16:14:05.633"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:10.733" starttime="20190625 16:14:05.621"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\CcinvokePass\ccinvoketxPass_SenderTokenId.robot" id="s1-s1-s3" name="ccinvoketxPass SenderTokenId">
<test id="s1-s1-s3-t1" name="Scenario: 20Contract - Create Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.753" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:14:10.753" starttime="20190625 16:14:10.753"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:10.754" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:10.754" starttime="20190625 16:14:10.754"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.755" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:10.755" starttime="20190625 16:14:10.754"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.755" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:10.756" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.756" starttime="20190625 16:14:10.755"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.761" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:10.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.761" starttime="20190625 16:14:10.756"></status>
</kw>
<msg timestamp="20190625 16:14:10.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.761" starttime="20190625 16:14:10.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.762" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}
</msg>
<status status="PASS" endtime="20190625 16:14:10.762" starttime="20190625 16:14:10.762"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:10.763" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}</msg>
<status status="PASS" endtime="20190625 16:14:10.763" starttime="20190625 16:14:10.762"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.763" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]} </msg>
<msg timestamp="20190625 16:14:10.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:10.763" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']}</msg>
<status status="PASS" endtime="20190625 16:14:10.763" starttime="20190625 16:14:10.763"></status>
</kw>
<msg timestamp="20190625 16:14:10.764" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:10.764" starttime="20190625 16:14:10.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.764" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:10.764" starttime="20190625 16:14:10.764"></status>
</kw>
<kw type="kw" name="createToken.Personal Unlock Account">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.768" level="INFO">[u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']</msg>
<status status="PASS" endtime="20190625 16:14:10.768" starttime="20190625 16:14:10.764"></status>
</kw>
<kw type="kw" name="${PTN1}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.770" level="INFO">${address} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:10.770" starttime="20190625 16:14:10.770"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:10.771" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:10.771" starttime="20190625 16:14:10.771"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.772" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:10.772" starttime="20190625 16:14:10.772"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.772" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:10.773" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.773" starttime="20190625 16:14:10.772"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.784" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:10.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.784" starttime="20190625 16:14:10.773"></status>
</kw>
<msg timestamp="20190625 16:14:10.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.785" starttime="20190625 16:14:10.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.785" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99995999","QA102+105NZHLD7QCG6JC886D":"6000"}}
</msg>
<status status="PASS" endtime="20190625 16:14:10.785" starttime="20190625 16:14:10.785"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:10.786" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99995999","QA102+105NZHLD7QCG6JC886D":"6000"}}</msg>
<status status="PASS" endtime="20190625 16:14:10.786" starttime="20190625 16:14:10.785"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.787" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99995999","QA102+105NZHLD7QCG6JC886D":"6000"}} </msg>
<msg timestamp="20190625 16:14:10.787" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:10.787" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:10.787" starttime="20190625 16:14:10.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:10.787" starttime="20190625 16:14:10.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:10.788" starttime="20190625 16:14:10.787"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:10.788" level="INFO">${strResult} = {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<status status="PASS" endtime="20190625 16:14:10.788" starttime="20190625 16:14:10.788"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:10.789" starttime="20190625 16:14:10.788"></status>
</kw>
<msg timestamp="20190625 16:14:10.789" level="INFO">${PTN} = 999999999.99995999</msg>
<status status="PASS" endtime="20190625 16:14:10.789" starttime="20190625 16:14:10.788"></status>
</kw>
<msg timestamp="20190625 16:14:10.789" level="INFO">${PTN} = 999999999.99995999</msg>
<msg timestamp="20190625 16:14:10.789" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:10.789" starttime="20190625 16:14:10.769"></status>
</kw>
<msg timestamp="20190625 16:14:10.789" level="INFO">${PTN1} = 999999999.99995999</msg>
<msg timestamp="20190625 16:14:10.790" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99995999', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:10.789" starttime="20190625 16:14:10.768"></status>
</kw>
<msg timestamp="20190625 16:14:10.790" level="INFO">${PTN1} = 999999999.99995999</msg>
<status status="PASS" endtime="20190625 16:14:10.790" starttime="20190625 16:14:10.751"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.792" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA103', u'1', u'60000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:10.791" starttime="20190625 16:14:10.791"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.794" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA103', u'1', u'60000', u'P16Q7Z...</msg>
<status status="PASS" endtime="20190625 16:14:10.794" starttime="20190625 16:14:10.794"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:10.796" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:10.796" starttime="20190625 16:14:10.795"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.796" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA103', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:14:10.796" starttime="20190625 16:14:10.796"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:10.796" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:10.797" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:10.797" starttime="20190625 16:14:10.796"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:11.699" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA103", "1", "60000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:11.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:11.699" starttime="20190625 16:14:10.797"></status>
</kw>
<msg timestamp="20190625 16:14:11.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:11.699" starttime="20190625 16:14:10.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:11.701" starttime="20190625 16:14:11.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:11.701" starttime="20190625 16:14:11.701"></status>
</kw>
<msg timestamp="20190625 16:14:11.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:11.701" starttime="20190625 16:14:10.793"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:11.702" level="INFO">${ret} = f8a0c09c10303032a1c2b0a942c7cd992de10eb50b684025d4f20b43173e7339</msg>
<status status="PASS" endtime="20190625 16:14:11.702" starttime="20190625 16:14:11.702"></status>
</kw>
<msg timestamp="20190625 16:14:11.702" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:11.702" starttime="20190625 16:14:10.792"></status>
</kw>
<msg timestamp="20190625 16:14:11.703" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:11.703" starttime="20190625 16:14:10.790"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = And Calculate gain">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${PTNAmount}+${PTNPoundage}</arg>
</arguments>
<msg timestamp="20190625 16:14:11.704" level="INFO">${PTNGAIN} = 4001</msg>
<status status="PASS" endtime="20190625 16:14:11.704" starttime="20190625 16:14:11.704"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190625 16:14:11.706" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190625 16:14:11.705" starttime="20190625 16:14:11.705"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:11.706" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:11.706" starttime="20190625 16:14:11.706"></status>
</kw>
<msg timestamp="20190625 16:14:11.706" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:11.706" starttime="20190625 16:14:11.705"></status>
</kw>
<msg timestamp="20190625 16:14:11.706" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:11.706" starttime="20190625 16:14:11.703"></status>
</kw>
<kw type="kw" name="${count}, ${key} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:15.708" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:15.708" starttime="20190625 16:14:11.708"></status>
</kw>
<kw type="kw" name="${PTN2}, ${result2} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.718" level="INFO">${address} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:15.717" starttime="20190625 16:14:15.716"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:15.723" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:15.722" starttime="20190625 16:14:15.722"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.725" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:15.725" starttime="20190625 16:14:15.723"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.726" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:15.727" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.728" starttime="20190625 16:14:15.726"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.744" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:15.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.744" starttime="20190625 16:14:15.728"></status>
</kw>
<msg timestamp="20190625 16:14:15.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.745" starttime="20190625 16:14:15.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.746" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99991998","QA102+105NZHLD7QCG6JC886D":"6000","QA103+1011RLPBBXC03OD7M5YO":"6000"}}
</msg>
<status status="PASS" endtime="20190625 16:14:15.747" starttime="20190625 16:14:15.745"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:15.748" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99991998","QA102+105NZHLD7QCG6JC886D":"6000","QA103+1011RLPBBXC03OD7M5YO":"6000"}}</msg>
<status status="PASS" endtime="20190625 16:14:15.748" starttime="20190625 16:14:15.747"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.749" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99991998","QA102+105NZHLD7QCG6JC886D":"6000","QA103+1011RLPBBXC03OD7M5YO":"6000"}} </msg>
<msg timestamp="20190625 16:14:15.749" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:15.750" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99991998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:15.749" starttime="20190625 16:14:15.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:15.752" starttime="20190625 16:14:15.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:15.754" starttime="20190625 16:14:15.753"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:15.756" level="INFO">${strResult} = {u'PTN': u'999999999.99991998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<status status="PASS" endtime="20190625 16:14:15.756" starttime="20190625 16:14:15.754"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:15.759" starttime="20190625 16:14:15.758"></status>
</kw>
<msg timestamp="20190625 16:14:15.760" level="INFO">${PTN} = 999999999.99991998</msg>
<status status="PASS" endtime="20190625 16:14:15.760" starttime="20190625 16:14:15.757"></status>
</kw>
<msg timestamp="20190625 16:14:15.760" level="INFO">${PTN} = 999999999.99991998</msg>
<msg timestamp="20190625 16:14:15.760" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99991998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:15.760" starttime="20190625 16:14:15.713"></status>
</kw>
<msg timestamp="20190625 16:14:15.761" level="INFO">${PTN2} = 999999999.99991998</msg>
<msg timestamp="20190625 16:14:15.761" level="INFO">${result2} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99991998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:15.761" starttime="20190625 16:14:15.709"></status>
</kw>
<kw type="for" name="${key} IN [ ${result2.keys} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${key} = &lt;built-in method keys of dict object at 0x000000000410A488&gt;">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.763" level="INFO">&lt;built-in method keys of dict object at 0x000000000410A488&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.763" starttime="20190625 16:14:15.762"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:15.763" starttime="20190625 16:14:15.762"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:15.763" starttime="20190625 16:14:15.762"></status>
</kw>
<kw type="kw" name="${count} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int(pow(10,-${tokenDecimal})*${tokenAmount})</arg>
</arguments>
<msg timestamp="20190625 16:14:15.764" level="INFO">${count} = 6000</msg>
<status status="PASS" endtime="20190625 16:14:15.764" starttime="20190625 16:14:15.764"></status>
</kw>
<kw type="kw" name="${item} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result2['result']}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.765" level="INFO">${item} = QA103+1011RLPBBXC03OD7M5YO</msg>
<status status="PASS" endtime="20190625 16:14:15.765" starttime="20190625 16:14:15.765"></status>
</kw>
<kw type="kw" name="${key} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2['result']}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.766" level="INFO">${key} = 6000</msg>
<status status="PASS" endtime="20190625 16:14:15.766" starttime="20190625 16:14:15.765"></status>
</kw>
<msg timestamp="20190625 16:14:15.766" level="INFO">${count} = 6000</msg>
<msg timestamp="20190625 16:14:15.766" level="INFO">${key} = 6000</msg>
<status status="PASS" endtime="20190625 16:14:15.766" starttime="20190625 16:14:11.707"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${count}</arg>
<arg>${key}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.769" starttime="20190625 16:14:15.769"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:15.770" starttime="20190625 16:14:15.768"></status>
</kw>
<doc>Verify Sender's Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:14:15.770" critical="yes" starttime="20190625 16:14:10.748"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:15.773" starttime="20190625 16:14:10.737"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:15.777" starttime="20190625 16:13:55.409"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\TransferToken" id="s1-s2" name="TransferToken">
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\TransferToken\transferToken_recieverToken.robot" id="s1-s2-s1" name="transferToken recieverToken">
<test id="s1-s2-s1-t1" name="Scenario: 20Contract - Transfer Token">
<kw type="kw" name="Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.801" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:14:15.801" starttime="20190625 16:14:15.801"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:15.802" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:15.802" starttime="20190625 16:14:15.802"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.803" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:15.803" starttime="20190625 16:14:15.803"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.803" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:15.803" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.803" starttime="20190625 16:14:15.803"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.808" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:15.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.808" starttime="20190625 16:14:15.804"></status>
</kw>
<msg timestamp="20190625 16:14:15.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.808" starttime="20190625 16:14:15.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.809" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}
</msg>
<status status="PASS" endtime="20190625 16:14:15.809" starttime="20190625 16:14:15.808"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:15.810" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}</msg>
<status status="PASS" endtime="20190625 16:14:15.810" starttime="20190625 16:14:15.809"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.810" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]} </msg>
<msg timestamp="20190625 16:14:15.810" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:15.811" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']}</msg>
<status status="PASS" endtime="20190625 16:14:15.810" starttime="20190625 16:14:15.810"></status>
</kw>
<msg timestamp="20190625 16:14:15.811" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:15.811" starttime="20190625 16:14:15.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.811" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:15.811" starttime="20190625 16:14:15.811"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:15.811" starttime="20190625 16:14:15.799"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.813" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA104', u'1', u'60000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:15.813" starttime="20190625 16:14:15.813"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.816" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA104', u'1', u'60000', u'P16Q7Z...</msg>
<status status="PASS" endtime="20190625 16:14:15.816" starttime="20190625 16:14:15.815"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:15.817" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:15.817" starttime="20190625 16:14:15.817"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.817" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA104', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:14:15.817" starttime="20190625 16:14:15.817"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:15.818" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:15.818" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:15.818" starttime="20190625 16:14:15.817"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:16.581" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA104", "1", "60000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:16.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:16.581" starttime="20190625 16:14:15.818"></status>
</kw>
<msg timestamp="20190625 16:14:16.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:16.581" starttime="20190625 16:14:15.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:16.582" starttime="20190625 16:14:16.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:16.582" starttime="20190625 16:14:16.582"></status>
</kw>
<msg timestamp="20190625 16:14:16.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:16.583" starttime="20190625 16:14:15.814"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:16.583" level="INFO">${ret} = 3b5edf10e61fcda26da4a98e2a87e762331890d892a53b7010565d9c90d83b7e</msg>
<status status="PASS" endtime="20190625 16:14:16.583" starttime="20190625 16:14:16.583"></status>
</kw>
<msg timestamp="20190625 16:14:16.584" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:16.584" starttime="20190625 16:14:15.813"></status>
</kw>
<msg timestamp="20190625 16:14:16.584" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:16.584" starttime="20190625 16:14:15.812"></status>
</kw>
<kw type="kw" name="${key}, ${item} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:20.586" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:20.586" starttime="20190625 16:14:16.585"></status>
</kw>
<kw type="kw" name="${PTN2}, ${result2} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.596" level="INFO">${address} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:20.596" starttime="20190625 16:14:20.595"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:20.599" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:20.599" starttime="20190625 16:14:20.599"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.601" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:20.600" starttime="20190625 16:14:20.600"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.601" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:20.602" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:20.602" starttime="20190625 16:14:20.601"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.615" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:20.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:20.615" starttime="20190625 16:14:20.603"></status>
</kw>
<msg timestamp="20190625 16:14:20.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:20.615" starttime="20190625 16:14:20.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.618" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99987997","QA102+105NZHLD7QCG6JC886D":"6000","QA103+1011RLPBBXC03OD7M5YO":"6000","QA104+1090NVXYUS0XK0ZCTRD":"6000"}}
</msg>
<status status="PASS" endtime="20190625 16:14:20.618" starttime="20190625 16:14:20.616"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:20.623" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99987997","QA102+105NZHLD7QCG6JC886D":"6000","QA103+1011RLPBBXC03OD7M5YO":"6000","QA104+1090NVXYUS0XK0ZCTRD":"6000"}}</msg>
<status status="PASS" endtime="20190625 16:14:20.623" starttime="20190625 16:14:20.618"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.623" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99987997","QA102+105NZHLD7QCG6JC886D":"6000","QA103+1011RLPBBXC03OD7M5YO":"6000","QA104+1090NVXYUS0XK0ZCTRD":"6000"}} </msg>
<msg timestamp="20190625 16:14:20.623" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:20.623" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA104+1090NVXYUS0XK0ZCTRD': u'6000', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:20.623" starttime="20190625 16:14:20.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:20.624" starttime="20190625 16:14:20.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:20.625" starttime="20190625 16:14:20.624"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:20.626" level="INFO">${strResult} = {u'PTN': u'999999999.99987997', u'QA104+1090NVXYUS0XK0ZCTRD': u'6000', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<status status="PASS" endtime="20190625 16:14:20.626" starttime="20190625 16:14:20.625"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:20.627" starttime="20190625 16:14:20.627"></status>
</kw>
<msg timestamp="20190625 16:14:20.627" level="INFO">${PTN} = 999999999.99987997</msg>
<status status="PASS" endtime="20190625 16:14:20.627" starttime="20190625 16:14:20.626"></status>
</kw>
<msg timestamp="20190625 16:14:20.627" level="INFO">${PTN} = 999999999.99987997</msg>
<msg timestamp="20190625 16:14:20.628" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA104+1090NVXYUS0XK0ZCTRD': u'6000', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:20.627" starttime="20190625 16:14:20.593"></status>
</kw>
<msg timestamp="20190625 16:14:20.628" level="INFO">${PTN2} = 999999999.99987997</msg>
<msg timestamp="20190625 16:14:20.628" level="INFO">${result2} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA104+1090NVXYUS0XK0ZCTRD': u'6000', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000'}}</msg>
<status status="PASS" endtime="20190625 16:14:20.628" starttime="20190625 16:14:20.587"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result2['result']}</arg>
</arguments>
<msg timestamp="20190625 16:14:20.629" level="INFO">${key} = QA104+1090NVXYUS0XK0ZCTRD</msg>
<status status="PASS" endtime="20190625 16:14:20.629" starttime="20190625 16:14:20.628"></status>
</kw>
<kw type="kw" name="${item} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20190625 16:14:20.630" level="INFO">${item} = 0</msg>
<status status="PASS" endtime="20190625 16:14:20.629" starttime="20190625 16:14:20.629"></status>
</kw>
<kw type="kw" name="${tokenResult} = createToken.Transfer Token">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${gain}</arg>
<arg>${PTNPoundage}</arg>
<arg>${evidence}</arg>
<arg>${duration}</arg>
</arguments>
<msg timestamp="20190625 16:14:21.415" level="INFO">Post data:{"params": ["QA104+1090NVXYUS0XK0ZCTRD", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "2", "1", "evidence", "1", 600000000], "jsonrpc": "2.0", "method": "wallet_transferToken", "id": 1}
Response:{u'jsonrpc': u'2.0', u'id': 1, u'result': u'0xce5b9289812abb59291ef4f80538cbb98c036696c64806726a733122ac6ea29a'}</msg>
<msg timestamp="20190625 16:14:21.415" level="INFO">${tokenResult} = 0xce5b9289812abb59291ef4f80538cbb98c036696c64806726a733122ac6ea29a</msg>
<status status="PASS" endtime="20190625 16:14:21.415" starttime="20190625 16:14:20.630"></status>
</kw>
<msg timestamp="20190625 16:14:21.415" level="INFO">${key} = QA104+1090NVXYUS0XK0ZCTRD</msg>
<msg timestamp="20190625 16:14:21.415" level="INFO">${item} = 0</msg>
<status status="PASS" endtime="20190625 16:14:21.415" starttime="20190625 16:14:16.585"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${item}</arg>
</arguments>
<kw type="kw" name="${item1} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${item}+${gain}</arg>
</arguments>
<msg timestamp="20190625 16:14:21.418" level="INFO">${item1} = 2</msg>
<status status="PASS" endtime="20190625 16:14:21.418" starttime="20190625 16:14:21.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:25.418" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:25.419" starttime="20190625 16:14:21.418"></status>
</kw>
<kw type="kw" name="${RecPTN2}, ${RecResult2} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${recieverAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.426" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190625 16:14:25.426" starttime="20190625 16:14:25.426"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:25.432" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:25.432" starttime="20190625 16:14:25.431"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.434" level="INFO">${data} = {'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:25.434" starttime="20190625 16:14:25.433"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.436" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8565/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:25.437" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.437" starttime="20190625 16:14:25.435"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.454" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8565/, data={"params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:25.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.454" starttime="20190625 16:14:25.438"></status>
</kw>
<msg timestamp="20190625 16:14:25.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.455" starttime="20190625 16:14:25.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.456" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"0.00016","QA104+1090NVXYUS0XK0ZCTRD":"2"}}
</msg>
<status status="PASS" endtime="20190625 16:14:25.456" starttime="20190625 16:14:25.455"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:25.457" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00016","QA104+1090NVXYUS0XK0ZCTRD":"2"}}</msg>
<status status="PASS" endtime="20190625 16:14:25.457" starttime="20190625 16:14:25.456"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.458" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00016","QA104+1090NVXYUS0XK0ZCTRD":"2"}} </msg>
<msg timestamp="20190625 16:14:25.458" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:25.458" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00016', u'QA104+1090NVXYUS0XK0ZCTRD': u'2'}}</msg>
<status status="PASS" endtime="20190625 16:14:25.458" starttime="20190625 16:14:25.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:25.459" starttime="20190625 16:14:25.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:25.460" starttime="20190625 16:14:25.459"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190625 16:14:25.460" level="INFO">${strResult} = {u'PTN': u'0.00016', u'QA104+1090NVXYUS0XK0ZCTRD': u'2'}</msg>
<status status="PASS" endtime="20190625 16:14:25.460" starttime="20190625 16:14:25.460"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:25.462" starttime="20190625 16:14:25.461"></status>
</kw>
<msg timestamp="20190625 16:14:25.462" level="INFO">${PTN} = 0.00016</msg>
<status status="PASS" endtime="20190625 16:14:25.462" starttime="20190625 16:14:25.461"></status>
</kw>
<msg timestamp="20190625 16:14:25.462" level="INFO">${PTN} = 0.00016</msg>
<msg timestamp="20190625 16:14:25.462" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00016', u'QA104+1090NVXYUS0XK0ZCTRD': u'2'}}</msg>
<status status="PASS" endtime="20190625 16:14:25.462" starttime="20190625 16:14:25.423"></status>
</kw>
<msg timestamp="20190625 16:14:25.463" level="INFO">${RecPTN2} = 0.00016</msg>
<msg timestamp="20190625 16:14:25.463" level="INFO">${RecResult2} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00016', u'QA104+1090NVXYUS0XK0ZCTRD': u'2'}}</msg>
<status status="PASS" endtime="20190625 16:14:25.462" starttime="20190625 16:14:25.419"></status>
</kw>
<kw type="kw" name="${item2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${RecResult2['result']}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.463" level="INFO">${item2} = 2</msg>
<status status="PASS" endtime="20190625 16:14:25.463" starttime="20190625 16:14:25.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${item2}</arg>
<arg>${item1}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.464" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.464" starttime="20190625 16:14:25.464"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:25.464" starttime="20190625 16:14:21.417"></status>
</kw>
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:14:25.465" critical="yes" starttime="20190625 16:14:15.798"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:25.467" starttime="20190625 16:14:15.785"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\TransferToken\transferToken_senderTokenPTN.robot" id="s1-s2-s2" name="transferToken senderTokenPTN">
<test id="s1-s2-s2-t1" name="transferToken_senderTokenPTN">
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.484" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:14:25.484" starttime="20190625 16:14:25.484"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:25.485" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:25.485" starttime="20190625 16:14:25.485"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.485" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:25.485" starttime="20190625 16:14:25.485"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.486" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:25.486" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.486" starttime="20190625 16:14:25.486"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.491" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:25.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.491" starttime="20190625 16:14:25.486"></status>
</kw>
<msg timestamp="20190625 16:14:25.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:25.491" starttime="20190625 16:14:25.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.491" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}
</msg>
<status status="PASS" endtime="20190625 16:14:25.491" starttime="20190625 16:14:25.491"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:25.492" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}</msg>
<status status="PASS" endtime="20190625 16:14:25.492" starttime="20190625 16:14:25.491"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.492" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]} </msg>
<msg timestamp="20190625 16:14:25.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:25.492" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']}</msg>
<status status="PASS" endtime="20190625 16:14:25.492" starttime="20190625 16:14:25.492"></status>
</kw>
<msg timestamp="20190625 16:14:25.493" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:25.493" starttime="20190625 16:14:25.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.494" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:25.494" starttime="20190625 16:14:25.494"></status>
</kw>
<kw type="kw" name="createToken.Personal Unlock Account">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:25.499" level="INFO">[u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']</msg>
<status status="PASS" endtime="20190625 16:14:25.499" starttime="20190625 16:14:25.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190625 16:14:27.500" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190625 16:14:27.500" starttime="20190625 16:14:25.500"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:27.505" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA105', u'1', u'60000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:27.505" starttime="20190625 16:14:27.504"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:27.516" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA105', u'1', u'60000', u'P16Q7Z...</msg>
<status status="PASS" endtime="20190625 16:14:27.516" starttime="20190625 16:14:27.514"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:27.521" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:27.521" starttime="20190625 16:14:27.520"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:27.523" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA105', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:14:27.523" starttime="20190625 16:14:27.522"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:27.525" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:27.525" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:27.526" starttime="20190625 16:14:27.524"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:28.286" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA105", "1", "60000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:28.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:28.286" starttime="20190625 16:14:27.526"></status>
</kw>
<msg timestamp="20190625 16:14:28.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:28.287" starttime="20190625 16:14:27.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:28.288" starttime="20190625 16:14:28.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:28.289" starttime="20190625 16:14:28.288"></status>
</kw>
<msg timestamp="20190625 16:14:28.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:28.289" starttime="20190625 16:14:27.510"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:28.290" level="INFO">${ret} = e5d1680cb2ef603b573943376e8121360608bb63e9e9b72664852240c7309d7d</msg>
<status status="PASS" endtime="20190625 16:14:28.290" starttime="20190625 16:14:28.290"></status>
</kw>
<msg timestamp="20190625 16:14:28.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:28.291" starttime="20190625 16:14:27.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190625 16:14:33.294" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190625 16:14:33.294" starttime="20190625 16:14:28.292"></status>
</kw>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${GeneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<msg timestamp="20190625 16:14:33.318" level="INFO">Current URL:http://192.168.0.105:8565/
Current Balance: {u'PTN': u'999999998.99983996', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'6000'}</msg>
<msg timestamp="20190625 16:14:33.320" level="INFO">${result1} = {u'PTN': u'999999998.99983996', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'6000'}</msg>
<status status="PASS" endtime="20190625 16:14:33.319" starttime="20190625 16:14:33.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190625 16:14:38.324" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190625 16:14:38.324" starttime="20190625 16:14:33.323"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190625 16:14:38.332" level="INFO">${key} = QA105+10YWQPSDIEY5ZMG3OZN</msg>
<status status="PASS" endtime="20190625 16:14:38.331" starttime="20190625 16:14:38.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190625 16:14:40.335" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190625 16:14:40.335" starttime="20190625 16:14:38.334"></status>
</kw>
<kw type="kw" name="${PTN1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190625 16:14:40.339" level="INFO">${PTN1} = 999999998.99983996</msg>
<status status="PASS" endtime="20190625 16:14:40.338" starttime="20190625 16:14:40.337"></status>
</kw>
<kw type="kw" name="${item1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:14:40.342" level="INFO">${item1} = 6000</msg>
<status status="PASS" endtime="20190625 16:14:40.341" starttime="20190625 16:14:40.340"></status>
</kw>
<kw type="kw" name="${tokenResult} = createToken.Transfer Token">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${GeneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${amount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${evidence}</arg>
<arg>${duration}</arg>
</arguments>
<msg timestamp="20190625 16:14:41.139" level="INFO">Post data:{"params": ["QA105+10YWQPSDIEY5ZMG3OZN", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "2000", "1", "evidence", "1", 600000000], "jsonrpc": "2.0", "method": "wallet_transferToken", "id": 1}
Response:{u'jsonrpc': u'2.0', u'id': 1, u'result': u'0x2c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c83'}</msg>
<msg timestamp="20190625 16:14:41.139" level="INFO">${tokenResult} = 0x2c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c83</msg>
<status status="PASS" endtime="20190625 16:14:41.139" starttime="20190625 16:14:40.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:45.140" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:45.140" starttime="20190625 16:14:41.140"></status>
</kw>
<kw type="kw" name="${item'} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${item1}-${amount}</arg>
</arguments>
<msg timestamp="20190625 16:14:45.145" level="INFO">${item'} = 4000</msg>
<status status="PASS" endtime="20190625 16:14:45.144" starttime="20190625 16:14:45.143"></status>
</kw>
<kw type="kw" name="${PTN'} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${PTNPoundage}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:45.146" level="INFO">${PTN'} = 999999997.99983996</msg>
<status status="PASS" endtime="20190625 16:14:45.146" starttime="20190625 16:14:45.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190625 16:14:47.149" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190625 16:14:47.149" starttime="20190625 16:14:45.148"></status>
</kw>
<kw type="kw" name="${result2} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${GeneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<msg timestamp="20190625 16:14:47.173" level="INFO">Current URL:http://192.168.0.105:8565/
Current Balance: {u'PTN': u'999999997.99983996', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000'}</msg>
<msg timestamp="20190625 16:14:47.174" level="INFO">${result2} = {u'PTN': u'999999997.99983996', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA102+105NZHLD7QCG6JC886D': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000'}</msg>
<status status="PASS" endtime="20190625 16:14:47.174" starttime="20190625 16:14:47.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:51.177" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:51.177" starttime="20190625 16:14:47.177"></status>
</kw>
<kw type="kw" name="${PTN2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190625 16:14:51.179" level="INFO">${PTN2} = 999999997.99983996</msg>
<status status="PASS" endtime="20190625 16:14:51.179" starttime="20190625 16:14:51.178"></status>
</kw>
<kw type="kw" name="${item2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.180" level="INFO">${item2} = 4000</msg>
<status status="PASS" endtime="20190625 16:14:51.180" starttime="20190625 16:14:51.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${item2}</arg>
<arg>${item'}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.182" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.182" starttime="20190625 16:14:51.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTN'}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.183" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.183" starttime="20190625 16:14:51.183"></status>
</kw>
<doc>QA105 must be a new one</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:14:51.184" critical="yes" starttime="20190625 16:14:25.479"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:51.187" starttime="20190625 16:14:25.470"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:14:51.191" starttime="20190625 16:14:15.782"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\zChangeSupply" id="s1-s3" name="zChangeSupply">
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s3-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s3-s1-t1" name="Scenario: Change Supply Token">
<kw type="kw" name="Given Send PTN to recieverAdd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.211" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:14:51.211" starttime="20190625 16:14:51.210"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:51.212" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:51.212" starttime="20190625 16:14:51.212"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.212" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:51.212" starttime="20190625 16:14:51.212"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.213" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:51.213" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.213" starttime="20190625 16:14:51.212"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.218" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:51.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.218" starttime="20190625 16:14:51.213"></status>
</kw>
<msg timestamp="20190625 16:14:51.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.218" starttime="20190625 16:14:51.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.219" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}
</msg>
<status status="PASS" endtime="20190625 16:14:51.219" starttime="20190625 16:14:51.218"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:51.220" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]}</msg>
<status status="PASS" endtime="20190625 16:14:51.220" starttime="20190625 16:14:51.219"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.220" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE"]} </msg>
<msg timestamp="20190625 16:14:51.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:51.220" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE']}</msg>
<status status="PASS" endtime="20190625 16:14:51.220" starttime="20190625 16:14:51.220"></status>
</kw>
<msg timestamp="20190625 16:14:51.220" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:51.220" starttime="20190625 16:14:51.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.221" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:51.221" starttime="20190625 16:14:51.221"></status>
</kw>
<kw type="kw" name="${jsonRes} = utilDefined.newAccount">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pwd}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.222" level="INFO">${transList} = [u'1']</msg>
<status status="PASS" endtime="20190625 16:14:51.222" starttime="20190625 16:14:51.222"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${newAccount}</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:51.223" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:51.223" starttime="20190625 16:14:51.223"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.223" level="INFO">${data} = {'params': [u'1'], 'jsonrpc': u'2.0', 'method': u'personal_newAccount', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:51.223" starttime="20190625 16:14:51.223"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.224" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:51.224" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.224" starttime="20190625 16:14:51.224"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.973" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["1"], "jsonrpc": "2.0", "method": "personal_newAccount", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:51.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.973" starttime="20190625 16:14:51.224"></status>
</kw>
<msg timestamp="20190625 16:14:51.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.973" starttime="20190625 16:14:51.222"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:51.974" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":"P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"}</msg>
<status status="PASS" endtime="20190625 16:14:51.974" starttime="20190625 16:14:51.973"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.974" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":"P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"} </msg>
<msg timestamp="20190625 16:14:51.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:51.974" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB'}</msg>
<status status="PASS" endtime="20190625 16:14:51.974" starttime="20190625 16:14:51.974"></status>
</kw>
<msg timestamp="20190625 16:14:51.975" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB'}</msg>
<status status="PASS" endtime="20190625 16:14:51.975" starttime="20190625 16:14:51.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${reciever}</arg>
<arg>${jsonRes['result']}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.975" level="INFO">${reciever} = P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB</msg>
<status status="PASS" endtime="20190625 16:14:51.975" starttime="20190625 16:14:51.975"></status>
</kw>
<kw type="kw" name="${ret1} = behaveKwd.And normalCrtTrans">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${reciever}</arg>
<arg>100000</arg>
<arg>${PTNPoundage}</arg>
</arguments>
<kw type="kw" name="${jsonRes} = normalKwd.Request create transaction">
<doc></doc>
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.977" level="INFO">${transList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB', u'100000', u'1']</msg>
<status status="PASS" endtime="20190625 16:14:51.977" starttime="20190625 16:14:51.977"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_cmdCreateTransaction</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:51.978" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:51.978" starttime="20190625 16:14:51.978"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.979" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB', u'100000', u'1'], 'jsonrpc': u'2.0', 'method': u'ptn_cmdCreateTransaction', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:51.979" starttime="20190625 16:14:51.979"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.979" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:51.979" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.980" starttime="20190625 16:14:51.979"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.985" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB", "100000", "1"], "jsonrpc": "2.0", "method": "ptn_cmdCreateTransaction", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:51.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.985" starttime="20190625 16:14:51.980"></status>
</kw>
<msg timestamp="20190625 16:14:51.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.986" starttime="20190625 16:14:51.977"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:51.987" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":"f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b16...</msg>
<status status="PASS" endtime="20190625 16:14:51.987" starttime="20190625 16:14:51.986"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.987" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":"f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b167cb588ace290400082bb0800000000000000000000009000000000000000000000000000000000f8468801633c5ffd357e7c9976a9143b37adb9f13d85631d7a528e8ac6c43a04c28d0688ace290400082bb0800000000000000000000009000000000000000000000000000000000808080"} </msg>
<msg timestamp="20190625 16:14:51.987" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:51.987" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef298...</msg>
<status status="PASS" endtime="20190625 16:14:51.987" starttime="20190625 16:14:51.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:51.988" starttime="20190625 16:14:51.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:51.988" starttime="20190625 16:14:51.988"></status>
</kw>
<msg timestamp="20190625 16:14:51.988" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef298...</msg>
<status status="PASS" endtime="20190625 16:14:51.988" starttime="20190625 16:14:51.976"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${jsonRes['result']}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:51.989" level="INFO">${ret} = f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa3</msg>
<status status="PASS" endtime="20190625 16:14:51.989" starttime="20190625 16:14:51.989"></status>
</kw>
<msg timestamp="20190625 16:14:51.989" level="INFO">${ret1} = f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b167cb588ace290400082bb08000000000000...</msg>
<status status="PASS" endtime="20190625 16:14:51.989" starttime="20190625 16:14:51.975"></status>
</kw>
<kw type="kw" name="${ret2} = behaveKwd.And normalSignTrans">
<doc></doc>
<arguments>
<arg>${ret1}</arg>
<arg>${signType}</arg>
<arg>${pwd}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request sign transaction">
<doc></doc>
<arguments>
<arg>${crtRet}</arg>
<arg>${signType}</arg>
<arg>${pwd}</arg>
</arguments>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtRet}</arg>
<arg>${signType}</arg>
<arg>${pwd}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.991" level="INFO">${transList} = [u'f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b167cb588ace290400082bb08000000000...</msg>
<status status="PASS" endtime="20190625 16:14:51.991" starttime="20190625 16:14:51.991"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_signRawTransaction</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:51.992" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:51.992" starttime="20190625 16:14:51.992"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.993" level="INFO">${data} = {'params': [u'f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b167cb588ace290400082bb...</msg>
<status status="PASS" endtime="20190625 16:14:51.993" starttime="20190625 16:14:51.993"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:51.993" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:51.994" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:51.994" starttime="20190625 16:14:51.993"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.739" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["f8c3f8bff8bd80b8baf8b8e6e58080a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b167cb588ace290400082bb0800000000000000000000009000000000000000000000000000000000f8468801633c5ffd357e7c9976a9143b37adb9f13d85631d7a528e8ac6c43a04c28d0688ace290400082bb0800000000000000000000009000000000000000000000000000000000808080", "ALL", "1"], "jsonrpc": "2.0", "method": "ptn_signRawTransaction", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:52.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.739" starttime="20190625 16:14:51.994"></status>
</kw>
<msg timestamp="20190625 16:14:52.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.739" starttime="20190625 16:14:51.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:52.740" starttime="20190625 16:14:52.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:52.740" starttime="20190625 16:14:52.740"></status>
</kw>
<msg timestamp="20190625 16:14:52.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.740" starttime="20190625 16:14:51.990"></status>
</kw>
<kw type="kw" name="${hex} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']['hex']</arg>
<arg>${result_hex}</arg>
<arg>msg="hex:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:52.741" level="INFO">${hex} = f90134f9012ff9012c80b90128f90125f892f890b86a47304402202411f71035dd37db7dbbcf672b97d1b3a089eddaccf3fb9bf41e14b5398108a20220254693de7bbc2e93ebe96a9ea3e77b42dc2c6ae36499f9d1fbe20b10b9ed4089012103561de31f...</msg>
<status status="PASS" endtime="20190625 16:14:52.741" starttime="20190625 16:14:52.740"></status>
</kw>
<kw type="kw" name="${txid} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']['txid']</arg>
<arg>${result_txid}</arg>
<arg>msg="txid:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:52.742" level="INFO">${txid} = 0134f9012ff9012c80b90128f90125f892f890b86a47304402202411f71035dd37db7db</msg>
<status status="PASS" endtime="20190625 16:14:52.741" starttime="20190625 16:14:52.741"></status>
</kw>
<msg timestamp="20190625 16:14:52.742" level="INFO">${ret2} = f90134f9012ff9012c80b90128f90125f892f890b86a47304402202411f71035dd37db7dbbcf672b97d1b3a089eddaccf3fb9bf41e14b5398108a20220254693de7bbc2e93ebe96a9ea3e77b42dc2c6ae36499f9d1fbe20b10b9ed4089012103561de31f...</msg>
<status status="PASS" endtime="20190625 16:14:52.742" starttime="20190625 16:14:51.989"></status>
</kw>
<kw type="kw" name="${ret3} = behaveKwd.And normalSendTrans">
<doc></doc>
<arguments>
<arg>${ret2}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request send transaction">
<doc></doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw type="kw" name="${sendList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.744" level="INFO">${sendList} = [u'f90134f9012ff9012c80b90128f90125f892f890b86a47304402202411f71035dd37db7dbbcf672b97d1b3a089eddaccf3fb9bf41e14b5398108a20220254693de7bbc2e93ebe96a9ea3e77b42dc2c6ae36499f9d1fbe20b10b9ed4089012103561de...</msg>
<status status="PASS" endtime="20190625 16:14:52.744" starttime="20190625 16:14:52.743"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_sendRawTransaction</arg>
<arg>${sendList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:52.745" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:52.745" starttime="20190625 16:14:52.744"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.745" level="INFO">${data} = {'params': [u'f90134f9012ff9012c80b90128f90125f892f890b86a47304402202411f71035dd37db7dbbcf672b97d1b3a089eddaccf3fb9bf41e14b5398108a20220254693de7bbc2e93ebe96a9ea3e77b42dc2c6ae36499f9d1fbe20b10b9ed4089...</msg>
<status status="PASS" endtime="20190625 16:14:52.745" starttime="20190625 16:14:52.745"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.745" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:52.746" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.746" starttime="20190625 16:14:52.745"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.750" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["f90134f9012ff9012c80b90128f90125f892f890b86a47304402202411f71035dd37db7dbbcf672b97d1b3a089eddaccf3fb9bf41e14b5398108a20220254693de7bbc2e93ebe96a9ea3e77b42dc2c6ae36499f9d1fbe20b10b9ed4089012103561de31fb449c459fe3112f0cab84447b4731c36a20a589a7a19d9d5361ad64a80a02c39ee84ccdcfacc2a8cdcbe422c8aa32adb78f3fcbb38ced664eca888525c838080f88ef8448609184e72a0009976a914c25cc1f5ea523b36ab016ef2987fe6085b167cb588ace290400082bb0800000000000000000000009000000000000000000000000000000000f8468801633c5ffd357e7c9976a9143b37adb9f13d85631d7a528e8ac6c43a04c28d0688ace290400082bb0800000000000000000000009000000000000000000000000000000000808080"], "jsonrpc": "2.0", "method": "ptn_sendRawTransaction", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:52.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.751" starttime="20190625 16:14:52.746"></status>
</kw>
<msg timestamp="20190625 16:14:52.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.751" starttime="20190625 16:14:52.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>"2.0"</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:52.751" starttime="20190625 16:14:52.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:52.752" starttime="20190625 16:14:52.751"></status>
</kw>
<msg timestamp="20190625 16:14:52.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.752" starttime="20190625 16:14:52.743"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']</arg>
<arg>${sendResult}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:52.753" level="INFO">${ret} = </msg>
<status status="PASS" endtime="20190625 16:14:52.753" starttime="20190625 16:14:52.752"></status>
</kw>
<msg timestamp="20190625 16:14:52.753" level="INFO">${ret3} = </msg>
<status status="PASS" endtime="20190625 16:14:52.753" starttime="20190625 16:14:52.742"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:52.753" starttime="20190625 16:14:51.209"></status>
</kw>
<kw type="kw" name="And Request ccinvokePass and transferToken">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.755" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA106', u'1', u'60000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:52.755" starttime="20190625 16:14:52.754"></status>
</kw>
<kw type="kw" name="behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${reciever}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.758" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA106', u'1', u'60000', u'P16Q7Z...</msg>
<status status="PASS" endtime="20190625 16:14:52.757" starttime="20190625 16:14:52.757"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:52.759" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:52.759" starttime="20190625 16:14:52.759"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.759" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA106', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:14:52.759" starttime="20190625 16:14:52.759"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:52.760" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:52.760" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:52.760" starttime="20190625 16:14:52.759"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.538" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA106", "1", "60000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:53.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.538" starttime="20190625 16:14:52.760"></status>
</kw>
<msg timestamp="20190625 16:14:53.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.538" starttime="20190625 16:14:52.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:53.539" starttime="20190625 16:14:53.539"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:53.539" starttime="20190625 16:14:53.539"></status>
</kw>
<msg timestamp="20190625 16:14:53.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.540" starttime="20190625 16:14:52.756"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:53.542" level="FAIL">"result:does't match Result expression": '{"jsonrpc":"2.0","id":1,"error":{"code":-32000,"message":"P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ 's utxo is empty"}}
' does not match '[a-z0-9]{64}'</msg>
<status status="FAIL" endtime="20190625 16:14:53.542" starttime="20190625 16:14:53.540"></status>
</kw>
<status status="FAIL" endtime="20190625 16:14:53.542" starttime="20190625 16:14:52.755"></status>
</kw>
<status status="FAIL" endtime="20190625 16:14:53.542" starttime="20190625 16:14:52.754"></status>
</kw>
<doc>Verify SupplyAdd And Transfer Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="FAIL" endtime="20190625 16:14:53.546" critical="yes" starttime="20190625 16:14:51.207">"result:does't match Result expression": '{"jsonrpc":"2.0","id":1,"error":{"code":-32000,"message":"P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ 's utxo is empty"}}
' does not match '[a-z0-9]{64}'</status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190625 16:14:53.549" starttime="20190625 16:14:51.196"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190625 16:14:53.550" starttime="20190625 16:14:51.193"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\zSupplyToken" id="s1-s4" name="zSupplyToken">
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\zSupplyToken\supplyTokenAllow_SenderPTNToken.robot" id="s1-s4-s1" name="supplyTokenAllow SenderPTNToken">
<test id="s1-s4-s1-t1" name="Feature: Vote Contract- Create token">
<kw type="kw" name="Given CcinvokePass normal">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.569" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:14:53.569" starttime="20190625 16:14:53.569"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:53.570" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:53.570" starttime="20190625 16:14:53.570"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.571" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:14:53.571" starttime="20190625 16:14:53.570"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.571" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:53.572" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.572" starttime="20190625 16:14:53.571"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.578" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:53.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.578" starttime="20190625 16:14:53.572"></status>
</kw>
<msg timestamp="20190625 16:14:53.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.578" starttime="20190625 16:14:53.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.579" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE","P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"]}
</msg>
<status status="PASS" endtime="20190625 16:14:53.579" starttime="20190625 16:14:53.578"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:14:53.580" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE","P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"]}</msg>
<status status="PASS" endtime="20190625 16:14:53.580" starttime="20190625 16:14:53.579"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.580" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE","P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"]} </msg>
<msg timestamp="20190625 16:14:53.580" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:14:53.580" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE', u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB...</msg>
<status status="PASS" endtime="20190625 16:14:53.580" starttime="20190625 16:14:53.580"></status>
</kw>
<msg timestamp="20190625 16:14:53.581" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:53.581" starttime="20190625 16:14:53.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.581" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:14:53.581" starttime="20190625 16:14:53.581"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.582" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA107', u'1', u'60000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:53.582" starttime="20190625 16:14:53.581"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.585" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA107', u'1', u'60000', u'P16Q7Z...</msg>
<status status="PASS" endtime="20190625 16:14:53.585" starttime="20190625 16:14:53.584"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:53.586" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:53.586" starttime="20190625 16:14:53.586"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.587" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA107', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:14:53.587" starttime="20190625 16:14:53.586"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:53.587" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:53.587" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:53.587" starttime="20190625 16:14:53.587"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:54.385" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA107", "1", "60000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:54.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:54.385" starttime="20190625 16:14:53.588"></status>
</kw>
<msg timestamp="20190625 16:14:54.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:54.385" starttime="20190625 16:14:53.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:54.385" starttime="20190625 16:14:54.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:54.386" starttime="20190625 16:14:54.385"></status>
</kw>
<msg timestamp="20190625 16:14:54.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:54.386" starttime="20190625 16:14:53.583"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:54.387" level="INFO">${ret} = 9e1ebe3f6d2b46270c08fb0bf5cbfa87a7e0cf41441cf3ef45db1f96641a2fc1</msg>
<status status="PASS" endtime="20190625 16:14:54.386" starttime="20190625 16:14:54.386"></status>
</kw>
<msg timestamp="20190625 16:14:54.387" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:54.387" starttime="20190625 16:14:53.582"></status>
</kw>
<status status="PASS" endtime="20190625 16:14:54.387" starttime="20190625 16:14:53.567"></status>
</kw>
<kw type="kw" name="${PTN1}, ${key}, ${coinToken1} = And Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:14:58.389" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:14:58.389" starttime="20190625 16:14:54.389"></status>
</kw>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.395" level="INFO">Current URL:http://192.168.0.105:8565/
Current Balance: {u'PTN': u'999899996.99979995', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<msg timestamp="20190625 16:14:58.396" level="INFO">${result1} = {u'PTN': u'999899996.99979995', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA102+105...</msg>
<status status="PASS" endtime="20190625 16:14:58.395" starttime="20190625 16:14:58.389"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.397" level="INFO">${key} = QA107+10O0O18GR08W0YK2CQJ</msg>
<status status="PASS" endtime="20190625 16:14:58.397" starttime="20190625 16:14:58.396"></status>
</kw>
<kw type="kw" name="${PTN1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190625 16:14:58.399" level="INFO">${PTN1} = 999899996.99979995</msg>
<status status="PASS" endtime="20190625 16:14:58.398" starttime="20190625 16:14:58.398"></status>
</kw>
<kw type="kw" name="${coinToken1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.400" level="INFO">${coinToken1} = 6000</msg>
<status status="PASS" endtime="20190625 16:14:58.399" starttime="20190625 16:14:58.399"></status>
</kw>
<msg timestamp="20190625 16:14:58.400" level="INFO">${PTN1} = 999899996.99979995</msg>
<msg timestamp="20190625 16:14:58.400" level="INFO">${key} = QA107+10O0O18GR08W0YK2CQJ</msg>
<msg timestamp="20190625 16:14:58.401" level="INFO">${coinToken1} = 6000</msg>
<status status="PASS" endtime="20190625 16:14:58.400" starttime="20190625 16:14:54.388"></status>
</kw>
<kw type="kw" name="${ret} = When Create token of vote contract">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${supplyTokenMethod}</arg>
<arg>${preTokenId}</arg>
<arg>${supplyTokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.412" level="INFO">${ccList} = [u'supplyToken', u'QA107', u'1500000000', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ']</msg>
<status status="PASS" endtime="20190625 16:14:58.412" starttime="20190625 16:14:58.411"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.420" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA107', u'1500000000', u'P16Q7ZwJUh9ujMWk6xoK...</msg>
<status status="PASS" endtime="20190625 16:14:58.420" starttime="20190625 16:14:58.418"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:14:58.422" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:14:58.422" starttime="20190625 16:14:58.422"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.423" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA107', u'1500000000', u'P16Q7ZwJU...</msg>
<status status="PASS" endtime="20190625 16:14:58.423" starttime="20190625 16:14:58.423"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:14:58.424" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:14:58.425" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:14:58.425" starttime="20190625 16:14:58.424"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:14:59.190" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["supplyToken", "QA107", "1500000000", "P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:14:59.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:59.190" starttime="20190625 16:14:58.425"></status>
</kw>
<msg timestamp="20190625 16:14:59.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:59.190" starttime="20190625 16:14:58.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:59.191" starttime="20190625 16:14:59.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:14:59.191" starttime="20190625 16:14:59.191"></status>
</kw>
<msg timestamp="20190625 16:14:59.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:59.191" starttime="20190625 16:14:58.415"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:14:59.192" level="INFO">${ret} = fe9def1e12ee94a770b2ba064ebc2e0767e9da29030804068271e97d04c79307</msg>
<status status="PASS" endtime="20190625 16:14:59.192" starttime="20190625 16:14:59.192"></status>
</kw>
<msg timestamp="20190625 16:14:59.192" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:59.192" starttime="20190625 16:14:58.412"></status>
</kw>
<msg timestamp="20190625 16:14:59.192" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:14:59.192" starttime="20190625 16:14:58.409"></status>
</kw>
<kw type="kw" name="${GAIN} = And Calculate gain of recieverAdd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${invokeGain} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int(${PTNAmount})+int(${PTNPoundage})</arg>
</arguments>
<msg timestamp="20190625 16:14:59.194" level="INFO">${invokeGain} = 4001</msg>
<status status="PASS" endtime="20190625 16:14:59.194" starttime="20190625 16:14:59.194"></status>
</kw>
<kw type="kw" name="${GAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${invokeGain}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190625 16:14:59.196" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190625 16:14:59.196" starttime="20190625 16:14:59.195"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:14:59.196" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:59.196" starttime="20190625 16:14:59.196"></status>
</kw>
<msg timestamp="20190625 16:14:59.196" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:59.196" starttime="20190625 16:14:59.195"></status>
</kw>
<msg timestamp="20190625 16:14:59.196" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:14:59.196" starttime="20190625 16:14:59.193"></status>
</kw>
<kw type="kw" name="${PTN2}, ${tokenGAIN} = And Request getbalance after create token">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${GAIN}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:15:03.198" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:15:03.198" starttime="20190625 16:14:59.198"></status>
</kw>
<kw type="kw" name="${result2} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.219" level="INFO">Current URL:http://192.168.0.105:8565/
Current Balance: {u'PTN': u'999899996.99975994', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'150006000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<msg timestamp="20190625 16:15:03.220" level="INFO">${result2} = {u'PTN': u'999899996.99975994', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'150006000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA10...</msg>
<status status="PASS" endtime="20190625 16:15:03.219" starttime="20190625 16:15:03.200"></status>
</kw>
<kw type="kw" name="${coinToken2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.222" level="INFO">${coinToken2} = 150006000</msg>
<status status="PASS" endtime="20190625 16:15:03.221" starttime="20190625 16:15:03.220"></status>
</kw>
<kw type="kw" name="${PTN2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190625 16:15:03.223" level="INFO">${PTN2} = 999899996.99975994</msg>
<status status="PASS" endtime="20190625 16:15:03.223" starttime="20190625 16:15:03.222"></status>
</kw>
<kw type="kw" name="${tokenGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>float(${coinToken2})-float(${coinToken1})</arg>
</arguments>
<msg timestamp="20190625 16:15:03.224" level="INFO">${tokenGAIN} = 150000000.0</msg>
<status status="PASS" endtime="20190625 16:15:03.224" starttime="20190625 16:15:03.224"></status>
</kw>
<msg timestamp="20190625 16:15:03.225" level="INFO">${PTN2} = 999899996.99975994</msg>
<msg timestamp="20190625 16:15:03.225" level="INFO">${tokenGAIN} = 150000000.0</msg>
<status status="PASS" endtime="20190625 16:15:03.225" starttime="20190625 16:14:59.197"></status>
</kw>
<kw type="kw" name="Then Assert gain of reciever">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
<arg>${PTN2}</arg>
<arg>${tokenGAIN}</arg>
<arg>${GAIN}</arg>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${GAIN}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:15:03.230" level="INFO">${PTNGAIN} = 999899996.99975994</msg>
<status status="PASS" endtime="20190625 16:15:03.230" starttime="20190625 16:15:03.229"></status>
</kw>
<kw type="kw" name="${supplyTokenAmount} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${supplyTokenAmount}*(10**-${tokenDecimal})</arg>
</arguments>
<msg timestamp="20190625 16:15:03.232" level="INFO">${supplyTokenAmount} = 150000000.0</msg>
<status status="PASS" endtime="20190625 16:15:03.232" starttime="20190625 16:15:03.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.233" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:03.233" starttime="20190625 16:15:03.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${supplyTokenAmount}</arg>
<arg>${tokenGAIN}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.235" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'float'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:03.235" starttime="20190625 16:15:03.234"></status>
</kw>
<status status="PASS" endtime="20190625 16:15:03.236" starttime="20190625 16:15:03.226"></status>
</kw>
<doc>Scenario: Verify Sender's PTN and Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:15:03.237" critical="yes" starttime="20190625 16:14:53.566"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:15:03.241" starttime="20190625 16:14:53.555"></status>
</suite>
<suite source="D:\software\robotscript\zMulti-node\crt20Contract\zSupplyToken\supplyTokenForbid_SenderPTNToken.robot" id="s1-s4-s2" name="supplyTokenForbid SenderPTNToken">
<test id="s1-s4-s2-t1" name="Feature: Vote Contract- Create token">
<kw type="kw" name="Given CcinvokePass normal">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getMultiNodeGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.289" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190625 16:15:03.289" starttime="20190625 16:15:03.289"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:15:03.291" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:15:03.291" starttime="20190625 16:15:03.290"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.291" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190625 16:15:03.291" starttime="20190625 16:15:03.291"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.292" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:15:03.292" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:03.293" starttime="20190625 16:15:03.292"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.298" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:15:03.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:03.299" starttime="20190625 16:15:03.293"></status>
</kw>
<msg timestamp="20190625 16:15:03.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:03.299" starttime="20190625 16:15:03.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.300" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE","P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"]}
</msg>
<status status="PASS" endtime="20190625 16:15:03.300" starttime="20190625 16:15:03.299"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:15:03.302" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE","P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"]}</msg>
<status status="PASS" endtime="20190625 16:15:03.302" starttime="20190625 16:15:03.300"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.302" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54","P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ","P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE","P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB"]} </msg>
<msg timestamp="20190625 16:15:03.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190625 16:15:03.303" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1D4GXUcrcT7tAhMPvTxTQk7vQQSJkiad54', u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1ER2jycCC9PGsRFiiufzP6izNzUGrHukRE', u'P1JihD8Z2Pk6AYBjJtdBRkm6ekJ6S9F9wZB...</msg>
<status status="PASS" endtime="20190625 16:15:03.303" starttime="20190625 16:15:03.302"></status>
</kw>
<msg timestamp="20190625 16:15:03.303" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:15:03.303" starttime="20190625 16:15:03.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.303" level="INFO">${geneAdd} = P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ</msg>
<status status="PASS" endtime="20190625 16:15:03.303" starttime="20190625 16:15:03.303"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.304" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA108', u'1', u'60000']</msg>
<status status="PASS" endtime="20190625 16:15:03.304" starttime="20190625 16:15:03.304"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.306" level="INFO">${ccinvokeList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA108', u'1', u'60000'], u'1', 6...</msg>
<status status="PASS" endtime="20190625 16:15:03.306" starttime="20190625 16:15:03.306"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:15:03.308" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:15:03.308" starttime="20190625 16:15:03.308"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.308" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA108', u'1', u'60000...</msg>
<status status="PASS" endtime="20190625 16:15:03.308" starttime="20190625 16:15:03.308"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:15:03.309" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:15:03.309" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:03.309" starttime="20190625 16:15:03.308"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:15:04.060" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA108", "1", "60000"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:15:04.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:04.060" starttime="20190625 16:15:03.309"></status>
</kw>
<msg timestamp="20190625 16:15:04.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:04.060" starttime="20190625 16:15:03.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:15:04.061" starttime="20190625 16:15:04.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:15:04.061" starttime="20190625 16:15:04.061"></status>
</kw>
<msg timestamp="20190625 16:15:04.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:04.061" starttime="20190625 16:15:03.305"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:15:04.062" level="INFO">${ret} = 53151f40edc47e1984c201fb5b4841066c84cc12fa57b9e17565a3e2b2bc6a74</msg>
<status status="PASS" endtime="20190625 16:15:04.062" starttime="20190625 16:15:04.062"></status>
</kw>
<msg timestamp="20190625 16:15:04.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:04.062" starttime="20190625 16:15:03.304"></status>
</kw>
<status status="PASS" endtime="20190625 16:15:04.062" starttime="20190625 16:15:03.287"></status>
</kw>
<kw type="kw" name="${PTN1}, ${key}, ${coinToken1} = And Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:15:08.064" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:15:08.064" starttime="20190625 16:15:04.064"></status>
</kw>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.086" level="INFO">Current URL:http://192.168.0.105:8565/
Current Balance: {u'PTN': u'999899996.99971993', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'150006000', u'QA108+10CMBW4DEV5USMZAEBL': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<msg timestamp="20190625 16:15:08.087" level="INFO">${result1} = {u'PTN': u'999899996.99971993', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'150006000', u'QA108+10CMBW4DEV5USMZAEBL': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA10...</msg>
<status status="PASS" endtime="20190625 16:15:08.087" starttime="20190625 16:15:08.066"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.090" level="INFO">${key} = QA108+10CMBW4DEV5USMZAEBL</msg>
<status status="PASS" endtime="20190625 16:15:08.090" starttime="20190625 16:15:08.088"></status>
</kw>
<kw type="kw" name="${PTN1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190625 16:15:08.093" level="INFO">${PTN1} = 999899996.99971993</msg>
<status status="PASS" endtime="20190625 16:15:08.092" starttime="20190625 16:15:08.091"></status>
</kw>
<kw type="kw" name="${coinToken1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.095" level="INFO">${coinToken1} = 6000</msg>
<status status="PASS" endtime="20190625 16:15:08.094" starttime="20190625 16:15:08.093"></status>
</kw>
<msg timestamp="20190625 16:15:08.096" level="INFO">${PTN1} = 999899996.99971993</msg>
<msg timestamp="20190625 16:15:08.096" level="INFO">${key} = QA108+10CMBW4DEV5USMZAEBL</msg>
<msg timestamp="20190625 16:15:08.097" level="INFO">${coinToken1} = 6000</msg>
<status status="PASS" endtime="20190625 16:15:08.096" starttime="20190625 16:15:04.063"></status>
</kw>
<kw type="kw" name="${ret} = When Create token of vote contract">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccTokenList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${supplyTokenMethod}</arg>
<arg>${preTokenId}</arg>
<arg>${supplyTokenAmount}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.106" level="INFO">${ccTokenList} = [u'supplyToken', u'QA108', u'1500000000']</msg>
<status status="PASS" endtime="20190625 16:15:08.106" starttime="20190625 16:15:08.104"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccTokenList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.109" level="INFO">${ccList} = [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA108', u'1500000000'], u'1', 600000000, '']</msg>
<status status="PASS" endtime="20190625 16:15:08.109" starttime="20190625 16:15:08.106"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190625 16:15:08.117" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190625 16:15:08.116" starttime="20190625 16:15:08.115"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.120" level="INFO">${data} = {'params': [u'P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA108', u'1500000000'], u'1', 6000...</msg>
<status status="PASS" endtime="20190625 16:15:08.120" starttime="20190625 16:15:08.118"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.123" level="INFO">Creating Session using : alias=trans, url=http://192.168.0.105:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190625 16:15:08.124" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:08.124" starttime="20190625 16:15:08.121"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.936" level="INFO">Post Request using : alias=trans, uri=http://192.168.0.105:8545/, data={"params": ["P16Q7ZwJUh9ujMWk6xoK8pHQJJeoBktT7jZ", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["supplyToken", "QA108", "1500000000"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190625 16:15:08.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:08.936" starttime="20190625 16:15:08.125"></status>
</kw>
<msg timestamp="20190625 16:15:08.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190625 16:15:08.936" starttime="20190625 16:15:08.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190625 16:15:08.937" level="INFO">{"jsonrpc":"2.0","id":1,"result":"94af37aa052a433ead047b4b58134a9f29e0fe7cf810d5d2ed557029c0cd0a53"}
</msg>
<status status="PASS" endtime="20190625 16:15:08.937" starttime="20190625 16:15:08.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>"2.0"</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:15:08.938" starttime="20190625 16:15:08.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190625 16:15:08.938" starttime="20190625 16:15:08.938"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190625 16:15:08.938" level="INFO">${ret} = 94af37aa052a433ead047b4b58134a9f29e0fe7cf810d5d2ed557029c0cd0a53</msg>
<status status="PASS" endtime="20190625 16:15:08.938" starttime="20190625 16:15:08.938"></status>
</kw>
<msg timestamp="20190625 16:15:08.939" level="INFO">${ret} = 94af37aa052a433ead047b4b58134a9f29e0fe7cf810d5d2ed557029c0cd0a53</msg>
<status status="PASS" endtime="20190625 16:15:08.939" starttime="20190625 16:15:08.101"></status>
</kw>
<kw type="kw" name="${GAIN} = And Calculate gain of recieverAdd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${invokeGain} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int(${PTNAmount})+int(${PTNPoundage})</arg>
</arguments>
<msg timestamp="20190625 16:15:08.941" level="INFO">${invokeGain} = 4001</msg>
<status status="PASS" endtime="20190625 16:15:08.941" starttime="20190625 16:15:08.940"></status>
</kw>
<kw type="kw" name="${GAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${invokeGain}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190625 16:15:08.942" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190625 16:15:08.942" starttime="20190625 16:15:08.942"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:15:08.942" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:15:08.942" starttime="20190625 16:15:08.942"></status>
</kw>
<msg timestamp="20190625 16:15:08.942" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:15:08.942" starttime="20190625 16:15:08.941"></status>
</kw>
<msg timestamp="20190625 16:15:08.943" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190625 16:15:08.943" starttime="20190625 16:15:08.939"></status>
</kw>
<kw type="kw" name="${PTN2}, ${coinToken2} = And Request getbalance after create token">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${key}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190625 16:15:12.944" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190625 16:15:12.944" starttime="20190625 16:15:08.944"></status>
</kw>
<kw type="kw" name="${result2} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${mutiHost1}</arg>
</arguments>
<msg timestamp="20190625 16:15:12.953" level="INFO">Current URL:http://192.168.0.105:8565/
Current Balance: {u'PTN': u'999899996.99967992', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'150006000', u'QA108+10CMBW4DEV5USMZAEBL': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA104+1090NVXYUS0XK0ZCTRD': u'5998', u'QA102+105NZHLD7QCG6JC886D': u'6000'}</msg>
<msg timestamp="20190625 16:15:12.953" level="INFO">${result2} = {u'PTN': u'999899996.99967992', u'QA103+1011RLPBBXC03OD7M5YO': u'6000', u'QA107+10O0O18GR08W0YK2CQJ': u'150006000', u'QA108+10CMBW4DEV5USMZAEBL': u'6000', u'QA105+10YWQPSDIEY5ZMG3OZN': u'4000', u'QA10...</msg>
<status status="PASS" endtime="20190625 16:15:12.953" starttime="20190625 16:15:12.944"></status>
</kw>
<kw type="kw" name="${coinToken2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190625 16:15:12.953" level="INFO">${coinToken2} = 6000</msg>
<status status="PASS" endtime="20190625 16:15:12.953" starttime="20190625 16:15:12.953"></status>
</kw>
<kw type="kw" name="${PTN2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190625 16:15:12.954" level="INFO">${PTN2} = 999899996.99967992</msg>
<status status="PASS" endtime="20190625 16:15:12.954" starttime="20190625 16:15:12.954"></status>
</kw>
<msg timestamp="20190625 16:15:12.954" level="INFO">${PTN2} = 999899996.99967992</msg>
<msg timestamp="20190625 16:15:12.955" level="INFO">${coinToken2} = 6000</msg>
<status status="PASS" endtime="20190625 16:15:12.954" starttime="20190625 16:15:08.943"></status>
</kw>
<kw type="kw" name="Then Assert gain of reciever">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
<arg>${PTN2}</arg>
<arg>${GAIN}</arg>
<arg>${coinToken1}</arg>
<arg>${coinToken2}</arg>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${GAIN}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190625 16:15:12.957" level="INFO">${PTNGAIN} = 999899996.99967992</msg>
<status status="PASS" endtime="20190625 16:15:12.957" starttime="20190625 16:15:12.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<msg timestamp="20190625 16:15:12.957" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:12.958" starttime="20190625 16:15:12.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${coinToken1}</arg>
<arg>${coinToken2}</arg>
</arguments>
<msg timestamp="20190625 16:15:12.958" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190625 16:15:12.958" starttime="20190625 16:15:12.958"></status>
</kw>
<kw type="kw" name="${result} = createToken.Get Tx By Req Id">
<doc></doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<msg timestamp="20190625 16:15:12.966" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'{"item":"transaction_info","info":{"tx_hash":"0x112934af0165b061f9ab6e8f4251105b2e2e4c827eba82d7cc52caa6154b609a","tx_size":797,"payment":[{"inputs":[{"txid...</msg>
<status status="PASS" endtime="20190625 16:15:12.966" starttime="20190625 16:15:12.958"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${result})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190625 16:15:12.969" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":"{\"item\":\"transaction_info\",\"info\":{\"tx_hash\":\"0x112934af0165b061f9ab6e8f4251105b2e2e4c827eba82d7cc52caa6154b609a\",\"tx_size\":797,\"payment\":[{\"inputs\":[...</msg>
<status status="PASS" endtime="20190625 16:15:12.969" starttime="20190625 16:15:12.966"></status>
</kw>
<kw type="kw" name="${error_code} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${result}['result']</arg>
<arg>"error_code":500</arg>
</arguments>
<msg timestamp="20190625 16:15:12.970" level="INFO">${error_code} = "error_code":500</msg>
<status status="PASS" endtime="20190625 16:15:12.970" starttime="20190625 16:15:12.969"></status>
</kw>
<kw type="kw" name="${error_code} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${result}['result']</arg>
<arg>Not the supply address</arg>
</arguments>
<msg timestamp="20190625 16:15:12.971" level="INFO">${error_code} = Not the supply address</msg>
<status status="PASS" endtime="20190625 16:15:12.971" starttime="20190625 16:15:12.970"></status>
</kw>
<status status="PASS" endtime="20190625 16:15:12.971" starttime="20190625 16:15:12.955"></status>
</kw>
<doc>Scenario: Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190625 16:15:12.972" critical="yes" starttime="20190625 16:15:03.285"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:15:12.974" starttime="20190625 16:15:03.256"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190625 16:15:12.977" starttime="20190625 16:14:53.552"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190625 16:15:12.983" starttime="20190625 16:13:55.382"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="7">Critical Tests</stat>
<stat fail="1" pass="7">All Tests</stat>
</total>
<tag>
<stat info="" links="" doc="" combined="" pass="7" fail="1">normal</stat>
</tag>
<suite>
<stat fail="1" pass="7" id="s1" name="crt20Contract">crt20Contract</stat>
<stat fail="0" pass="3" id="s1-s1" name="CcinvokePass">crt20Contract.CcinvokePass</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="ccinvoketxPass RecieverPTN">crt20Contract.CcinvokePass.ccinvoketxPass RecieverPTN</stat>
<stat fail="0" pass="1" id="s1-s1-s2" name="ccinvoketxPass SenderPTN">crt20Contract.CcinvokePass.ccinvoketxPass SenderPTN</stat>
<stat fail="0" pass="1" id="s1-s1-s3" name="ccinvoketxPass SenderTokenId">crt20Contract.CcinvokePass.ccinvoketxPass SenderTokenId</stat>
<stat fail="0" pass="2" id="s1-s2" name="TransferToken">crt20Contract.TransferToken</stat>
<stat fail="0" pass="1" id="s1-s2-s1" name="transferToken recieverToken">crt20Contract.TransferToken.transferToken recieverToken</stat>
<stat fail="0" pass="1" id="s1-s2-s2" name="transferToken senderTokenPTN">crt20Contract.TransferToken.transferToken senderTokenPTN</stat>
<stat fail="1" pass="0" id="s1-s3" name="zChangeSupply">crt20Contract.zChangeSupply</stat>
<stat fail="1" pass="0" id="s1-s3-s1" name="ccinvoketxPass SenderPTN">crt20Contract.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="0" pass="2" id="s1-s4" name="zSupplyToken">crt20Contract.zSupplyToken</stat>
<stat fail="0" pass="1" id="s1-s4-s1" name="supplyTokenAllow SenderPTNToken">crt20Contract.zSupplyToken.supplyTokenAllow SenderPTNToken</stat>
<stat fail="0" pass="1" id="s1-s4-s2" name="supplyTokenForbid SenderPTNToken">crt20Contract.zSupplyToken.supplyTokenForbid SenderPTNToken</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
