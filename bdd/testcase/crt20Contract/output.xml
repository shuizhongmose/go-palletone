<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190602 21:41:55.157" generator="Robot 2.8.5 (Python 2.7.15 on win32)">
<suite source="D:\software\robotscript\crt20Contract" id="s1" name="crt20Contract">
<suite source="D:\software\robotscript\crt20Contract\ccinvokePass" id="s1-s1" name="ccinvokePass">
<suite source="D:\software\robotscript\crt20Contract\ccinvokePass\ccinvoketxPass_Normal.robot" id="s1-s1-s1" name="ccinvoketxPass Normal">
<kw type="setup" name="utilDefined.getlistAccounts">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:41:55.498" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:41:55.498" starttime="20190602 21:41:55.498"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:41:55.499" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:41:55.499" starttime="20190602 21:41:55.499"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:41:55.500" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:41:55.500" starttime="20190602 21:41:55.500"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:41:55.501" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:41:55.501" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:41:55.501" starttime="20190602 21:41:55.500"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.526" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:41:56.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:41:56.526" starttime="20190602 21:41:55.501"></status>
</kw>
<msg timestamp="20190602 21:41:56.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:41:56.526" starttime="20190602 21:41:55.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.527" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:41:56.527" starttime="20190602 21:41:56.526"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:41:56.535" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:41:56.535" starttime="20190602 21:41:56.527"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.536" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:41:56.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:41:56.536" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:41:56.536" starttime="20190602 21:41:56.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${listAccounts}</arg>
<arg>${jsonRes['result']}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.537" level="INFO">${listAccounts} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q', u'P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy',...</msg>
<status status="PASS" endtime="20190602 21:41:56.537" starttime="20190602 21:41:56.536"></status>
</kw>
<status status="PASS" endtime="20190602 21:41:56.537" starttime="20190602 21:41:55.497"></status>
</kw>
<test id="s1-s1-s1-t1" name="CcinvokePass normal">
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${listAccounts[0]}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.539" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA050', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:41:56.539" starttime="20190602 21:41:56.538"></status>
</kw>
<kw type="kw" name="behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${listAccounts[0]}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.543" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA050', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:41:56.543" starttime="20190602 21:41:56.542"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:41:56.544" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:41:56.544" starttime="20190602 21:41:56.544"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.545" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA050', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:41:56.545" starttime="20190602 21:41:56.544"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:41:56.545" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:41:56.545" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:41:56.545" starttime="20190602 21:41:56.545"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:41:58.379" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA050", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:41:58.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:41:58.379" starttime="20190602 21:41:56.545"></status>
</kw>
<msg timestamp="20190602 21:41:58.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:41:58.379" starttime="20190602 21:41:56.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:41:58.380" starttime="20190602 21:41:58.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:41:58.380" starttime="20190602 21:41:58.380"></status>
</kw>
<msg timestamp="20190602 21:41:58.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:41:58.380" starttime="20190602 21:41:56.541"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:41:58.381" level="INFO">${ret} = 1457ac74d20655f5268ec79276f11446a8fa8b83cf34ddcc47ab0d9ae5d99029</msg>
<status status="PASS" endtime="20190602 21:41:58.381" starttime="20190602 21:41:58.381"></status>
</kw>
<status status="PASS" endtime="20190602 21:41:58.381" starttime="20190602 21:41:56.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:42:00.383" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:42:00.383" starttime="20190602 21:41:58.382"></status>
</kw>
<doc></doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:42:00.384" critical="yes" starttime="20190602 21:41:56.537"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:42:00.386" starttime="20190602 21:41:55.191"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\ccinvokePass\ccinvoketxPass_RecieverPTN.robot" id="s1-s1-s2" name="ccinvoketxPass RecieverPTN">
<kw type="setup" name="utilDefined.getlistAccounts">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:00.403" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:42:00.403" starttime="20190602 21:42:00.403"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:00.405" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:00.405" starttime="20190602 21:42:00.405"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:00.406" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:00.406" starttime="20190602 21:42:00.405"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:00.406" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:00.406" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:00.407" starttime="20190602 21:42:00.406"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.412" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:01.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:01.412" starttime="20190602 21:42:00.407"></status>
</kw>
<msg timestamp="20190602 21:42:01.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:01.413" starttime="20190602 21:42:00.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.413" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:42:01.413" starttime="20190602 21:42:01.413"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:01.414" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:42:01.414" starttime="20190602 21:42:01.413"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.414" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:42:01.414" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:01.415" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:42:01.415" starttime="20190602 21:42:01.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${listAccounts}</arg>
<arg>${jsonRes['result']}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.415" level="INFO">${listAccounts} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q', u'P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy',...</msg>
<status status="PASS" endtime="20190602 21:42:01.415" starttime="20190602 21:42:01.415"></status>
</kw>
<status status="PASS" endtime="20190602 21:42:01.415" starttime="20190602 21:42:00.402"></status>
</kw>
<test id="s1-s1-s2-t1" name="Scenario: 20Contract - Create Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTN1}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${recieverAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.419" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190602 21:42:01.419" starttime="20190602 21:42:01.419"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:01.420" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:01.420" starttime="20190602 21:42:01.420"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.421" level="INFO">${data} = {'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:01.421" starttime="20190602 21:42:01.420"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:01.421" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:01.422" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:01.422" starttime="20190602 21:42:01.421"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:02.428" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:02.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:02.428" starttime="20190602 21:42:01.422"></status>
</kw>
<msg timestamp="20190602 21:42:02.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:02.429" starttime="20190602 21:42:01.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:02.429" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"0.00004"}}
</msg>
<status status="PASS" endtime="20190602 21:42:02.429" starttime="20190602 21:42:02.429"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:02.430" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00004"}}</msg>
<status status="PASS" endtime="20190602 21:42:02.430" starttime="20190602 21:42:02.429"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:02.430" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00004"}} </msg>
<msg timestamp="20190602 21:42:02.430" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:02.430" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00004'}}</msg>
<status status="PASS" endtime="20190602 21:42:02.430" starttime="20190602 21:42:02.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:02.431" starttime="20190602 21:42:02.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:02.431" starttime="20190602 21:42:02.431"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:42:02.432" level="INFO">${strResult} = {u'PTN': u'0.00004'}</msg>
<status status="PASS" endtime="20190602 21:42:02.432" starttime="20190602 21:42:02.431"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:02.433" starttime="20190602 21:42:02.432"></status>
</kw>
<msg timestamp="20190602 21:42:02.433" level="INFO">${PTN} = 0.00004</msg>
<status status="PASS" endtime="20190602 21:42:02.433" starttime="20190602 21:42:02.432"></status>
</kw>
<msg timestamp="20190602 21:42:02.433" level="INFO">${PTN} = 0.00004</msg>
<msg timestamp="20190602 21:42:02.433" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00004'}}</msg>
<status status="PASS" endtime="20190602 21:42:02.433" starttime="20190602 21:42:01.418"></status>
</kw>
<msg timestamp="20190602 21:42:02.433" level="INFO">${PTN1} = 0.00004</msg>
<msg timestamp="20190602 21:42:02.433" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00004'}}</msg>
<status status="PASS" endtime="20190602 21:42:02.433" starttime="20190602 21:42:01.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:42:06.434" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:42:06.434" starttime="20190602 21:42:02.433"></status>
</kw>
<msg timestamp="20190602 21:42:06.434" level="INFO">${PTN1} = 0.00004</msg>
<status status="PASS" endtime="20190602 21:42:06.434" starttime="20190602 21:42:01.417"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${listAccounts[0]}</arg>
</arguments>
<msg timestamp="20190602 21:42:06.436" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA051', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:06.436" starttime="20190602 21:42:06.435"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${listAccounts[0]}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:06.440" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA051', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:42:06.440" starttime="20190602 21:42:06.439"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:06.441" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:06.441" starttime="20190602 21:42:06.441"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:06.441" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA051', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:42:06.441" starttime="20190602 21:42:06.441"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:06.442" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:06.442" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:06.442" starttime="20190602 21:42:06.441"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:08.253" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA051", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:08.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:08.253" starttime="20190602 21:42:06.442"></status>
</kw>
<msg timestamp="20190602 21:42:08.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:08.253" starttime="20190602 21:42:06.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:08.254" starttime="20190602 21:42:08.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:08.254" starttime="20190602 21:42:08.254"></status>
</kw>
<msg timestamp="20190602 21:42:08.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:08.254" starttime="20190602 21:42:06.438"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:42:08.255" level="INFO">${ret} = a47230b00b4433e7ba566c365b14fba81e562fc4b1d8ade175725d47d5e35c95</msg>
<status status="PASS" endtime="20190602 21:42:08.255" starttime="20190602 21:42:08.255"></status>
</kw>
<msg timestamp="20190602 21:42:08.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:08.255" starttime="20190602 21:42:06.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:42:10.255" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:42:10.255" starttime="20190602 21:42:08.255"></status>
</kw>
<msg timestamp="20190602 21:42:10.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:10.255" starttime="20190602 21:42:06.435"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = And Calculate gain">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
</arguments>
<kw type="kw" name="${gain1} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${gain}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190602 21:42:10.257" level="INFO">${quantity} = 2e-05</msg>
<status status="PASS" endtime="20190602 21:42:10.257" starttime="20190602 21:42:10.257"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:42:10.258" level="INFO">${quantity} = 0.00002</msg>
<status status="PASS" endtime="20190602 21:42:10.258" starttime="20190602 21:42:10.258"></status>
</kw>
<msg timestamp="20190602 21:42:10.258" level="INFO">${gain1} = 0.00002</msg>
<status status="PASS" endtime="20190602 21:42:10.258" starttime="20190602 21:42:10.256"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')+decimal.Decimal('${gain1}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:42:10.259" level="INFO">${PTNGAIN} = 0.00006</msg>
<status status="PASS" endtime="20190602 21:42:10.259" starttime="20190602 21:42:10.258"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:42:12.259" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:42:12.259" starttime="20190602 21:42:10.259"></status>
</kw>
<msg timestamp="20190602 21:42:12.259" level="INFO">${PTNGAIN} = 0.00006</msg>
<status status="PASS" endtime="20190602 21:42:12.259" starttime="20190602 21:42:10.256"></status>
</kw>
<kw type="kw" name="${PTN2} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTN2}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${recieverAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:42:12.264" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190602 21:42:12.264" starttime="20190602 21:42:12.264"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:12.266" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:12.266" starttime="20190602 21:42:12.265"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:12.266" level="INFO">${data} = {'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:12.266" starttime="20190602 21:42:12.266"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:12.267" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:12.267" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:12.267" starttime="20190602 21:42:12.267"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:13.274" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:13.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:13.274" starttime="20190602 21:42:12.267"></status>
</kw>
<msg timestamp="20190602 21:42:13.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:13.275" starttime="20190602 21:42:12.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:13.275" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"0.00008"}}
</msg>
<status status="PASS" endtime="20190602 21:42:13.275" starttime="20190602 21:42:13.275"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:13.276" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00008"}}</msg>
<status status="PASS" endtime="20190602 21:42:13.276" starttime="20190602 21:42:13.276"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:13.277" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"0.00008"}} </msg>
<msg timestamp="20190602 21:42:13.277" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:13.277" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00008'}}</msg>
<status status="PASS" endtime="20190602 21:42:13.277" starttime="20190602 21:42:13.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:13.277" starttime="20190602 21:42:13.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:13.278" starttime="20190602 21:42:13.277"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:42:13.278" level="INFO">${strResult} = {u'PTN': u'0.00008'}</msg>
<status status="PASS" endtime="20190602 21:42:13.278" starttime="20190602 21:42:13.278"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:13.279" starttime="20190602 21:42:13.279"></status>
</kw>
<msg timestamp="20190602 21:42:13.279" level="INFO">${PTN} = 0.00008</msg>
<status status="PASS" endtime="20190602 21:42:13.279" starttime="20190602 21:42:13.278"></status>
</kw>
<msg timestamp="20190602 21:42:13.279" level="INFO">${PTN} = 0.00008</msg>
<msg timestamp="20190602 21:42:13.279" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00008'}}</msg>
<status status="PASS" endtime="20190602 21:42:13.279" starttime="20190602 21:42:12.262"></status>
</kw>
<msg timestamp="20190602 21:42:13.279" level="INFO">${PTN2} = 0.00008</msg>
<msg timestamp="20190602 21:42:13.280" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.00008'}}</msg>
<status status="PASS" endtime="20190602 21:42:13.279" starttime="20190602 21:42:12.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:42:17.280" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:42:17.280" starttime="20190602 21:42:13.280"></status>
</kw>
<msg timestamp="20190602 21:42:17.280" level="INFO">${PTN2} = 0.00008</msg>
<status status="PASS" endtime="20190602 21:42:17.280" starttime="20190602 21:42:12.260"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<msg timestamp="20190602 21:42:17.282" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<msg timestamp="20190602 21:42:17.283" level="FAIL">8e-05 != 6e-05</msg>
<status status="FAIL" endtime="20190602 21:42:17.284" starttime="20190602 21:42:17.282"></status>
</kw>
<status status="FAIL" endtime="20190602 21:42:17.284" starttime="20190602 21:42:17.281"></status>
</kw>
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="FAIL" endtime="20190602 21:42:17.284" critical="yes" starttime="20190602 21:42:01.415">8e-05 != 6e-05</status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:42:17.288" starttime="20190602 21:42:00.393"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\ccinvokePass\ccinvoketxPass_SenderPTN.robot" id="s1-s1-s3" name="ccinvoketxPass SenderPTN">
<test id="s1-s1-s3-t1" name="Scenario: 20Contract - Create Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:17.304" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:42:17.304" starttime="20190602 21:42:17.304"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:17.305" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:17.305" starttime="20190602 21:42:17.305"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:17.306" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:17.306" starttime="20190602 21:42:17.306"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:17.306" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:17.306" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:17.306" starttime="20190602 21:42:17.306"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:18.315" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:18.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:18.315" starttime="20190602 21:42:17.307"></status>
</kw>
<msg timestamp="20190602 21:42:18.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:18.315" starttime="20190602 21:42:17.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:18.316" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:42:18.316" starttime="20190602 21:42:18.316"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:18.318" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:42:18.318" starttime="20190602 21:42:18.317"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:18.319" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:42:18.319" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:18.319" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:42:18.319" starttime="20190602 21:42:18.318"></status>
</kw>
<msg timestamp="20190602 21:42:18.320" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:42:18.319" starttime="20190602 21:42:17.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:18.320" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:42:18.320" starttime="20190602 21:42:18.320"></status>
</kw>
<kw type="kw" name="createToken.Personal Unlock Account">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:19.327" level="INFO">[u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q', u'P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy', u'P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM']</msg>
<status status="PASS" endtime="20190602 21:42:19.327" starttime="20190602 21:42:18.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:42:20.327" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:42:20.327" starttime="20190602 21:42:19.327"></status>
</kw>
<kw type="kw" name="${PTN1}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:42:20.330" level="INFO">${address} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:20.330" starttime="20190602 21:42:20.329"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:20.332" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:20.331" starttime="20190602 21:42:20.331"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:20.332" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:20.332" starttime="20190602 21:42:20.332"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:20.333" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:20.333" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:20.333" starttime="20190602 21:42:20.333"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:21.342" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:21.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:21.342" starttime="20190602 21:42:20.333"></status>
</kw>
<msg timestamp="20190602 21:42:21.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:21.343" starttime="20190602 21:42:20.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:21.343" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99991998","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500"}}
</msg>
<status status="PASS" endtime="20190602 21:42:21.343" starttime="20190602 21:42:21.343"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:21.344" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99991998","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500"}}</msg>
<status status="PASS" endtime="20190602 21:42:21.344" starttime="20190602 21:42:21.343"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:21.344" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99991998","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500"}} </msg>
<msg timestamp="20190602 21:42:21.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:21.345" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99991998', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:21.345" starttime="20190602 21:42:21.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:21.345" starttime="20190602 21:42:21.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:21.345" starttime="20190602 21:42:21.345"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:42:21.346" level="INFO">${strResult} = {u'PTN': u'999999999.99991998', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}</msg>
<status status="PASS" endtime="20190602 21:42:21.346" starttime="20190602 21:42:21.345"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:21.346" starttime="20190602 21:42:21.346"></status>
</kw>
<msg timestamp="20190602 21:42:21.347" level="INFO">${PTN} = 999999999.99991998</msg>
<status status="PASS" endtime="20190602 21:42:21.347" starttime="20190602 21:42:21.346"></status>
</kw>
<msg timestamp="20190602 21:42:21.347" level="INFO">${PTN} = 999999999.99991998</msg>
<msg timestamp="20190602 21:42:21.347" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99991998', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:21.347" starttime="20190602 21:42:20.328"></status>
</kw>
<msg timestamp="20190602 21:42:21.347" level="INFO">${PTN1} = 999999999.99991998</msg>
<msg timestamp="20190602 21:42:21.347" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99991998', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:21.347" starttime="20190602 21:42:20.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190602 21:42:26.347" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190602 21:42:26.347" starttime="20190602 21:42:21.347"></status>
</kw>
<msg timestamp="20190602 21:42:26.347" level="INFO">${PTN1} = 999999999.99991998</msg>
<status status="PASS" endtime="20190602 21:42:26.347" starttime="20190602 21:42:17.302"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:26.350" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA052', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:26.350" starttime="20190602 21:42:26.350"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:26.353" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA052', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:42:26.353" starttime="20190602 21:42:26.352"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:26.354" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:26.354" starttime="20190602 21:42:26.354"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:26.354" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA052', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:42:26.354" starttime="20190602 21:42:26.354"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:26.355" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:26.355" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:26.355" starttime="20190602 21:42:26.354"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:28.140" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA052", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:28.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:28.141" starttime="20190602 21:42:26.355"></status>
</kw>
<msg timestamp="20190602 21:42:28.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:28.141" starttime="20190602 21:42:26.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:28.141" starttime="20190602 21:42:28.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:28.142" starttime="20190602 21:42:28.142"></status>
</kw>
<msg timestamp="20190602 21:42:28.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:28.142" starttime="20190602 21:42:26.351"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:42:28.143" level="INFO">${ret} = 1fa92f69eead61115852e240e5f11907e76cec0001ec5ac9d2f4309dc5584215</msg>
<status status="PASS" endtime="20190602 21:42:28.143" starttime="20190602 21:42:28.142"></status>
</kw>
<msg timestamp="20190602 21:42:28.143" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:28.143" starttime="20190602 21:42:26.350"></status>
</kw>
<msg timestamp="20190602 21:42:28.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:28.144" starttime="20190602 21:42:26.349"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = And Calculate gain">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${PTNAmount}+${PTNPoundage}</arg>
</arguments>
<msg timestamp="20190602 21:42:28.145" level="INFO">${PTNGAIN} = 4001</msg>
<status status="PASS" endtime="20190602 21:42:28.145" starttime="20190602 21:42:28.145"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190602 21:42:28.146" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190602 21:42:28.146" starttime="20190602 21:42:28.146"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:42:28.147" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:42:28.147" starttime="20190602 21:42:28.147"></status>
</kw>
<msg timestamp="20190602 21:42:28.147" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:42:28.147" starttime="20190602 21:42:28.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:42:30.147" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:42:30.147" starttime="20190602 21:42:28.147"></status>
</kw>
<msg timestamp="20190602 21:42:30.147" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:42:30.147" starttime="20190602 21:42:28.144"></status>
</kw>
<kw type="kw" name="${PTN2} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTN2}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:42:30.150" level="INFO">${address} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:30.150" starttime="20190602 21:42:30.149"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:30.151" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:30.151" starttime="20190602 21:42:30.150"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:30.151" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:30.151" starttime="20190602 21:42:30.151"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:30.151" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:30.152" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:30.152" starttime="20190602 21:42:30.151"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:31.160" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:31.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:31.160" starttime="20190602 21:42:30.152"></status>
</kw>
<msg timestamp="20190602 21:42:31.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:31.160" starttime="20190602 21:42:30.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:31.161" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99987997","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500"}}
</msg>
<status status="PASS" endtime="20190602 21:42:31.161" starttime="20190602 21:42:31.160"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:31.162" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99987997","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500"}}</msg>
<status status="PASS" endtime="20190602 21:42:31.162" starttime="20190602 21:42:31.161"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:31.162" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99987997","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500"}} </msg>
<msg timestamp="20190602 21:42:31.162" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:31.162" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:31.162" starttime="20190602 21:42:31.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:31.163" starttime="20190602 21:42:31.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:31.163" starttime="20190602 21:42:31.163"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:42:31.163" level="INFO">${strResult} = {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}</msg>
<status status="PASS" endtime="20190602 21:42:31.163" starttime="20190602 21:42:31.163"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:31.164" starttime="20190602 21:42:31.164"></status>
</kw>
<msg timestamp="20190602 21:42:31.164" level="INFO">${PTN} = 999999999.99987997</msg>
<status status="PASS" endtime="20190602 21:42:31.164" starttime="20190602 21:42:31.164"></status>
</kw>
<msg timestamp="20190602 21:42:31.164" level="INFO">${PTN} = 999999999.99987997</msg>
<msg timestamp="20190602 21:42:31.165" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:31.164" starttime="20190602 21:42:30.149"></status>
</kw>
<msg timestamp="20190602 21:42:31.165" level="INFO">${PTN2} = 999999999.99987997</msg>
<msg timestamp="20190602 21:42:31.165" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:31.165" starttime="20190602 21:42:30.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190602 21:42:36.165" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190602 21:42:36.165" starttime="20190602 21:42:31.165"></status>
</kw>
<msg timestamp="20190602 21:42:36.167" level="INFO">${PTN2} = 999999999.99987997</msg>
<status status="PASS" endtime="20190602 21:42:36.167" starttime="20190602 21:42:30.147"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="${GAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${PTNGAIN}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:42:36.173" level="INFO">${GAIN} = 999999999.99987997</msg>
<status status="PASS" endtime="20190602 21:42:36.172" starttime="20190602 21:42:36.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${GAIN}</arg>
</arguments>
<msg timestamp="20190602 21:42:36.174" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:36.174" starttime="20190602 21:42:36.173"></status>
</kw>
<status status="PASS" endtime="20190602 21:42:36.174" starttime="20190602 21:42:36.169"></status>
</kw>
<doc>Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:42:36.176" critical="yes" starttime="20190602 21:42:17.300"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:42:36.181" starttime="20190602 21:42:17.290"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\ccinvokePass\ccinvoketxPass_SenderTokenId.robot" id="s1-s1-s4" name="ccinvoketxPass SenderTokenId">
<test id="s1-s1-s4-t1" name="Scenario: 20Contract - Create Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:36.197" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:42:36.197" starttime="20190602 21:42:36.197"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:36.198" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:36.198" starttime="20190602 21:42:36.198"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:36.199" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:36.199" starttime="20190602 21:42:36.198"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:36.199" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:36.199" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:36.199" starttime="20190602 21:42:36.199"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:37.211" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:37.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:37.211" starttime="20190602 21:42:36.199"></status>
</kw>
<msg timestamp="20190602 21:42:37.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:37.212" starttime="20190602 21:42:36.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:37.214" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:42:37.214" starttime="20190602 21:42:37.213"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:37.218" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:42:37.218" starttime="20190602 21:42:37.215"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:37.219" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:42:37.219" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:37.221" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:42:37.219" starttime="20190602 21:42:37.218"></status>
</kw>
<msg timestamp="20190602 21:42:37.221" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:42:37.221" starttime="20190602 21:42:36.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:37.222" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:42:37.223" starttime="20190602 21:42:37.221"></status>
</kw>
<kw type="kw" name="createToken.Personal Unlock Account">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:38.243" level="INFO">[u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q', u'P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy', u'P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM']</msg>
<status status="PASS" endtime="20190602 21:42:38.244" starttime="20190602 21:42:37.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:42:39.246" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:42:39.246" starttime="20190602 21:42:38.245"></status>
</kw>
<kw type="kw" name="${PTN1}, ${result} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:42:39.248" level="INFO">${address} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:39.247" starttime="20190602 21:42:39.247"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:39.249" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:39.249" starttime="20190602 21:42:39.248"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:39.249" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:39.249" starttime="20190602 21:42:39.249"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:39.249" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:39.250" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:39.250" starttime="20190602 21:42:39.249"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:40.259" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:40.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:40.259" starttime="20190602 21:42:39.250"></status>
</kw>
<msg timestamp="20190602 21:42:40.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:40.260" starttime="20190602 21:42:39.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:40.262" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99987997","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500"}}
</msg>
<status status="PASS" endtime="20190602 21:42:40.262" starttime="20190602 21:42:40.261"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:40.265" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99987997","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500"}}</msg>
<status status="PASS" endtime="20190602 21:42:40.265" starttime="20190602 21:42:40.262"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:40.267" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99987997","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500"}} </msg>
<msg timestamp="20190602 21:42:40.267" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:40.268" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:40.267" starttime="20190602 21:42:40.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:40.270" starttime="20190602 21:42:40.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:40.271" starttime="20190602 21:42:40.270"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:42:40.273" level="INFO">${strResult} = {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}</msg>
<status status="PASS" endtime="20190602 21:42:40.273" starttime="20190602 21:42:40.272"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:40.276" starttime="20190602 21:42:40.275"></status>
</kw>
<msg timestamp="20190602 21:42:40.276" level="INFO">${PTN} = 999999999.99987997</msg>
<status status="PASS" endtime="20190602 21:42:40.276" starttime="20190602 21:42:40.274"></status>
</kw>
<msg timestamp="20190602 21:42:40.277" level="INFO">${PTN} = 999999999.99987997</msg>
<msg timestamp="20190602 21:42:40.277" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:40.277" starttime="20190602 21:42:39.247"></status>
</kw>
<msg timestamp="20190602 21:42:40.278" level="INFO">${PTN1} = 999999999.99987997</msg>
<msg timestamp="20190602 21:42:40.278" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99987997', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}}</msg>
<status status="PASS" endtime="20190602 21:42:40.278" starttime="20190602 21:42:39.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190602 21:42:45.280" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190602 21:42:45.280" starttime="20190602 21:42:40.279"></status>
</kw>
<msg timestamp="20190602 21:42:45.280" level="INFO">${PTN1} = 999999999.99987997</msg>
<status status="PASS" endtime="20190602 21:42:45.280" starttime="20190602 21:42:36.196"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:45.282" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA053', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:45.282" starttime="20190602 21:42:45.281"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:45.284" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA053', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:42:45.284" starttime="20190602 21:42:45.283"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:45.285" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:45.285" starttime="20190602 21:42:45.285"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:45.286" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA053', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:42:45.285" starttime="20190602 21:42:45.285"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:45.286" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:45.286" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:45.286" starttime="20190602 21:42:45.286"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:47.081" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA053", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:47.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:47.082" starttime="20190602 21:42:45.286"></status>
</kw>
<msg timestamp="20190602 21:42:47.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:47.082" starttime="20190602 21:42:45.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:47.082" starttime="20190602 21:42:47.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:47.083" starttime="20190602 21:42:47.082"></status>
</kw>
<msg timestamp="20190602 21:42:47.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:47.083" starttime="20190602 21:42:45.283"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:42:47.083" level="INFO">${ret} = ca8ec3eaccc3c0d7cc65b168a14e8d988af471179b68031a588146513d3c4d77</msg>
<status status="PASS" endtime="20190602 21:42:47.083" starttime="20190602 21:42:47.083"></status>
</kw>
<msg timestamp="20190602 21:42:47.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:47.084" starttime="20190602 21:42:45.282"></status>
</kw>
<msg timestamp="20190602 21:42:47.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:47.084" starttime="20190602 21:42:45.281"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = And Calculate gain">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${PTNAmount}+${PTNPoundage}</arg>
</arguments>
<msg timestamp="20190602 21:42:47.085" level="INFO">${PTNGAIN} = 4001</msg>
<status status="PASS" endtime="20190602 21:42:47.085" starttime="20190602 21:42:47.085"></status>
</kw>
<kw type="kw" name="${PTNGAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${PTNGAIN}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190602 21:42:47.086" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190602 21:42:47.086" starttime="20190602 21:42:47.086"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:42:47.087" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:42:47.087" starttime="20190602 21:42:47.086"></status>
</kw>
<msg timestamp="20190602 21:42:47.087" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:42:47.087" starttime="20190602 21:42:47.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:42:49.087" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:42:49.087" starttime="20190602 21:42:47.087"></status>
</kw>
<msg timestamp="20190602 21:42:49.087" level="INFO">${PTNGAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:42:49.087" starttime="20190602 21:42:47.084"></status>
</kw>
<kw type="kw" name="${count}, ${key} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTN2}, ${result2} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:42:49.091" level="INFO">${address} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:49.091" starttime="20190602 21:42:49.091"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:49.093" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:49.093" starttime="20190602 21:42:49.093"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:49.093" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:49.093" starttime="20190602 21:42:49.093"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:49.094" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:49.094" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:49.094" starttime="20190602 21:42:49.093"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:50.103" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:50.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:50.103" starttime="20190602 21:42:49.094"></status>
</kw>
<msg timestamp="20190602 21:42:50.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:50.104" starttime="20190602 21:42:49.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:50.106" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99983996","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500","QA053+10URO5TR4RRVJ8274Q9":"2500"}}
</msg>
<status status="PASS" endtime="20190602 21:42:50.106" starttime="20190602 21:42:50.105"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:50.111" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99983996","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500","QA053+10URO5TR4RRVJ8274Q9":"2500"...</msg>
<status status="PASS" endtime="20190602 21:42:50.110" starttime="20190602 21:42:50.107"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:50.112" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99983996","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500","QA053+10URO5TR4RRVJ8274Q9":"2500"}} </msg>
<msg timestamp="20190602 21:42:50.112" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:50.112" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+1...</msg>
<status status="PASS" endtime="20190602 21:42:50.112" starttime="20190602 21:42:50.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:50.114" starttime="20190602 21:42:50.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:50.116" starttime="20190602 21:42:50.114"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:42:50.118" level="INFO">${strResult} = {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500'}</msg>
<status status="PASS" endtime="20190602 21:42:50.118" starttime="20190602 21:42:50.116"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:50.120" starttime="20190602 21:42:50.120"></status>
</kw>
<msg timestamp="20190602 21:42:50.121" level="INFO">${PTN} = 999999999.99983996</msg>
<status status="PASS" endtime="20190602 21:42:50.121" starttime="20190602 21:42:50.118"></status>
</kw>
<msg timestamp="20190602 21:42:50.122" level="INFO">${PTN} = 999999999.99983996</msg>
<msg timestamp="20190602 21:42:50.122" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+1...</msg>
<status status="PASS" endtime="20190602 21:42:50.122" starttime="20190602 21:42:49.090"></status>
</kw>
<msg timestamp="20190602 21:42:50.123" level="INFO">${PTN2} = 999999999.99983996</msg>
<msg timestamp="20190602 21:42:50.124" level="INFO">${result2} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+1...</msg>
<status status="PASS" endtime="20190602 21:42:50.123" starttime="20190602 21:42:49.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190602 21:42:55.125" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190602 21:42:55.125" starttime="20190602 21:42:50.124"></status>
</kw>
<kw type="for" name="${key} IN [ ${result2.keys} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${key} = &lt;built-in method keys of dict object at 0x0000000004280378&gt;">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.125" level="INFO">&lt;built-in method keys of dict object at 0x0000000004280378&gt;</msg>
<status status="PASS" endtime="20190602 21:42:55.126" starttime="20190602 21:42:55.125"></status>
</kw>
<status status="PASS" endtime="20190602 21:42:55.126" starttime="20190602 21:42:55.125"></status>
</kw>
<status status="PASS" endtime="20190602 21:42:55.126" starttime="20190602 21:42:55.125"></status>
</kw>
<kw type="kw" name="${count} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int(pow(10,-${tokenDecimal})*${tokenAmount})</arg>
</arguments>
<msg timestamp="20190602 21:42:55.126" level="INFO">${count} = 2500</msg>
<status status="PASS" endtime="20190602 21:42:55.126" starttime="20190602 21:42:55.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result2['result']}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.126" level="INFO">{u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500'}</msg>
<status status="PASS" endtime="20190602 21:42:55.126" starttime="20190602 21:42:55.126"></status>
</kw>
<kw type="kw" name="${item} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result2['result']}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.127" level="INFO">${item} = QA053+10URO5TR4RRVJ8274Q9</msg>
<status status="PASS" endtime="20190602 21:42:55.127" starttime="20190602 21:42:55.127"></status>
</kw>
<kw type="kw" name="${key} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2['result']}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.127" level="INFO">${key} = 2500</msg>
<status status="PASS" endtime="20190602 21:42:55.127" starttime="20190602 21:42:55.127"></status>
</kw>
<msg timestamp="20190602 21:42:55.128" level="INFO">${count} = 2500</msg>
<msg timestamp="20190602 21:42:55.128" level="INFO">${key} = 2500</msg>
<status status="PASS" endtime="20190602 21:42:55.128" starttime="20190602 21:42:49.088"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${count}</arg>
<arg>${key}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:55.129" starttime="20190602 21:42:55.129"></status>
</kw>
<status status="PASS" endtime="20190602 21:42:55.129" starttime="20190602 21:42:55.128"></status>
</kw>
<doc>Verify Sender's Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:42:55.130" critical="yes" starttime="20190602 21:42:36.194"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:42:55.132" starttime="20190602 21:42:36.183"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:42:55.135" starttime="20190602 21:41:55.187"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\ccquery" id="s1-s2" name="Ccquery">
<suite source="D:\software\robotscript\crt20Contract\ccquery\ccquery_Normal.robot" id="s1-s2-s1" name="ccquery Normal">
<test id="s1-s2-s1-t1" name="Scenario: 20Contract - Ccquery">
<kw type="kw" name="behaveKwd.normalCcqueryById">
<doc></doc>
<arguments>
<arg>${20ContractId}</arg>
<arg>${TokenInfoMethod}</arg>
<arg>${preTokenId}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request Ccquery">
<doc></doc>
<arguments>
<arg>${contractId}</arg>
<arg>${methodType}</arg>
<arg>${preTokenId}</arg>
</arguments>
<kw type="kw" name="${methodType} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${methodType}</arg>
<arg>${PreTokenId}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.155" level="INFO">${methodType} = [u'getTokenInfo', u'QA053']</msg>
<status status="PASS" endtime="20190602 21:42:55.155" starttime="20190602 21:42:55.155"></status>
</kw>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${contractId}</arg>
<arg>${methodType}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.155" level="INFO">${transList} = [u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'getTokenInfo', u'QA053'], 0]</msg>
<status status="PASS" endtime="20190602 21:42:55.155" starttime="20190602 21:42:55.155"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>contract_ccquery</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:55.156" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:55.156" starttime="20190602 21:42:55.156"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.157" level="INFO">${data} = {'params': [u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'getTokenInfo', u'QA053'], 0], 'jsonrpc': u'2.0', 'method': u'contract_ccquery', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:55.157" starttime="20190602 21:42:55.157"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:55.157" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:55.157" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:55.158" starttime="20190602 21:42:55.157"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:56.202" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["getTokenInfo", "QA053"], 0], "jsonrpc": "2.0", "method": "contract_ccquery", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:56.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:56.203" starttime="20190602 21:42:55.158"></status>
</kw>
<msg timestamp="20190602 21:42:56.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:56.203" starttime="20190602 21:42:55.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:56.203" level="INFO">{"jsonrpc":"2.0","id":1,"result":"{\"Symbol\":\"QA053\",\"CreateAddr\":\"P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK\",\"TotalSupply\":25000,\"Decimals\":1,\"SupplyAddr\":\"P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK\",\"AssetID\":\"QA053+10URO5TR4RRVJ8274Q9\"}"}
</msg>
<status status="PASS" endtime="20190602 21:42:56.203" starttime="20190602 21:42:56.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>"2.0"</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:56.204" starttime="20190602 21:42:56.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:42:56.204" starttime="20190602 21:42:56.204"></status>
</kw>
<msg timestamp="20190602 21:42:56.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:56.204" starttime="20190602 21:42:55.154"></status>
</kw>
<status status="PASS" endtime="20190602 21:42:56.204" starttime="20190602 21:42:55.153"></status>
</kw>
<doc></doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:42:56.205" critical="yes" starttime="20190602 21:42:55.152"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:42:56.207" starttime="20190602 21:42:55.142"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:42:56.209" starttime="20190602 21:42:55.139"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\transferToken" id="s1-s3" name="transferToken">
<suite source="D:\software\robotscript\crt20Contract\transferToken\transferToken_recieverToken.robot" id="s1-s3-s1" name="transferToken recieverToken">
<test id="s1-s3-s1-t1" name="Scenario: 20Contract - Transfer Token">
<kw type="kw" name="${PTN1} = Given Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:56.226" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:42:56.226" starttime="20190602 21:42:56.226"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:56.227" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:56.227" starttime="20190602 21:42:56.227"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:56.227" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:42:56.227" starttime="20190602 21:42:56.227"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:56.228" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:56.228" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:56.228" starttime="20190602 21:42:56.227"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:42:57.246" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:42:57.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:57.246" starttime="20190602 21:42:56.228"></status>
</kw>
<msg timestamp="20190602 21:42:57.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:42:57.247" starttime="20190602 21:42:56.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:42:57.250" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:42:57.251" starttime="20190602 21:42:57.248"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:42:57.259" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:42:57.259" starttime="20190602 21:42:57.252"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:42:57.262" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:42:57.262" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:42:57.263" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:42:57.262" starttime="20190602 21:42:57.260"></status>
</kw>
<msg timestamp="20190602 21:42:57.264" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:42:57.264" starttime="20190602 21:42:56.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:57.266" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:42:57.266" starttime="20190602 21:42:57.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:42:58.268" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:42:58.268" starttime="20190602 21:42:57.267"></status>
</kw>
<msg timestamp="20190602 21:42:58.269" level="INFO">${PTN1} = None</msg>
<status status="PASS" endtime="20190602 21:42:58.268" starttime="20190602 21:42:56.224"></status>
</kw>
<kw type="kw" name="${ret} = When Request normal CcinvokePass">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:42:58.274" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA054', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:42:58.274" starttime="20190602 21:42:58.273"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:42:58.282" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA054', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:42:58.282" starttime="20190602 21:42:58.280"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:42:58.285" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:42:58.284" starttime="20190602 21:42:58.284"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:42:58.286" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA054', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:42:58.285" starttime="20190602 21:42:58.285"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:42:58.286" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:42:58.287" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:42:58.287" starttime="20190602 21:42:58.286"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:00.051" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA054", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:00.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:00.051" starttime="20190602 21:42:58.288"></status>
</kw>
<msg timestamp="20190602 21:43:00.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:00.051" starttime="20190602 21:42:58.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:00.052" starttime="20190602 21:43:00.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:00.052" starttime="20190602 21:43:00.052"></status>
</kw>
<msg timestamp="20190602 21:43:00.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:00.052" starttime="20190602 21:42:58.277"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:00.053" level="INFO">${ret} = e9309b744c06ca2b0ffa34660c9e1a3e4109f0b921949bdf68919cda660231f5</msg>
<status status="PASS" endtime="20190602 21:43:00.053" starttime="20190602 21:43:00.052"></status>
</kw>
<msg timestamp="20190602 21:43:00.053" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:00.053" starttime="20190602 21:42:58.276"></status>
</kw>
<msg timestamp="20190602 21:43:00.053" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:00.053" starttime="20190602 21:42:58.271"></status>
</kw>
<kw type="kw" name="${key}, ${item} = And Request getbalance after create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${PTN2}, ${result2} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:43:00.056" level="INFO">${address} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:43:00.055" starttime="20190602 21:43:00.055"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:00.057" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:00.056" starttime="20190602 21:43:00.056"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:00.057" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:00.057" starttime="20190602 21:43:00.057"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:00.057" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:00.058" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:00.058" starttime="20190602 21:43:00.057"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:01.065" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:01.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:01.065" starttime="20190602 21:43:00.058"></status>
</kw>
<msg timestamp="20190602 21:43:01.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:01.065" starttime="20190602 21:43:00.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:43:01.066" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"999999999.99983996","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500","QA053+10URO5TR4RRVJ8274Q9":"2500"}}
</msg>
<status status="PASS" endtime="20190602 21:43:01.066" starttime="20190602 21:43:01.066"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:01.067" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99983996","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500","QA053+10URO5TR4RRVJ8274Q9":"2500"...</msg>
<status status="PASS" endtime="20190602 21:43:01.067" starttime="20190602 21:43:01.066"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:01.067" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"999999999.99983996","QA050+10338OOOI015EXUG1QF":"2500","QA051+10OZ9DU2AMJ9ONAN9M4":"2500","QA052+104T4V36F08J9929TCY":"2500","QA053+10URO5TR4RRVJ8274Q9":"2500"}} </msg>
<msg timestamp="20190602 21:43:01.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:01.068" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+1...</msg>
<status status="PASS" endtime="20190602 21:43:01.068" starttime="20190602 21:43:01.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:01.068" starttime="20190602 21:43:01.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:01.068" starttime="20190602 21:43:01.068"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:43:01.069" level="INFO">${strResult} = {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500'}</msg>
<status status="PASS" endtime="20190602 21:43:01.069" starttime="20190602 21:43:01.068"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:01.070" starttime="20190602 21:43:01.069"></status>
</kw>
<msg timestamp="20190602 21:43:01.070" level="INFO">${PTN} = 999999999.99983996</msg>
<status status="PASS" endtime="20190602 21:43:01.070" starttime="20190602 21:43:01.069"></status>
</kw>
<msg timestamp="20190602 21:43:01.070" level="INFO">${PTN} = 999999999.99983996</msg>
<msg timestamp="20190602 21:43:01.070" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+1...</msg>
<status status="PASS" endtime="20190602 21:43:01.070" starttime="20190602 21:43:00.055"></status>
</kw>
<msg timestamp="20190602 21:43:01.070" level="INFO">${PTN2} = 999999999.99983996</msg>
<msg timestamp="20190602 21:43:01.070" level="INFO">${result2} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'999999999.99983996', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500', u'QA051+1...</msg>
<status status="PASS" endtime="20190602 21:43:01.070" starttime="20190602 21:43:00.054"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result2['result']}</arg>
</arguments>
<msg timestamp="20190602 21:43:01.071" level="INFO">${key} = </msg>
<status status="PASS" endtime="20190602 21:43:01.071" starttime="20190602 21:43:01.071"></status>
</kw>
<kw type="kw" name="${item} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20190602 21:43:01.071" level="INFO">${item} = 0</msg>
<status status="PASS" endtime="20190602 21:43:01.071" starttime="20190602 21:43:01.071"></status>
</kw>
<kw type="kw" name="${tokenResult} = createToken.Transfer Token">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${gain}</arg>
<arg>${PTNPoundage}</arg>
<arg>${evidence}</arg>
<arg>${duration}</arg>
</arguments>
<msg timestamp="20190602 21:43:02.082" level="INFO">Request transferToken failed.
{u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Symbol must less than 5 characters', u'code': -32000}}</msg>
<msg timestamp="20190602 21:43:02.083" level="INFO">${tokenResult} = None</msg>
<status status="PASS" endtime="20190602 21:43:02.082" starttime="20190602 21:43:01.071"></status>
</kw>
<msg timestamp="20190602 21:43:02.084" level="INFO">${key} = </msg>
<msg timestamp="20190602 21:43:02.084" level="INFO">${item} = 0</msg>
<status status="PASS" endtime="20190602 21:43:02.083" starttime="20190602 21:43:00.054"></status>
</kw>
<kw type="kw" name="Then Assert gain">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${item}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:43:06.090" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:43:06.090" starttime="20190602 21:43:02.089"></status>
</kw>
<kw type="kw" name="${item1} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${item}+${gain}</arg>
</arguments>
<msg timestamp="20190602 21:43:06.092" level="INFO">${item1} = 2</msg>
<status status="PASS" endtime="20190602 21:43:06.092" starttime="20190602 21:43:06.091"></status>
</kw>
<kw type="kw" name="${RecPTN2}, ${RecResult2} = behaveKwd.normalGetBalance">
<doc></doc>
<arguments>
<arg>${recieverAdd}</arg>
</arguments>
<kw type="kw" name="${PTN}, ${RESULT} = normalKwd.Request getBalance">
<doc></doc>
<arguments>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${address} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${address}</arg>
</arguments>
<msg timestamp="20190602 21:43:06.097" level="INFO">${address} = [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc']</msg>
<status status="PASS" endtime="20190602 21:43:06.097" starttime="20190602 21:43:06.096"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_getBalance</arg>
<arg>${address}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:06.100" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:06.100" starttime="20190602 21:43:06.099"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:06.101" level="INFO">${data} = {'params': [u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc'], 'jsonrpc': u'2.0', 'method': u'ptn_getBalance', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:06.101" starttime="20190602 21:43:06.100"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:06.102" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:06.103" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:06.103" starttime="20190602 21:43:06.102"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.123" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc"], "jsonrpc": "2.0", "method": "ptn_getBalance", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:07.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:07.123" starttime="20190602 21:43:06.103"></status>
</kw>
<msg timestamp="20190602 21:43:07.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:07.124" starttime="20190602 21:43:06.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.125" level="INFO">{"jsonrpc":"2.0","id":1,"result":{"PTN":"0.0002"}}
</msg>
<status status="PASS" endtime="20190602 21:43:07.125" starttime="20190602 21:43:07.124"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:07.128" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":{"PTN":"0.0002"}}</msg>
<status status="PASS" endtime="20190602 21:43:07.128" starttime="20190602 21:43:07.126"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.129" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":{"PTN":"0.0002"}} </msg>
<msg timestamp="20190602 21:43:07.130" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:07.130" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.0002'}}</msg>
<status status="PASS" endtime="20190602 21:43:07.130" starttime="20190602 21:43:07.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:07.131" starttime="20190602 21:43:07.130"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:07.132" starttime="20190602 21:43:07.132"></status>
</kw>
<kw type="kw" name="${strResult} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${jsonRes['result']})</arg>
</arguments>
<msg timestamp="20190602 21:43:07.134" level="INFO">${strResult} = {u'PTN': u'0.0002'}</msg>
<status status="PASS" endtime="20190602 21:43:07.134" starttime="20190602 21:43:07.133"></status>
</kw>
<kw type="kw" name="${PTN} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${strResult}=={}</arg>
<arg>Set Variable</arg>
<arg>${0}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${jsonRes['result']['PTN']}</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:07.136" starttime="20190602 21:43:07.135"></status>
</kw>
<msg timestamp="20190602 21:43:07.136" level="INFO">${PTN} = 0.0002</msg>
<status status="PASS" endtime="20190602 21:43:07.136" starttime="20190602 21:43:07.134"></status>
</kw>
<msg timestamp="20190602 21:43:07.137" level="INFO">${PTN} = 0.0002</msg>
<msg timestamp="20190602 21:43:07.137" level="INFO">${RESULT} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.0002'}}</msg>
<status status="PASS" endtime="20190602 21:43:07.137" starttime="20190602 21:43:06.094"></status>
</kw>
<msg timestamp="20190602 21:43:07.138" level="INFO">${RecPTN2} = 0.0002</msg>
<msg timestamp="20190602 21:43:07.138" level="INFO">${RecResult2} = {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'PTN': u'0.0002'}}</msg>
<status status="PASS" endtime="20190602 21:43:07.138" starttime="20190602 21:43:06.092"></status>
</kw>
<kw type="kw" name="${item2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${RecResult2['result']}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.142" level="FAIL">Dictionary does not contain key ''.</msg>
<status status="FAIL" endtime="20190602 21:43:07.142" starttime="20190602 21:43:07.139"></status>
</kw>
<status status="FAIL" endtime="20190602 21:43:07.142" starttime="20190602 21:43:02.086"></status>
</kw>
<doc>Verify Reciever's Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="FAIL" endtime="20190602 21:43:07.144" critical="yes" starttime="20190602 21:42:56.223">Dictionary does not contain key ''.</status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:43:07.146" starttime="20190602 21:42:56.214"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\transferToken\transferToken_senderTokenPTN.robot" id="s1-s3-s2" name="transferToken senderTokenPTN">
<test id="s1-s3-s2-t1" name="transferToken_senderTokenPTN">
<kw type="kw" name="${GeneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.160" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:43:07.160" starttime="20190602 21:43:07.160"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:07.161" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:07.161" starttime="20190602 21:43:07.161"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.162" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:07.162" starttime="20190602 21:43:07.162"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:07.162" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:07.162" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:07.162" starttime="20190602 21:43:07.162"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.174" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:08.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:08.175" starttime="20190602 21:43:07.163"></status>
</kw>
<msg timestamp="20190602 21:43:08.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:08.176" starttime="20190602 21:43:07.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.178" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:43:08.178" starttime="20190602 21:43:08.176"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:08.186" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:43:08.186" starttime="20190602 21:43:08.179"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.188" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:43:08.188" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:08.188" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:43:08.188" starttime="20190602 21:43:08.187"></status>
</kw>
<msg timestamp="20190602 21:43:08.190" level="INFO">${GeneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:08.190" starttime="20190602 21:43:07.159"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.193" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA055', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:43:08.193" starttime="20190602 21:43:08.192"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.198" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA055', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:43:08.198" starttime="20190602 21:43:08.197"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:08.200" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:08.200" starttime="20190602 21:43:08.199"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.200" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA055', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:43:08.200" starttime="20190602 21:43:08.200"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:08.201" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:08.202" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:08.202" starttime="20190602 21:43:08.201"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:10.013" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA055", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:10.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:10.013" starttime="20190602 21:43:08.202"></status>
</kw>
<msg timestamp="20190602 21:43:10.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:10.013" starttime="20190602 21:43:08.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:10.014" starttime="20190602 21:43:10.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:10.014" starttime="20190602 21:43:10.014"></status>
</kw>
<msg timestamp="20190602 21:43:10.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:10.014" starttime="20190602 21:43:08.196"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:10.015" level="INFO">${ret} = 68279de55dd2ca9ca5fd709770b82ea588213e175c533413d05b3b6e443f21d8</msg>
<status status="PASS" endtime="20190602 21:43:10.015" starttime="20190602 21:43:10.014"></status>
</kw>
<msg timestamp="20190602 21:43:10.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:10.015" starttime="20190602 21:43:08.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:43:14.017" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:43:14.017" starttime="20190602 21:43:10.017"></status>
</kw>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${GeneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:15.024" level="INFO">Current Balance: {u'PTN': u'999999999.99975994', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:43:15.024" level="INFO">${result1} = {u'PTN': u'999999999.99975994', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'2500', u'QA051+10OZ...</msg>
<status status="PASS" endtime="20190602 21:43:15.024" starttime="20190602 21:43:14.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:43:19.025" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:43:19.025" starttime="20190602 21:43:15.025"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190602 21:43:19.026" level="INFO">${key} = QA055+10FTK8QO6BOHLH9B2B4</msg>
<status status="PASS" endtime="20190602 21:43:19.026" starttime="20190602 21:43:19.025"></status>
</kw>
<kw type="kw" name="${PTN1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190602 21:43:19.027" level="INFO">${PTN1} = 999999999.99975994</msg>
<status status="PASS" endtime="20190602 21:43:19.027" starttime="20190602 21:43:19.027"></status>
</kw>
<kw type="kw" name="${item1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:43:19.028" level="INFO">${item1} = 2500</msg>
<status status="PASS" endtime="20190602 21:43:19.028" starttime="20190602 21:43:19.028"></status>
</kw>
<kw type="kw" name="${tokenResult} = createToken.Transfer Token">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${GeneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${amount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${evidence}</arg>
<arg>${duration}</arg>
</arguments>
<msg timestamp="20190602 21:43:21.278" level="INFO">${tokenResult} = 0xe466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad7</msg>
<status status="PASS" endtime="20190602 21:43:21.277" starttime="20190602 21:43:19.029"></status>
</kw>
<kw type="kw" name="${item'} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${item1}-${amount}</arg>
</arguments>
<msg timestamp="20190602 21:43:21.279" level="INFO">${item'} = 500</msg>
<status status="PASS" endtime="20190602 21:43:21.279" starttime="20190602 21:43:21.278"></status>
</kw>
<kw type="kw" name="${PTN'} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${PTNPoundage}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:43:21.280" level="INFO">${PTN'} = 999999998.99975994</msg>
<status status="PASS" endtime="20190602 21:43:21.280" starttime="20190602 21:43:21.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:43:23.281" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:43:23.281" starttime="20190602 21:43:21.281"></status>
</kw>
<kw type="kw" name="${result2} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${GeneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:24.289" level="INFO">Current Balance: {u'PTN': u'999999998.99975994', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:43:24.289" level="INFO">${result2} = {u'PTN': u'999999998.99975994', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA051+10OZ9...</msg>
<status status="PASS" endtime="20190602 21:43:24.289" starttime="20190602 21:43:23.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:43:28.291" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:43:28.291" starttime="20190602 21:43:24.289"></status>
</kw>
<kw type="kw" name="${PTN2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190602 21:43:28.294" level="INFO">${PTN2} = 999999998.99975994</msg>
<status status="PASS" endtime="20190602 21:43:28.294" starttime="20190602 21:43:28.293"></status>
</kw>
<kw type="kw" name="${item2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:43:28.297" level="INFO">${item2} = 500</msg>
<status status="PASS" endtime="20190602 21:43:28.297" starttime="20190602 21:43:28.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${item2}</arg>
<arg>${item'}</arg>
</arguments>
<msg timestamp="20190602 21:43:28.302" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:28.302" starttime="20190602 21:43:28.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTN'}</arg>
</arguments>
<msg timestamp="20190602 21:43:28.305" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:28.305" starttime="20190602 21:43:28.304"></status>
</kw>
<doc>QA055 must be a new one</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:43:28.306" critical="yes" starttime="20190602 21:43:07.158"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:43:28.333" starttime="20190602 21:43:07.148"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:43:28.348" starttime="20190602 21:42:56.211"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\zChangeSupply" id="s1-s4" name="zChangeSupply">
<suite source="D:\software\robotscript\crt20Contract\zChangeSupply\ccinvoketxPass_SenderPTN.robot" id="s1-s4-s1" name="ccinvoketxPass SenderPTN">
<test id="s1-s4-s1-t1" name="Scenario: Change Supply Token">
<kw type="kw" name="Given Send PTN to recieverAdd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:28.376" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:43:28.376" starttime="20190602 21:43:28.376"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:28.377" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:28.377" starttime="20190602 21:43:28.377"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:28.378" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:28.378" starttime="20190602 21:43:28.378"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:28.378" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:28.378" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:28.379" starttime="20190602 21:43:28.378"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.389" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:29.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:29.390" starttime="20190602 21:43:28.379"></status>
</kw>
<msg timestamp="20190602 21:43:29.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:29.391" starttime="20190602 21:43:28.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.393" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]}
</msg>
<status status="PASS" endtime="20190602 21:43:29.393" starttime="20190602 21:43:29.392"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:29.398" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:43:29.398" starttime="20190602 21:43:29.394"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.400" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM"]} </msg>
<msg timestamp="20190602 21:43:29.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:29.401" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:43:29.401" starttime="20190602 21:43:29.399"></status>
</kw>
<msg timestamp="20190602 21:43:29.403" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:29.402" starttime="20190602 21:43:28.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.405" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:29.405" starttime="20190602 21:43:29.404"></status>
</kw>
<kw type="kw" name="${jsonRes} = utilDefined.newAccount">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pwd}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.410" level="INFO">${transList} = [u'1']</msg>
<status status="PASS" endtime="20190602 21:43:29.410" starttime="20190602 21:43:29.409"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${newAccount}</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:29.415" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:29.414" starttime="20190602 21:43:29.414"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.417" level="INFO">${data} = {'params': [u'1'], 'jsonrpc': u'2.0', 'method': u'personal_newAccount', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:29.416" starttime="20190602 21:43:29.415"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:29.419" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:29.420" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:29.420" starttime="20190602 21:43:29.417"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:31.501" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["1"], "jsonrpc": "2.0", "method": "personal_newAccount", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:31.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:31.502" starttime="20190602 21:43:29.421"></status>
</kw>
<msg timestamp="20190602 21:43:31.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:31.503" starttime="20190602 21:43:29.410"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:31.506" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":"P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"}</msg>
<status status="PASS" endtime="20190602 21:43:31.506" starttime="20190602 21:43:31.504"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:31.508" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":"P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"} </msg>
<msg timestamp="20190602 21:43:31.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:31.508" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF'}</msg>
<status status="PASS" endtime="20190602 21:43:31.508" starttime="20190602 21:43:31.507"></status>
</kw>
<msg timestamp="20190602 21:43:31.509" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF'}</msg>
<status status="PASS" endtime="20190602 21:43:31.509" starttime="20190602 21:43:29.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${reciever}</arg>
<arg>${jsonRes['result']}</arg>
</arguments>
<msg timestamp="20190602 21:43:31.511" level="INFO">${reciever} = P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF</msg>
<status status="PASS" endtime="20190602 21:43:31.512" starttime="20190602 21:43:31.510"></status>
</kw>
<kw type="kw" name="${ret1} = behaveKwd.And normalCrtTrans">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${reciever}</arg>
<arg>100000</arg>
<arg>${PTNPoundage}</arg>
</arguments>
<kw type="kw" name="${jsonRes} = normalKwd.Request create transaction">
<doc></doc>
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAddr}</arg>
<arg>${recieverAddr}</arg>
<arg>${senderPTN}</arg>
<arg>${Poundage}</arg>
</arguments>
<msg timestamp="20190602 21:43:31.521" level="INFO">${transList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF', u'100000', u'1']</msg>
<status status="PASS" endtime="20190602 21:43:31.520" starttime="20190602 21:43:31.519"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_cmdCreateTransaction</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:31.524" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:31.524" starttime="20190602 21:43:31.523"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:31.526" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF', u'100000', u'1'], 'jsonrpc': u'2.0', 'method': u'ptn_cmdCreateTransaction', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:31.526" starttime="20190602 21:43:31.525"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:31.527" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:31.528" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:31.528" starttime="20190602 21:43:31.527"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:32.545" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF", "100000", "1"], "jsonrpc": "2.0", "method": "ptn_cmdCreateTransaction", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:32.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:32.546" starttime="20190602 21:43:31.529"></status>
</kw>
<msg timestamp="20190602 21:43:32.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:32.546" starttime="20190602 21:43:31.521"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:32.550" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":"f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305...</msg>
<status status="PASS" endtime="20190602 21:43:32.550" starttime="20190602 21:43:32.547"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:32.551" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":"f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305f5bf88ace290400082bb0800000000000000000000009000000000000000000000000000000000f8468801633c60032b403a9976a914daddf373c10aff5e574214990fcce3a4e3b77c8488ace290400082bb0800000000000000000000009000000000000000000000000000000000808080"} </msg>
<msg timestamp="20190602 21:43:32.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:32.551" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b8...</msg>
<status status="PASS" endtime="20190602 21:43:32.551" starttime="20190602 21:43:32.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${jsonRes['jsonrpc']}</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:32.552" starttime="20190602 21:43:32.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>str(${jsonRes['id']})</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:32.553" starttime="20190602 21:43:32.553"></status>
</kw>
<msg timestamp="20190602 21:43:32.554" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b8...</msg>
<status status="PASS" endtime="20190602 21:43:32.554" starttime="20190602 21:43:31.516"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${jsonRes['result']}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:32.556" level="INFO">${ret} = f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f0</msg>
<status status="PASS" endtime="20190602 21:43:32.556" starttime="20190602 21:43:32.555"></status>
</kw>
<msg timestamp="20190602 21:43:32.556" level="INFO">${ret1} = f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305f5bf88ace290400082bb08000000000000...</msg>
<status status="PASS" endtime="20190602 21:43:32.556" starttime="20190602 21:43:31.513"></status>
</kw>
<kw type="kw" name="${ret2} = behaveKwd.And normalSignTrans">
<doc></doc>
<arguments>
<arg>${ret1}</arg>
<arg>${signType}</arg>
<arg>${pwd}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request sign transaction">
<doc></doc>
<arguments>
<arg>${crtRet}</arg>
<arg>${signType}</arg>
<arg>${pwd}</arg>
</arguments>
<kw type="kw" name="${transList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtRet}</arg>
<arg>${signType}</arg>
<arg>${pwd}</arg>
</arguments>
<msg timestamp="20190602 21:43:32.563" level="INFO">${transList} = [u'f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305f5bf88ace290400082bb08000000000...</msg>
<status status="PASS" endtime="20190602 21:43:32.562" starttime="20190602 21:43:32.562"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_signRawTransaction</arg>
<arg>${transList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:32.567" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:32.567" starttime="20190602 21:43:32.566"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:32.568" level="INFO">${data} = {'params': [u'f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305f5bf88ace290400082bb...</msg>
<status status="PASS" endtime="20190602 21:43:32.568" starttime="20190602 21:43:32.567"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:32.569" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:32.570" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:32.570" starttime="20190602 21:43:32.568"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:34.284" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["f8c3f8bff8bd80b8baf8b8e6e58080a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305f5bf88ace290400082bb0800000000000000000000009000000000000000000000000000000000f8468801633c60032b403a9976a914daddf373c10aff5e574214990fcce3a4e3b77c8488ace290400082bb0800000000000000000000009000000000000000000000000000000000808080", "ALL", "1"], "jsonrpc": "2.0", "method": "ptn_signRawTransaction", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:34.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:34.284" starttime="20190602 21:43:32.570"></status>
</kw>
<msg timestamp="20190602 21:43:34.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:34.284" starttime="20190602 21:43:32.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:34.285" starttime="20190602 21:43:34.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:34.285" starttime="20190602 21:43:34.285"></status>
</kw>
<msg timestamp="20190602 21:43:34.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:34.285" starttime="20190602 21:43:32.559"></status>
</kw>
<kw type="kw" name="${hex} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']['hex']</arg>
<arg>${result_hex}</arg>
<arg>msg="hex:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:34.286" level="INFO">${hex} = f90135f90130f9012d80b90129f90126f893f891b86b483045022100e043766f121f91943b79e2fb7fca152aee57b5ba7cb983b10b34e2871fceafd702206f20e6df6da243ba178b701b2151d20a44e0f7454a3ecab83e5b65cfd00286fc012102a26edd...</msg>
<status status="PASS" endtime="20190602 21:43:34.286" starttime="20190602 21:43:34.285"></status>
</kw>
<kw type="kw" name="${txid} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']['txid']</arg>
<arg>${result_txid}</arg>
<arg>msg="txid:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:34.286" level="INFO">${txid} = 0135f90130f9012d80b90129f90126f893f891b86b483045022100e043766f121f91943</msg>
<status status="PASS" endtime="20190602 21:43:34.286" starttime="20190602 21:43:34.286"></status>
</kw>
<msg timestamp="20190602 21:43:34.287" level="INFO">${ret2} = f90135f90130f9012d80b90129f90126f893f891b86b483045022100e043766f121f91943b79e2fb7fca152aee57b5ba7cb983b10b34e2871fceafd702206f20e6df6da243ba178b701b2151d20a44e0f7454a3ecab83e5b65cfd00286fc012102a26edd...</msg>
<status status="PASS" endtime="20190602 21:43:34.286" starttime="20190602 21:43:32.557"></status>
</kw>
<kw type="kw" name="${ret3} = behaveKwd.And normalSendTrans">
<doc></doc>
<arguments>
<arg>${ret2}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request send transaction">
<doc></doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<kw type="kw" name="${sendList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<msg timestamp="20190602 21:43:34.288" level="INFO">${sendList} = [u'f90135f90130f9012d80b90129f90126f893f891b86b483045022100e043766f121f91943b79e2fb7fca152aee57b5ba7cb983b10b34e2871fceafd702206f20e6df6da243ba178b701b2151d20a44e0f7454a3ecab83e5b65cfd00286fc012102a26...</msg>
<status status="PASS" endtime="20190602 21:43:34.288" starttime="20190602 21:43:34.288"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>ptn_sendRawTransaction</arg>
<arg>${sendList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:34.289" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:34.289" starttime="20190602 21:43:34.289"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:34.290" level="INFO">${data} = {'params': [u'f90135f90130f9012d80b90129f90126f893f891b86b483045022100e043766f121f91943b79e2fb7fca152aee57b5ba7cb983b10b34e2871fceafd702206f20e6df6da243ba178b701b2151d20a44e0f7454a3ecab83e5b65cfd00286...</msg>
<status status="PASS" endtime="20190602 21:43:34.290" starttime="20190602 21:43:34.289"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:34.290" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:34.290" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:34.290" starttime="20190602 21:43:34.290"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:35.305" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["f90135f90130f9012d80b90129f90126f893f891b86b483045022100e043766f121f91943b79e2fb7fca152aee57b5ba7cb983b10b34e2871fceafd702206f20e6df6da243ba178b701b2151d20a44e0f7454a3ecab83e5b65cfd00286fc012102a26edd150eae3972efa6179c376ce3205b8e21a2824797fa0025211069205bb780a0e466955b553e26cb6d07b48f5cb224f03693f2e04fb17703ce5a087311766ad78080f88ef8448609184e72a0009976a9141e85827bd38fe327811296a4b82fdb4ad305f5bf88ace290400082bb0800000000000000000000009000000000000000000000000000000000f8468801633c60032b403a9976a914daddf373c10aff5e574214990fcce3a4e3b77c8488ace290400082bb0800000000000000000000009000000000000000000000000000000000808080"], "jsonrpc": "2.0", "method": "ptn_sendRawTransaction", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:35.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:35.305" starttime="20190602 21:43:34.291"></status>
</kw>
<msg timestamp="20190602 21:43:35.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:35.306" starttime="20190602 21:43:34.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>"2.0"</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:35.308" starttime="20190602 21:43:35.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:35.310" starttime="20190602 21:43:35.308"></status>
</kw>
<msg timestamp="20190602 21:43:35.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:35.310" starttime="20190602 21:43:34.287"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']</arg>
<arg>${result_hex}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:35.313" level="INFO">${ret} = fb719fe86290c634e276c2eb4d6b17426101a004909d5bfcd</msg>
<status status="PASS" endtime="20190602 21:43:35.313" starttime="20190602 21:43:35.311"></status>
</kw>
<msg timestamp="20190602 21:43:35.313" level="INFO">${ret3} = fb719fe86290c634e276c2eb4d6b17426101a004909d5bfcd</msg>
<status status="PASS" endtime="20190602 21:43:35.313" starttime="20190602 21:43:34.287"></status>
</kw>
<status status="PASS" endtime="20190602 21:43:35.314" starttime="20190602 21:43:28.375"></status>
</kw>
<kw type="kw" name="And Request ccinvokePass and transferToken">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:35.321" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:43:35.321" starttime="20190602 21:43:35.320"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:35.322" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:35.322" starttime="20190602 21:43:35.322"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:35.323" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:35.323" starttime="20190602 21:43:35.323"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:35.324" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:35.324" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:35.324" starttime="20190602 21:43:35.323"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.335" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:36.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:36.335" starttime="20190602 21:43:35.324"></status>
</kw>
<msg timestamp="20190602 21:43:36.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:36.336" starttime="20190602 21:43:35.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.337" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM","P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"]}
</msg>
<status status="PASS" endtime="20190602 21:43:36.337" starttime="20190602 21:43:36.336"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:36.341" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:43:36.341" starttime="20190602 21:43:36.338"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.342" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM","P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"]} </msg>
<msg timestamp="20190602 21:43:36.342" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:36.342" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:43:36.342" starttime="20190602 21:43:36.341"></status>
</kw>
<msg timestamp="20190602 21:43:36.344" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:36.343" starttime="20190602 21:43:35.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.345" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:36.345" starttime="20190602 21:43:36.344"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.347" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA055', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:43:36.347" starttime="20190602 21:43:36.346"></status>
</kw>
<kw type="kw" name="behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${reciever}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.355" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA055', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:43:36.355" starttime="20190602 21:43:36.353"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:36.358" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:36.358" starttime="20190602 21:43:36.357"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.360" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA055', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:43:36.360" starttime="20190602 21:43:36.359"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:36.361" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:36.361" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:36.362" starttime="20190602 21:43:36.360"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:38.320" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA055", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:38.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:38.321" starttime="20190602 21:43:36.362"></status>
</kw>
<msg timestamp="20190602 21:43:38.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:38.321" starttime="20190602 21:43:36.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:38.321" starttime="20190602 21:43:38.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:38.322" starttime="20190602 21:43:38.322"></status>
</kw>
<msg timestamp="20190602 21:43:38.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:38.322" starttime="20190602 21:43:36.350"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:38.323" level="INFO">${ret} = 765baf239c6999755e9ec7b3cbb36c1aad1d440aa4aa373d9447b5c9edce1fcd</msg>
<status status="PASS" endtime="20190602 21:43:38.323" starttime="20190602 21:43:38.322"></status>
</kw>
<status status="PASS" endtime="20190602 21:43:38.323" starttime="20190602 21:43:36.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20190602 21:43:41.323" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190602 21:43:41.323" starttime="20190602 21:43:38.323"></status>
</kw>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:42.347" level="INFO">Current Balance: {u'PTN': u'999899997.99971993', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:43:42.348" level="INFO">${result1} = {u'PTN': u'999899997.99971993', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA051+10OZ9...</msg>
<status status="PASS" endtime="20190602 21:43:42.348" starttime="20190602 21:43:41.324"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190602 21:43:42.351" level="INFO">${key} = QA055+10FTK8QO6BOHLH9B2B4</msg>
<status status="PASS" endtime="20190602 21:43:42.351" starttime="20190602 21:43:42.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:43:46.353" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:43:46.353" starttime="20190602 21:43:42.352"></status>
</kw>
<kw type="kw" name="${tokenResult} = createToken.Transfer Token">
<doc></doc>
<arguments>
<arg>${key}</arg>
<arg>${geneAdd}</arg>
<arg>${reciever}</arg>
<arg>2000</arg>
<arg>${PTNPoundage}</arg>
<arg>${evidence}</arg>
<arg>${duration}</arg>
</arguments>
<msg timestamp="20190602 21:43:47.371" level="INFO">Request transferToken failed.
{u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Select utxo err', u'code': -32000}}</msg>
<msg timestamp="20190602 21:43:47.371" level="INFO">${tokenResult} = None</msg>
<status status="PASS" endtime="20190602 21:43:47.371" starttime="20190602 21:43:46.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:43:51.372" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:43:51.372" starttime="20190602 21:43:47.371"></status>
</kw>
<status status="PASS" endtime="20190602 21:43:51.372" starttime="20190602 21:43:35.318"></status>
</kw>
<kw type="kw" name="${ret} = When Change supply of contract">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${changeSupplyMethod}</arg>
<arg>${preTokenId}</arg>
<arg>${reciever}</arg>
</arguments>
<msg timestamp="20190602 21:43:51.375" level="INFO">${ccList} = [u'changeSupplyAddr', u'QA055', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF']</msg>
<status status="PASS" endtime="20190602 21:43:51.375" starttime="20190602 21:43:51.375"></status>
</kw>
<kw type="kw" name="${result} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${reciever}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:51.379" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'changeSupplyAddr', u'QA055', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CS...</msg>
<status status="PASS" endtime="20190602 21:43:51.378" starttime="20190602 21:43:51.378"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:51.381" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:51.381" starttime="20190602 21:43:51.381"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:51.382" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'changeSupplyAddr', u'QA055', u'P13nPDAxN4rRdrmQ9PZ...</msg>
<status status="PASS" endtime="20190602 21:43:51.382" starttime="20190602 21:43:51.382"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:51.383" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:51.384" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:51.384" starttime="20190602 21:43:51.383"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:53.119" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["changeSupplyAddr", "QA055", "P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:53.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:53.119" starttime="20190602 21:43:51.384"></status>
</kw>
<msg timestamp="20190602 21:43:53.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:53.119" starttime="20190602 21:43:51.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:53.120" starttime="20190602 21:43:53.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:53.120" starttime="20190602 21:43:53.120"></status>
</kw>
<msg timestamp="20190602 21:43:53.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:53.121" starttime="20190602 21:43:51.376"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:53.121" level="INFO">${ret} = fe7b81b426f3328a3c42d8193f98afb4aabbff4d61ea7032ba7bcbace1ddd03f</msg>
<status status="PASS" endtime="20190602 21:43:53.121" starttime="20190602 21:43:53.121"></status>
</kw>
<msg timestamp="20190602 21:43:53.121" level="INFO">${result} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:53.121" starttime="20190602 21:43:51.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:43:55.122" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:43:55.122" starttime="20190602 21:43:53.122"></status>
</kw>
<msg timestamp="20190602 21:43:55.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:55.122" starttime="20190602 21:43:51.374"></status>
</kw>
<kw type="kw" name="Then Assert the supplyAddr">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${queryResult} = createToken.Ccquery By Id">
<doc></doc>
<arguments>
<arg>${20ContractId}</arg>
<arg>${getTokenInfo}</arg>
<arg>${preTokenId}</arg>
</arguments>
<msg timestamp="20190602 21:43:55.125" level="FAIL">Non-existing variable '${getTokenInfo}'.</msg>
<status status="FAIL" endtime="20190602 21:43:55.125" starttime="20190602 21:43:55.125"></status>
</kw>
<status status="FAIL" endtime="20190602 21:43:55.125" starttime="20190602 21:43:55.124"></status>
</kw>
<doc>Verify SupplyAdd And Transfer Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="FAIL" endtime="20190602 21:43:55.126" critical="yes" starttime="20190602 21:43:28.373">Non-existing variable '${getTokenInfo}'.</status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:43:55.128" starttime="20190602 21:43:28.363"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:43:55.130" starttime="20190602 21:43:28.360"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\zSupplyToken" id="s1-s5" name="zSupplyToken">
<suite source="D:\software\robotscript\crt20Contract\zSupplyToken\supplyTokenAllow_SenderPTNToken.robot" id="s1-s5-s1" name="supplyTokenAllow SenderPTNToken">
<test id="s1-s5-s1-t1" name="Feature: Vote Contract- Create token">
<kw type="kw" name="Given CcinvokePass normal">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:55.152" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:43:55.152" starttime="20190602 21:43:55.152"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:55.153" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:55.153" starttime="20190602 21:43:55.153"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:55.154" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:43:55.154" starttime="20190602 21:43:55.154"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:55.154" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:55.155" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:55.155" starttime="20190602 21:43:55.154"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.163" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:56.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:56.163" starttime="20190602 21:43:55.155"></status>
</kw>
<msg timestamp="20190602 21:43:56.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:56.164" starttime="20190602 21:43:55.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.164" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM","P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"]}
</msg>
<status status="PASS" endtime="20190602 21:43:56.164" starttime="20190602 21:43:56.164"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:43:56.166" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:43:56.165" starttime="20190602 21:43:56.164"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.166" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM","P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"]} </msg>
<msg timestamp="20190602 21:43:56.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:43:56.166" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:43:56.166" starttime="20190602 21:43:56.166"></status>
</kw>
<msg timestamp="20190602 21:43:56.166" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:56.166" starttime="20190602 21:43:55.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.167" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:43:56.167" starttime="20190602 21:43:56.167"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.167" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA056', u'1', u'25000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:43:56.167" starttime="20190602 21:43:56.167"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.170" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA056', u'1', u'25000', u'P1LxGC...</msg>
<status status="PASS" endtime="20190602 21:43:56.170" starttime="20190602 21:43:56.170"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:43:56.172" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:43:56.172" starttime="20190602 21:43:56.171"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.172" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA056', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:43:56.172" starttime="20190602 21:43:56.172"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:43:56.172" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:43:56.173" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:43:56.173" starttime="20190602 21:43:56.172"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:43:57.887" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA056", "1", "25000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:43:57.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:57.887" starttime="20190602 21:43:56.173"></status>
</kw>
<msg timestamp="20190602 21:43:57.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:57.887" starttime="20190602 21:43:56.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:57.888" starttime="20190602 21:43:57.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:43:57.889" starttime="20190602 21:43:57.888"></status>
</kw>
<msg timestamp="20190602 21:43:57.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:57.889" starttime="20190602 21:43:56.168"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:43:57.890" level="INFO">${ret} = 9abcccbd7cf9523abb4b6e2343d72daba2b030035c629ab3c95646ad0e9cb03c</msg>
<status status="PASS" endtime="20190602 21:43:57.890" starttime="20190602 21:43:57.889"></status>
</kw>
<msg timestamp="20190602 21:43:57.890" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:43:57.890" starttime="20190602 21:43:56.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:43:59.891" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:43:59.891" starttime="20190602 21:43:57.890"></status>
</kw>
<status status="PASS" endtime="20190602 21:43:59.891" starttime="20190602 21:43:55.150"></status>
</kw>
<kw type="kw" name="${PTN1}, ${key}, ${coinToken1} = And Request getbalance before create token">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:44:00.918" level="INFO">Current Balance: {u'PTN': u'999899997.99963991', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA056+10NI64JSZQUOJNXKJ8U': u'2500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:44:00.919" level="INFO">${result1} = {u'PTN': u'999899997.99963991', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA056+10NI6...</msg>
<status status="PASS" endtime="20190602 21:44:00.918" starttime="20190602 21:43:59.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:44:04.919" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:44:04.919" starttime="20190602 21:44:00.919"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190602 21:44:04.919" level="INFO">${key} = QA056+10NI64JSZQUOJNXKJ8U</msg>
<status status="PASS" endtime="20190602 21:44:04.919" starttime="20190602 21:44:04.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:44:06.919" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:44:06.919" starttime="20190602 21:44:04.919"></status>
</kw>
<kw type="kw" name="${PTN1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190602 21:44:06.919" level="INFO">${PTN1} = 999899997.99963991</msg>
<status status="PASS" endtime="20190602 21:44:06.919" starttime="20190602 21:44:06.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:44:07.919" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:44:07.919" starttime="20190602 21:44:06.919"></status>
</kw>
<kw type="kw" name="${coinToken1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:44:07.919" level="INFO">${coinToken1} = 2500</msg>
<status status="PASS" endtime="20190602 21:44:07.919" starttime="20190602 21:44:07.919"></status>
</kw>
<msg timestamp="20190602 21:44:07.920" level="INFO">${PTN1} = 999899997.99963991</msg>
<msg timestamp="20190602 21:44:07.920" level="INFO">${key} = QA056+10NI64JSZQUOJNXKJ8U</msg>
<msg timestamp="20190602 21:44:07.920" level="INFO">${coinToken1} = 2500</msg>
<status status="PASS" endtime="20190602 21:44:07.920" starttime="20190602 21:43:59.891"></status>
</kw>
<kw type="kw" name="${ret} = When Create token of vote contract">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${supplyTokenMethod}</arg>
<arg>${preTokenId}</arg>
<arg>${supplyTokenAmount}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:44:07.922" level="INFO">${ccList} = [u'supplyToken', u'QA056', u'1500000000', u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK']</msg>
<status status="PASS" endtime="20190602 21:44:07.922" starttime="20190602 21:44:07.921"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:44:07.925" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA056', u'1500000000', u'P1LxGCF9ERD3dstqUivk...</msg>
<status status="PASS" endtime="20190602 21:44:07.924" starttime="20190602 21:44:07.924"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:44:07.926" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:44:07.926" starttime="20190602 21:44:07.926"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:44:07.926" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA056', u'1500000000', u'P1LxGCF9E...</msg>
<status status="PASS" endtime="20190602 21:44:07.926" starttime="20190602 21:44:07.926"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:44:07.927" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:44:07.927" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:07.927" starttime="20190602 21:44:07.926"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:44:09.656" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["supplyToken", "QA056", "1500000000", "P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:44:09.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:09.656" starttime="20190602 21:44:07.927"></status>
</kw>
<msg timestamp="20190602 21:44:09.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:09.657" starttime="20190602 21:44:07.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:44:09.657" starttime="20190602 21:44:09.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:44:09.658" starttime="20190602 21:44:09.657"></status>
</kw>
<msg timestamp="20190602 21:44:09.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:09.658" starttime="20190602 21:44:07.923"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:44:09.658" level="INFO">${ret} = 00e445ca899f7bc7efa7eae5aa72c9bac15b016b89222e574d6946d889cb877c</msg>
<status status="PASS" endtime="20190602 21:44:09.658" starttime="20190602 21:44:09.658"></status>
</kw>
<msg timestamp="20190602 21:44:09.659" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:09.658" starttime="20190602 21:44:07.922"></status>
</kw>
<msg timestamp="20190602 21:44:09.659" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:09.659" starttime="20190602 21:44:07.921"></status>
</kw>
<kw type="kw" name="${GAIN} = And Calculate gain of recieverAdd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${invokeGain} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int(${PTNAmount})+int(${PTNPoundage})</arg>
</arguments>
<msg timestamp="20190602 21:44:09.660" level="INFO">${invokeGain} = 4001</msg>
<status status="PASS" endtime="20190602 21:44:09.660" starttime="20190602 21:44:09.660"></status>
</kw>
<kw type="kw" name="${GAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${invokeGain}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190602 21:44:09.662" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190602 21:44:09.662" starttime="20190602 21:44:09.661"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:44:09.663" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:44:09.663" starttime="20190602 21:44:09.662"></status>
</kw>
<msg timestamp="20190602 21:44:09.663" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:44:09.663" starttime="20190602 21:44:09.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20190602 21:44:12.664" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190602 21:44:12.664" starttime="20190602 21:44:09.663"></status>
</kw>
<msg timestamp="20190602 21:44:12.664" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:44:12.664" starttime="20190602 21:44:09.659"></status>
</kw>
<kw type="kw" name="${PTN2}, ${tokenGAIN} = And Request getbalance after create token">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${key}</arg>
<arg>${GAIN}</arg>
</arguments>
<kw type="kw" name="${result2} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:44:13.672" level="INFO">Current Balance: {u'PTN': u'999899997.9995999', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA056+10NI64JSZQUOJNXKJ8U': u'150002500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:44:13.673" level="INFO">${result2} = {u'PTN': u'999899997.9995999', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA056+10NI64...</msg>
<status status="PASS" endtime="20190602 21:44:13.672" starttime="20190602 21:44:12.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20190602 21:44:17.673" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20190602 21:44:17.673" starttime="20190602 21:44:13.673"></status>
</kw>
<kw type="kw" name="${coinToken2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:44:17.673" level="INFO">${coinToken2} = 150002500</msg>
<status status="PASS" endtime="20190602 21:44:17.673" starttime="20190602 21:44:17.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:44:19.674" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:44:19.674" starttime="20190602 21:44:17.673"></status>
</kw>
<kw type="kw" name="${PTN2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190602 21:44:19.674" level="INFO">${PTN2} = 999899997.9995999</msg>
<status status="PASS" endtime="20190602 21:44:19.674" starttime="20190602 21:44:19.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:44:20.674" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:44:20.674" starttime="20190602 21:44:19.674"></status>
</kw>
<kw type="kw" name="${tokenGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>float(${coinToken2})-float(${coinToken1})</arg>
</arguments>
<msg timestamp="20190602 21:44:20.674" level="INFO">${tokenGAIN} = 150000000.0</msg>
<status status="PASS" endtime="20190602 21:44:20.674" starttime="20190602 21:44:20.674"></status>
</kw>
<msg timestamp="20190602 21:44:20.675" level="INFO">${PTN2} = 999899997.9995999</msg>
<msg timestamp="20190602 21:44:20.675" level="INFO">${tokenGAIN} = 150000000.0</msg>
<status status="PASS" endtime="20190602 21:44:20.675" starttime="20190602 21:44:12.665"></status>
</kw>
<kw type="kw" name="Then Assert gain of reciever">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
<arg>${PTN2}</arg>
<arg>${tokenGAIN}</arg>
<arg>${GAIN}</arg>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${GAIN}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:44:20.677" level="INFO">${PTNGAIN} = 999899997.99959990</msg>
<status status="PASS" endtime="20190602 21:44:20.677" starttime="20190602 21:44:20.677"></status>
</kw>
<kw type="kw" name="${supplyTokenAmount} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${supplyTokenAmount}*(10**-${tokenDecimal})</arg>
</arguments>
<msg timestamp="20190602 21:44:20.677" level="INFO">${supplyTokenAmount} = 150000000.0</msg>
<status status="PASS" endtime="20190602 21:44:20.677" starttime="20190602 21:44:20.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<msg timestamp="20190602 21:44:20.678" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:20.678" starttime="20190602 21:44:20.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${supplyTokenAmount}</arg>
<arg>${tokenGAIN}</arg>
</arguments>
<msg timestamp="20190602 21:44:20.678" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'float'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:20.678" starttime="20190602 21:44:20.678"></status>
</kw>
<status status="PASS" endtime="20190602 21:44:20.678" starttime="20190602 21:44:20.676"></status>
</kw>
<doc>Scenario: Verify Sender's PTN and Token</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:44:20.680" critical="yes" starttime="20190602 21:43:55.149"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:44:20.682" starttime="20190602 21:43:55.135"></status>
</suite>
<suite source="D:\software\robotscript\crt20Contract\zSupplyToken\supplyTokenForbid_SenderPTNToken.robot" id="s1-s5-s2" name="supplyTokenForbid SenderPTNToken">
<test id="s1-s5-s2-t1" name="Feature: Vote Contract- Create token">
<kw type="kw" name="Given CcinvokePass normal">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${geneAdd} = utilDefined.getGeneAdd">
<doc></doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw type="kw" name="${list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:44:20.701" level="INFO">${list} = ['']</msg>
<status status="PASS" endtime="20190602 21:44:20.700" starttime="20190602 21:44:20.700"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>personal_listAccounts</arg>
<arg>${list}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:44:20.702" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:44:20.702" starttime="20190602 21:44:20.702"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:44:20.703" level="INFO">${data} = {'params': [''], 'jsonrpc': u'2.0', 'method': u'personal_listAccounts', 'id': 1}</msg>
<status status="PASS" endtime="20190602 21:44:20.703" starttime="20190602 21:44:20.703"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:44:20.704" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:44:20.704" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:20.704" starttime="20190602 21:44:20.703"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.711" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": [""], "jsonrpc": "2.0", "method": "personal_listAccounts", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:44:21.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:21.711" starttime="20190602 21:44:20.704"></status>
</kw>
<msg timestamp="20190602 21:44:21.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:21.711" starttime="20190602 21:44:20.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.712" level="INFO">{"jsonrpc":"2.0","id":1,"result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM","P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"]}
</msg>
<status status="PASS" endtime="20190602 21:44:21.712" starttime="20190602 21:44:21.712"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${resp.content})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:44:21.713" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTs...</msg>
<status status="PASS" endtime="20190602 21:44:21.713" starttime="20190602 21:44:21.712"></status>
</kw>
<kw type="kw" name="${jsonRes} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${jsonRes}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.713" level="INFO">To JSON using : content={"id":1,"jsonrpc":"2.0","result":["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK","P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M","P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt","P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q","P1FXMTL9g7oTsY14VkoTTdY995XPBGruwoy","P19N9ZzeGsTL237UicKZ7C6pTmjkvuPysBM","P13nPDAxN4rRdrmQ9PZ46wHibDc7CSRtbAF"]} </msg>
<msg timestamp="20190602 21:44:21.714" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190602 21:44:21.714" level="INFO">${jsonRes} = {u'jsonrpc': u'2.0', u'id': 1, u'result': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1HWWVqPCJjnP7iniR9UaBq8vxxzQ7RP73M', u'P1GmDDfc7swVRFp13skjYmXRSeHstDXV1Zt', u'P1DzQYPTPv73kZuYZiSN1yXiN6TCRSvMm7Q...</msg>
<status status="PASS" endtime="20190602 21:44:21.714" starttime="20190602 21:44:21.713"></status>
</kw>
<msg timestamp="20190602 21:44:21.714" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:44:21.714" starttime="20190602 21:44:20.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.715" level="INFO">${geneAdd} = P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK</msg>
<status status="PASS" endtime="20190602 21:44:21.715" starttime="20190602 21:44:21.714"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${crtTokenMethod}</arg>
<arg>${evidence}</arg>
<arg>${preTokenId}</arg>
<arg>${tokenDecimal}</arg>
<arg>${tokenAmount}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.715" level="INFO">${ccList} = [u'createToken', u'evidence', u'QA057', u'1', u'25000']</msg>
<status status="PASS" endtime="20190602 21:44:21.715" starttime="20190602 21:44:21.715"></status>
</kw>
<kw type="kw" name="${ret} = behaveKwd.normalCcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${resp} = normalKwd.Request CcinvokePass">
<doc></doc>
<arguments>
<arg>${commonResultCode}</arg>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${ccinvokeList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${senderAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${ContractId}</arg>
<arg>${ccList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.718" level="INFO">${ccinvokeList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA057', u'1', u'25000'], u'1', 6...</msg>
<status status="PASS" endtime="20190602 21:44:21.718" starttime="20190602 21:44:21.717"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccinvokeList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:44:21.719" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:44:21.719" starttime="20190602 21:44:21.719"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.720" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'createToken', u'evidence', u'QA057', u'1', u'25000...</msg>
<status status="PASS" endtime="20190602 21:44:21.720" starttime="20190602 21:44:21.719"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:44:21.720" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:44:21.720" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:21.721" starttime="20190602 21:44:21.720"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:44:23.457" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["createToken", "evidence", "QA057", "1", "25000"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:44:23.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:23.457" starttime="20190602 21:44:21.721"></status>
</kw>
<msg timestamp="20190602 21:44:23.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:23.458" starttime="20190602 21:44:21.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>2.0</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:44:23.458" starttime="20190602 21:44:23.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:44:23.459" starttime="20190602 21:44:23.458"></status>
</kw>
<msg timestamp="20190602 21:44:23.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:23.459" starttime="20190602 21:44:21.716"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:44:23.459" level="INFO">${ret} = 8f3cf5a64d45b9e7b68e047ebefdb8c25b53a2caee7ebf8a8cedacfd603198cc</msg>
<status status="PASS" endtime="20190602 21:44:23.459" starttime="20190602 21:44:23.459"></status>
</kw>
<msg timestamp="20190602 21:44:23.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:23.460" starttime="20190602 21:44:21.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:44:25.461" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:44:25.461" starttime="20190602 21:44:23.460"></status>
</kw>
<status status="PASS" endtime="20190602 21:44:25.461" starttime="20190602 21:44:20.699"></status>
</kw>
<kw type="kw" name="${PTN1}, ${key}, ${coinToken1} = And Request getbalance before create token">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${result1} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:44:26.481" level="INFO">Current Balance: {u'PTN': u'999899997.99955989', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA057+10LRABL8TJFOM5LF4LG': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA056+10NI64JSZQUOJNXKJ8U': u'150002500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:44:26.482" level="INFO">${result1} = {u'PTN': u'999899997.99955989', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA057+10LRABL8TJFOM5LF4LG': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FT...</msg>
<status status="PASS" endtime="20190602 21:44:26.481" starttime="20190602 21:44:25.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190602 21:44:31.483" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190602 21:44:31.483" starttime="20190602 21:44:26.482"></status>
</kw>
<kw type="kw" name="${key} = createToken.Get Token Id">
<doc></doc>
<arguments>
<arg>${preTokenId}</arg>
<arg>${result1}</arg>
</arguments>
<msg timestamp="20190602 21:44:31.483" level="INFO">${key} = QA057+10LRABL8TJFOM5LF4LG</msg>
<status status="PASS" endtime="20190602 21:44:31.483" starttime="20190602 21:44:31.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:44:33.484" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:44:33.484" starttime="20190602 21:44:31.484"></status>
</kw>
<kw type="kw" name="${PTN1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190602 21:44:33.484" level="INFO">${PTN1} = 999899997.99955989</msg>
<status status="PASS" endtime="20190602 21:44:33.484" starttime="20190602 21:44:33.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:44:34.485" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:44:34.485" starttime="20190602 21:44:33.484"></status>
</kw>
<kw type="kw" name="${coinToken1} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result1}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:44:34.485" level="INFO">${coinToken1} = 2500</msg>
<status status="PASS" endtime="20190602 21:44:34.485" starttime="20190602 21:44:34.485"></status>
</kw>
<msg timestamp="20190602 21:44:34.486" level="INFO">${PTN1} = 999899997.99955989</msg>
<msg timestamp="20190602 21:44:34.486" level="INFO">${key} = QA057+10LRABL8TJFOM5LF4LG</msg>
<msg timestamp="20190602 21:44:34.486" level="INFO">${coinToken1} = 2500</msg>
<status status="PASS" endtime="20190602 21:44:34.486" starttime="20190602 21:44:25.462"></status>
</kw>
<kw type="kw" name="${ret} = When Create token of vote contract">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<kw type="kw" name="${ccTokenList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${supplyTokenMethod}</arg>
<arg>${preTokenId}</arg>
<arg>${supplyTokenAmount}</arg>
</arguments>
<msg timestamp="20190602 21:44:34.491" level="INFO">${ccTokenList} = [u'supplyToken', u'QA057', u'1500000000']</msg>
<status status="PASS" endtime="20190602 21:44:34.490" starttime="20190602 21:44:34.490"></status>
</kw>
<kw type="kw" name="${ccList} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${recieverAdd}</arg>
<arg>${PTNAmount}</arg>
<arg>${PTNPoundage}</arg>
<arg>${20ContractId}</arg>
<arg>${ccTokenList}</arg>
<arg>${pwd}</arg>
<arg>${duration}</arg>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20190602 21:44:34.491" level="INFO">${ccList} = [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA057', u'1500000000'], u'1', 600000000, '']</msg>
<status status="PASS" endtime="20190602 21:44:34.491" starttime="20190602 21:44:34.491"></status>
</kw>
<kw type="kw" name="${resp} = utilDefined.setPostRequest">
<doc></doc>
<arguments>
<arg>${host}</arg>
<arg>${invokePsMethod}</arg>
<arg>${ccList}</arg>
</arguments>
<kw type="kw" name="${headers} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Connection=close</arg>
</arguments>
<msg timestamp="20190602 21:44:34.492" level="INFO">${headers} = {'Connection': u'close', 'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20190602 21:44:34.492" starttime="20190602 21:44:34.492"></status>
</kw>
<kw type="kw" name="${data} = Collections.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>jsonrpc=2.0</arg>
<arg>method=${method}</arg>
<arg>params=${transList}</arg>
<arg>id=${1}</arg>
</arguments>
<msg timestamp="20190602 21:44:34.493" level="INFO">${data} = {'params': [u'P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK', u'P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc', u'4000', u'1', u'PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43', [u'supplyToken', u'QA057', u'1500000000'], u'1', 6000...</msg>
<status status="PASS" endtime="20190602 21:44:34.493" starttime="20190602 21:44:34.493"></status>
</kw>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
</arguments>
<msg timestamp="20190602 21:44:34.493" level="INFO">Creating Session using : alias=trans, url=http://localhost:8545/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20190602 21:44:34.493" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:34.494" starttime="20190602 21:44:34.493"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>trans</arg>
<arg>${host}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20190602 21:44:36.306" level="INFO">Post Request using : alias=trans, uri=http://localhost:8545/, data={"params": ["P1LxGCF9ERD3dstqUivkjAbxRVnpyxfPLYK", "P1QL7vY6tMUXEuqrHqtBktiZdyiRRwic7Qc", "4000", "1", "PCGTta3M4t3yXu8uRgkKvaWd2d8DREThG43", ["supplyToken", "QA057", "1500000000"], "1", 600000000, ""], "jsonrpc": "2.0", "method": "contract_ccinvoketxPass", "id": 1}, headers={'Connection': u'close', 'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190602 21:44:36.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:36.306" starttime="20190602 21:44:34.494"></status>
</kw>
<msg timestamp="20190602 21:44:36.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190602 21:44:36.306" starttime="20190602 21:44:34.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20190602 21:44:36.307" level="INFO">{"jsonrpc":"2.0","id":1,"result":"9e0a5ce64b78bec73d30013a000d2552f821c4a0ed15616c11ee3e9fd165a212"}
</msg>
<status status="PASS" endtime="20190602 21:44:36.307" starttime="20190602 21:44:36.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['jsonrpc']</arg>
<arg>"2.0"</arg>
<arg>msg="jsonrpc:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:44:36.307" starttime="20190602 21:44:36.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${resp.content}['id']</arg>
<arg>1</arg>
<arg>msg="id:failed"</arg>
</arguments>
<status status="PASS" endtime="20190602 21:44:36.308" starttime="20190602 21:44:36.307"></status>
</kw>
<kw type="kw" name="${ret} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${resp.content}['result']</arg>
<arg>${commonResultCode}</arg>
<arg>msg="result:does't match Result expression"</arg>
</arguments>
<msg timestamp="20190602 21:44:36.309" level="INFO">${ret} = 9e0a5ce64b78bec73d30013a000d2552f821c4a0ed15616c11ee3e9fd165a212</msg>
<status status="PASS" endtime="20190602 21:44:36.309" starttime="20190602 21:44:36.308"></status>
</kw>
<msg timestamp="20190602 21:44:36.309" level="INFO">${ret} = 9e0a5ce64b78bec73d30013a000d2552f821c4a0ed15616c11ee3e9fd165a212</msg>
<status status="PASS" endtime="20190602 21:44:36.309" starttime="20190602 21:44:34.489"></status>
</kw>
<kw type="kw" name="${GAIN} = And Calculate gain of recieverAdd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${invokeGain} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int(${PTNAmount})+int(${PTNPoundage})</arg>
</arguments>
<msg timestamp="20190602 21:44:36.311" level="INFO">${invokeGain} = 4001</msg>
<status status="PASS" endtime="20190602 21:44:36.311" starttime="20190602 21:44:36.311"></status>
</kw>
<kw type="kw" name="${GAIN} = utilDefined.countRecieverPTN">
<doc></doc>
<arguments>
<arg>${invokeGain}</arg>
</arguments>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${Amount}*0.00000001</arg>
</arguments>
<msg timestamp="20190602 21:44:36.312" level="INFO">${quantity} = 4.001e-05</msg>
<status status="PASS" endtime="20190602 21:44:36.312" starttime="20190602 21:44:36.312"></status>
</kw>
<kw type="kw" name="${quantity} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${quantity}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:44:36.313" level="INFO">${quantity} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:44:36.313" starttime="20190602 21:44:36.312"></status>
</kw>
<msg timestamp="20190602 21:44:36.313" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:44:36.313" starttime="20190602 21:44:36.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20190602 21:44:39.313" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190602 21:44:39.313" starttime="20190602 21:44:36.313"></status>
</kw>
<msg timestamp="20190602 21:44:39.314" level="INFO">${GAIN} = 0.00004001</msg>
<status status="PASS" endtime="20190602 21:44:39.313" starttime="20190602 21:44:36.310"></status>
</kw>
<kw type="kw" name="${PTN2}, ${coinToken2} = And Request getbalance after create token">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
<arg>${key}</arg>
</arguments>
<kw type="kw" name="${result2} = createToken.Get Balance">
<doc></doc>
<arguments>
<arg>${geneAdd}</arg>
</arguments>
<msg timestamp="20190602 21:44:40.332" level="INFO">Current Balance: {u'PTN': u'999899997.99951988', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA057+10LRABL8TJFOM5LF4LG': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FTK8QO6BOHLH9B2B4': u'500', u'QA056+10NI64JSZQUOJNXKJ8U': u'150002500', u'QA051+10OZ9DU2AMJ9ONAN9M4': u'2500', u'QA052+104T4V36F08J9929TCY': u'2500'}</msg>
<msg timestamp="20190602 21:44:40.333" level="INFO">${result2} = {u'PTN': u'999899997.99951988', u'QA050+10338OOOI015EXUG1QF': u'2500', u'QA053+10URO5TR4RRVJ8274Q9': u'2500', u'QA057+10LRABL8TJFOM5LF4LG': u'2500', u'QA054+10ZF6IJPQZNJVGV96WK': u'2500', u'QA055+10FT...</msg>
<status status="PASS" endtime="20190602 21:44:40.333" starttime="20190602 21:44:39.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20190602 21:44:45.333" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190602 21:44:45.333" starttime="20190602 21:44:40.333"></status>
</kw>
<kw type="kw" name="${coinToken2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20190602 21:44:45.335" level="INFO">${coinToken2} = 2500</msg>
<status status="PASS" endtime="20190602 21:44:45.335" starttime="20190602 21:44:45.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20190602 21:44:47.336" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190602 21:44:47.336" starttime="20190602 21:44:45.336"></status>
</kw>
<kw type="kw" name="${PTN2} = Collections.Get From Dictionary">
<doc>Returns a value from the given `dictionary` based on the given `key`.</doc>
<arguments>
<arg>${result2}</arg>
<arg>PTN</arg>
</arguments>
<msg timestamp="20190602 21:44:47.338" level="INFO">${PTN2} = 999899997.99951988</msg>
<status status="PASS" endtime="20190602 21:44:47.338" starttime="20190602 21:44:47.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190602 21:44:48.340" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190602 21:44:48.340" starttime="20190602 21:44:47.338"></status>
</kw>
<msg timestamp="20190602 21:44:48.341" level="INFO">${PTN2} = 999899997.99951988</msg>
<msg timestamp="20190602 21:44:48.341" level="INFO">${coinToken2} = 2500</msg>
<status status="PASS" endtime="20190602 21:44:48.341" starttime="20190602 21:44:39.316"></status>
</kw>
<kw type="kw" name="Then Assert gain of reciever">
<doc></doc>
<arguments>
<arg>${PTN1}</arg>
<arg>${PTN2}</arg>
<arg>${GAIN}</arg>
<arg>${coinToken1}</arg>
<arg>${coinToken2}</arg>
</arguments>
<kw type="kw" name="${PTNGAIN} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>decimal.Decimal('${PTN1}')-decimal.Decimal('${GAIN}')</arg>
<arg>decimal</arg>
</arguments>
<msg timestamp="20190602 21:44:48.348" level="INFO">${PTNGAIN} = 999899997.99951988</msg>
<status status="PASS" endtime="20190602 21:44:48.348" starttime="20190602 21:44:48.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${PTN2}</arg>
<arg>${PTNGAIN}</arg>
</arguments>
<msg timestamp="20190602 21:44:48.349" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'decimal.Decimal'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:48.349" starttime="20190602 21:44:48.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${coinToken1}</arg>
<arg>${coinToken2}</arg>
</arguments>
<msg timestamp="20190602 21:44:48.350" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190602 21:44:48.350" starttime="20190602 21:44:48.349"></status>
</kw>
<kw type="kw" name="${result} = createToken.Get Tx By Req Id">
<doc></doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<msg timestamp="20190602 21:44:49.369" level="INFO">${result} = {u'jsonrpc': u'2.0', u'id': 1, u'result': u'{"item":"transaction_info","info":{"tx_hash":"0x3d60418dfbbb7edcd30d3de44de1316b1231e80f651c45c9f168cea36c527654","tx_size":797,"payment":[{"inputs":[{"txid...</msg>
<status status="PASS" endtime="20190602 21:44:49.369" starttime="20190602 21:44:48.351"></status>
</kw>
<kw type="kw" name="${jsonRes} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>demjson.encode(${result})</arg>
<arg>demjson</arg>
</arguments>
<msg timestamp="20190602 21:44:49.383" level="INFO">${jsonRes} = {"id":1,"jsonrpc":"2.0","result":"{\"item\":\"transaction_info\",\"info\":{\"tx_hash\":\"0x3d60418dfbbb7edcd30d3de44de1316b1231e80f651c45c9f168cea36c527654\",\"tx_size\":797,\"payment\":[{\"inputs\":[...</msg>
<status status="PASS" endtime="20190602 21:44:49.382" starttime="20190602 21:44:49.370"></status>
</kw>
<kw type="kw" name="${error_code} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${result}['result']</arg>
<arg>"error_code":500</arg>
</arguments>
<msg timestamp="20190602 21:44:49.385" level="INFO">${error_code} = "error_code":500</msg>
<status status="PASS" endtime="20190602 21:44:49.385" starttime="20190602 21:44:49.383"></status>
</kw>
<kw type="kw" name="${error_code} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${result}['result']</arg>
<arg>Not the supply address</arg>
</arguments>
<msg timestamp="20190602 21:44:49.387" level="INFO">${error_code} = Not the supply address</msg>
<status status="PASS" endtime="20190602 21:44:49.387" starttime="20190602 21:44:49.386"></status>
</kw>
<status status="PASS" endtime="20190602 21:44:49.388" starttime="20190602 21:44:48.345"></status>
</kw>
<doc>Scenario: Verify Sender's PTN</doc>
<tags>
<tag>normal</tag>
</tags>
<status status="PASS" endtime="20190602 21:44:49.392" critical="yes" starttime="20190602 21:44:20.697"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:44:49.407" starttime="20190602 21:44:20.687"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20190602 21:44:49.417" starttime="20190602 21:43:55.133"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20190602 21:44:49.420" starttime="20190602 21:41:55.158"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="7">Critical Tests</stat>
<stat fail="3" pass="7">All Tests</stat>
</total>
<tag>
<stat info="" links="" doc="" combined="" pass="7" fail="3">normal</stat>
</tag>
<suite>
<stat fail="3" pass="7" id="s1" name="crt20Contract">crt20Contract</stat>
<stat fail="1" pass="3" id="s1-s1" name="ccinvokePass">crt20Contract.ccinvokePass</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="ccinvoketxPass Normal">crt20Contract.ccinvokePass.ccinvoketxPass Normal</stat>
<stat fail="1" pass="0" id="s1-s1-s2" name="ccinvoketxPass RecieverPTN">crt20Contract.ccinvokePass.ccinvoketxPass RecieverPTN</stat>
<stat fail="0" pass="1" id="s1-s1-s3" name="ccinvoketxPass SenderPTN">crt20Contract.ccinvokePass.ccinvoketxPass SenderPTN</stat>
<stat fail="0" pass="1" id="s1-s1-s4" name="ccinvoketxPass SenderTokenId">crt20Contract.ccinvokePass.ccinvoketxPass SenderTokenId</stat>
<stat fail="0" pass="1" id="s1-s2" name="Ccquery">crt20Contract.Ccquery</stat>
<stat fail="0" pass="1" id="s1-s2-s1" name="ccquery Normal">crt20Contract.Ccquery.ccquery Normal</stat>
<stat fail="1" pass="1" id="s1-s3" name="transferToken">crt20Contract.transferToken</stat>
<stat fail="1" pass="0" id="s1-s3-s1" name="transferToken recieverToken">crt20Contract.transferToken.transferToken recieverToken</stat>
<stat fail="0" pass="1" id="s1-s3-s2" name="transferToken senderTokenPTN">crt20Contract.transferToken.transferToken senderTokenPTN</stat>
<stat fail="1" pass="0" id="s1-s4" name="zChangeSupply">crt20Contract.zChangeSupply</stat>
<stat fail="1" pass="0" id="s1-s4-s1" name="ccinvoketxPass SenderPTN">crt20Contract.zChangeSupply.ccinvoketxPass SenderPTN</stat>
<stat fail="0" pass="2" id="s1-s5" name="zSupplyToken">crt20Contract.zSupplyToken</stat>
<stat fail="0" pass="1" id="s1-s5-s1" name="supplyTokenAllow SenderPTNToken">crt20Contract.zSupplyToken.supplyTokenAllow SenderPTNToken</stat>
<stat fail="0" pass="1" id="s1-s5-s2" name="supplyTokenForbid SenderPTNToken">crt20Contract.zSupplyToken.supplyTokenForbid SenderPTNToken</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
